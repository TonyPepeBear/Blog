{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/cf-workers-short-url","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"550f8597-f4a8-5fe3-a7ca-f1392da79702","html":"<p>Cloudflare Workers 也是 Cloudflare 的佛心服務之一，可以把 node 程式部署到 Cloudflare 上的眾多節點，效能也不俗，每天還有 100,000 次的免費呼叫，也沒有冷啟動的問題，對流量不高的網頁來說完全夠用。另外，還有 Workers KV 可以用來儲存資料，這就可以寫出簡單的動態網頁，甚至是一些更複雜的應用。今天就來寫一個 Serverless 的短網址服務，並把資料存在 KV 中，就我目前自己測試下來，Workers 的效率真的沒話說。</p>\n<!--more-->\n<h2>Workers Playground</h2>\n<p>如果想要在網頁中先試試看 Workers，可以到 <a href=\"https://cloudflareworkers.com/\">Cloudflare Workers</a> 這個網站。</p>\n<p>會有一個預設的模板長這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Fetch and log a given request object\n * @param {Request} request\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got response\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>讓我們先來理解一下程式碼。</p>\n<p>可以看到程式有兩個 function，其中 <code class=\"language-text\">addEventListener(...)</code> 就是程式的入口，當 Workers 收到 Request 之後，就會傳入你給他的 function，然後再決定要用什麼 Response 回傳到 Client，這裡他寫了一個 <code class=\"language-text\">handleRequest</code> 的 function 來處理。所以這個程式碼實際上做的事，就只有把 Request 和 Response 給 log 出來，回傳原本的網頁的樣子不做任何更動。</p>\n<p>下圖是 Workers 在 Cloudflare 上的運行順序，可以看到 Workers 被放在最後一個，也就是最後一個決定要回傳什麼內容給 User 的地方，也可以理解為可以在這裡對原本的 Response 做最後的更動，再回傳給 Client。</p>\n<p>所以這個 Playground 上可以輸入任意的 URL，來預覽你的 Workers 在任何一個網站上，會對 Response 做的更動。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/32bd1508-ba78-4e94-76a0-adec503fe000/public\" alt=\"img\"></p>\n<p>也就是說如果把程式改成下面這樣，就可以發現任意網站都會變成 Google 的模樣。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://google.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d7409a8b-8203-4e23-6491-309a4cc5b500/public\" alt=\"img\"></p>\n<p>理解後就會發現，其實 Workers 可以對網頁有即時性的更改，也就是說可以對現有的網頁加上新功能，或是在不更動原本網頁的情況下去修 bug。</p>\n<h2>Wrangler</h2>\n<p>Wrangler 是管理 Workers 會用到的 cli 工具，雖然不安裝也是可以在網頁中撰寫 Workers ，但是功能就會少很多，所以還是建議安裝一下。這裡是官方的 Repo <a href=\"https://github.com/cloudflare/wrangler2\">cloudflare/wrangler2</a>。</p>\n<p>用 npm 安裝到 Global：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @cloudflare/wrangler -g</code></pre></div>\n<p>還是建議去官方 Repo 看下有沒有其他注意事項</p>\n<p>安裝完成後要登入 Cloudflare 帳號，<code class=\"language-text\">wrangler login</code>，再用瀏覽器登入即可。</p>\n<h2>Init Project</h2>\n<p><code class=\"language-text\">wrangler init &lt;project-name></code> 創建新的專案，這當中 Wrangler 會問一些問題，可以按照自己的需求決定。</p>\n<p>init 完成後，可以看到自動產生了一些檔案，基本上會用到的只有 <code class=\"language-text\">wrangler.toml</code> 和 <code class=\"language-text\">index.js</code> 兩個檔案。</p>\n<p>現在可以先在 Terminal 中輸入 <code class=\"language-text\">wrangler dev</code>，就可以讓 Workers 跑在本地。</p>\n<h3>Bug</h3>\n<p>因為我的 Cloudflare 一次登入多個 User，所以在使用 wrangler 的 <strong>2.0.14</strong> 時候會出 bug 直接閃退，我解決的方式是直接在 <code class=\"language-text\">wrangler.toml</code> 中輸入 <code class=\"language-text\">account_id</code> 來避免 wrangler 會需要選擇帳號的問題。</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">account_id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxx\"</span></code></pre></div>\n<h2>Cloudflare Workers KV</h2>\n<p>看到名字取作 KV，直觀的就是表示 <code class=\"language-text\">key-value</code> 鍵值對，缺點是 Key 只能對上一個 Value，不能要巢狀的 Value (像是 Json 那樣)，解決的方式其實也是不難，可以直接在 Value 中存上整的 Json 檔案，但在本文不會多做說明，可以自己研究看看。</p>\n<p>另外 Cloudflare 也有提到，KV 存取在全球可能不是即時性的，好像是只保證 60 秒後會同步到所有 Server，雖然我覺得最慢應該也是 5 內秒啦，我從來沒有感受到延遲過，但如果對即時性有疑慮的專案可能也要注意一下。</p>\n<p>下面就來創建一個 KV namespace，這就是一個 Database 的基本單位，目前 Cloudflare 是允許一個帳號有 100 個 KV namespace，所以正常來說應該也不用擔心會用完。下面用 <code class=\"language-text\">URLS</code> 當作 namespace 的名稱，因為我們是要存短網址的資料。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ wrangler kv:namespace create <span class=\"token string\">\"URLS\"</span>\n\n🌀  Creating namespace with title <span class=\"token string\">\"my-site-MY_KV\"</span>\n✨  Success<span class=\"token operator\">!</span>\nAdd the following to your configuration file:\nkv_namespaces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> binding <span class=\"token operator\">=</span> <span class=\"token string\">\"URLS\"</span>, <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxxxxx\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>然後 wrangler 會有個給你一個 binding 和 id，就直接複製貼上到 <code class=\"language-text\">wrangler.tmol</code> 中即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">kv_namespaces</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token key property\">binding</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"URLS\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxxxxx\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>如果要在 wrangler 的 dev 模式中測試 KV，就多申請一個 Preview KV，來避免對已經上線的服務造成影響：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ wrangler kv:namespace create <span class=\"token string\">\"URLS\"</span> --preview\n\n⛅️ wrangler <span class=\"token number\">2.0</span>.14\n--------------------\n🌀 Creating namespace with title <span class=\"token string\">\"URLS\"</span>\n✨ Success<span class=\"token operator\">!</span>\nAdd the following to your configuration <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> your kv_namespaces array:\n<span class=\"token punctuation\">{</span> binding <span class=\"token operator\">=</span> <span class=\"token string\">\"URLS\"</span>, preview_id <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxx2\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>這次把 <code class=\"language-text\">preview_id</code> 家在原本的 id 後方即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">kv_namespaces</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token key property\">binding</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"URLS\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">preview_id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxx2\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>設定好後，wrangler 會直接把你剛剛取的名字直接用環境變數 (ENV) 傳入，具體的使用方式可以繼續往下看。</p>\n<h2>Routing</h2>\n<p>為了方便等等我們處理傳入的 Routing，我們先來安裝一個 npm 套件。對你沒看錯，Workers 也是支援 npm 套件的：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> itty-router\n\n<span class=\"token function\">npm</span> i itty-router</code></pre></div>\n<p>這樣等等就可以用 itty-router 來處理傳入的 request。</p>\n<p>我們先將 Handle Request 完全丟給的 itty-router 來處理，將 index.js 改成下方這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"itty-router\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> router<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到直接 export router 的 handle 方法，這樣就完全把 Requse 交給 Router 來處理。我們先將 root 回傳 Hello 測試看看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"itty-router\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Workers\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> router<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>現在可以 <code class=\"language-text\">wrangler dev</code> 一下，然後到 <code class=\"language-text\">loclahost:8787/</code> 看看會不會回傳 Hello Workers。</p>\n<blockquote>\n<p>之後的程式碼就不再完整的寫出來了，但就是在這個大框架下撰寫</p>\n</blockquote>\n<h3>New 短網址</h3>\n<p>我們寫一個 post 方法來接收新的網址，並回傳他的新短網址給他。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/new\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 取得 POST JSON BODY 並轉成 JS 物件</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> len <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f00</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JSON 有誤，回傳 400 錯誤</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidHttpUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f00</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL is not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 確認是否為 Http 網址</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> len <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f00</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lenght must be at least 4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 確認至少大於等於 4</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token function\">getRandomString</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 產生英文亂碼</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">URLS</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 從 kv 確認沒有重複</span>\n    len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> 有重複將 len <span class=\"token operator\">+</span><span class=\"token number\">1</span> 後再產生新的\n    s <span class=\"token operator\">=</span> <span class=\"token function\">getRandomString</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">URLS</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存入 kv</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f00</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">?</span> msg <span class=\"token operator\">:</span> <span class=\"token string\">\"BAD REQUEST\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isValidHttpUrl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> url<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">.</span>protocol <span class=\"token operator\">===</span> <span class=\"token string\">\"http:\"</span> <span class=\"token operator\">||</span> url<span class=\"token punctuation\">.</span>protocol <span class=\"token operator\">===</span> <span class=\"token string\">\"https:\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getRandomString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">len</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個 POST 要吃一個像是下面的 json body，分別有要縮的網址，和要產出的短網址長度：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://tonypepe.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"len\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以發現我們是沒有做權限檢查的，所以任何人只要對 POST <code class=\"language-text\">/new</code>，都可以產生新的短網址，但我自己是覺得問題也不大，畢竟 Cloudflare 就是一家 ddos 防護商，所以要被攻擊到一天的使用量都用完應該也很難。或是你想要做權限檢查，也可以試著實作看看。</p>\n<h2>Redirect 重新導向</h2>\n<p>最後一步就是把短網址重新導向到原本的網址，這部份很簡單，就是從 kv 取得原本的網址，然後 Response HTTP 303 來做重新導向，取不到 value 就給 404。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:path\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">URLS</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOT FOUND\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">404</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">303</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Location\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Publish</h2>\n<p><code class=\"language-text\">wrangler publish</code> 就可以把程式碼部署到全球的 Cloudflare 節點，如果沒有自己網域，Cloudflare 也會給你一個 <code class=\"language-text\">xxx.workers.dev</code> 的網域免費使用，可以現在這裡測試看看，再決定要不要把自己的網域綁定上去。</p>\n<h2>後記</h2>\n<p>這篇用不到 100 行程式碼熟練了 Cloudflare 的 Serverless 服務，和寫出了短網址應用，讓我們不用自己架設自己的 Server 就可以有動態網頁的功能。我還看到官方的文件中可以把 Response 加上 Cors 的標頭，讓原本不允許跨站存取的 api 可以跨站存取，雖然很不道德，但是我喜歡。我自己還想到可以對原本的靜態網頁加上限制存取的功能，或是網頁有誤直接把網頁先導向 404，這都是很有趣的應用，大家可以自己發揮看看。</p>\n<p>如果要完整程式碼：<a href=\"https://gist.github.com/TonyPepeBear/f435dae11b83fc2626a49a6b3cc9848b\">Gist</a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://developers.cloudflare.com/workers/\">Cloudflare Workers documentation</a></li>\n</ul>","rawMarkdownBody":"\nCloudflare Workers 也是 Cloudflare 的佛心服務之一，可以把 node 程式部署到 Cloudflare 上的眾多節點，效能也不俗，每天還有 100,000 次的免費呼叫，也沒有冷啟動的問題，對流量不高的網頁來說完全夠用。另外，還有 Workers KV 可以用來儲存資料，這就可以寫出簡單的動態網頁，甚至是一些更複雜的應用。今天就來寫一個 Serverless 的短網址服務，並把資料存在 KV 中，就我目前自己測試下來，Workers 的效率真的沒話說。\n\n<!--more-->\n\n## Workers Playground\n\n如果想要在網頁中先試試看 Workers，可以到 [Cloudflare Workers](https://cloudflareworkers.com/) 這個網站。\n\n會有一個預設的模板長這樣：\n\n```js\naddEventListener(\"fetch\", (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n\n/**\n * Fetch and log a given request object\n * @param {Request} request\n */\nasync function handleRequest(request) {\n  console.log(\"Got request\", request);\n  const response = await fetch(request);\n  console.log(\"Got response\", response);\n  return response;\n}\n```\n\n讓我們先來理解一下程式碼。\n\n可以看到程式有兩個 function，其中 `addEventListener(...)` 就是程式的入口，當 Workers 收到 Request 之後，就會傳入你給他的 function，然後再決定要用什麼 Response 回傳到 Client，這裡他寫了一個 `handleRequest` 的 function 來處理。所以這個程式碼實際上做的事，就只有把 Request 和 Response 給 log 出來，回傳原本的網頁的樣子不做任何更動。\n\n下圖是 Workers 在 Cloudflare 上的運行順序，可以看到 Workers 被放在最後一個，也就是最後一個決定要回傳什麼內容給 User 的地方，也可以理解為可以在這裡對原本的 Response 做最後的更動，再回傳給 Client。\n\n所以這個 Playground 上可以輸入任意的 URL，來預覽你的 Workers 在任何一個網站上，會對 Response 做的更動。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/32bd1508-ba78-4e94-76a0-adec503fe000/public)\n\n也就是說如果把程式改成下面這樣，就可以發現任意網站都會變成 Google 的模樣。\n\n```js\naddEventListener(\"fetch\", (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n\nasync function handleRequest(request) {\n  const response = await fetch(\"https://google.com\");\n  return response;\n}\n```\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d7409a8b-8203-4e23-6491-309a4cc5b500/public)\n\n理解後就會發現，其實 Workers 可以對網頁有即時性的更改，也就是說可以對現有的網頁加上新功能，或是在不更動原本網頁的情況下去修 bug。\n\n## Wrangler\n\nWrangler 是管理 Workers 會用到的 cli 工具，雖然不安裝也是可以在網頁中撰寫 Workers ，但是功能就會少很多，所以還是建議安裝一下。這裡是官方的 Repo [cloudflare/wrangler2](https://github.com/cloudflare/wrangler2)。\n\n用 npm 安裝到 Global：\n\n```bash\nnpm i @cloudflare/wrangler -g\n```\n\n還是建議去官方 Repo 看下有沒有其他注意事項\n\n安裝完成後要登入 Cloudflare 帳號，`wrangler login`，再用瀏覽器登入即可。\n\n## Init Project\n\n`wrangler init <project-name>` 創建新的專案，這當中 Wrangler 會問一些問題，可以按照自己的需求決定。\n\ninit 完成後，可以看到自動產生了一些檔案，基本上會用到的只有 `wrangler.toml` 和 `index.js` 兩個檔案。\n\n現在可以先在 Terminal 中輸入 `wrangler dev`，就可以讓 Workers 跑在本地。\n\n### Bug\n\n因為我的 Cloudflare 一次登入多個 User，所以在使用 wrangler 的 **2.0.14** 時候會出 bug 直接閃退，我解決的方式是直接在 `wrangler.toml` 中輸入 `account_id` 來避免 wrangler 會需要選擇帳號的問題。\n\n```toml\naccount_id = \"xxxxxxxxxxxxxxx\"\n```\n\n## Cloudflare Workers KV\n\n看到名字取作 KV，直觀的就是表示 `key-value` 鍵值對，缺點是 Key 只能對上一個 Value，不能要巢狀的 Value (像是 Json 那樣)，解決的方式其實也是不難，可以直接在 Value 中存上整的 Json 檔案，但在本文不會多做說明，可以自己研究看看。\n\n另外 Cloudflare 也有提到，KV 存取在全球可能不是即時性的，好像是只保證 60 秒後會同步到所有 Server，雖然我覺得最慢應該也是 5 內秒啦，我從來沒有感受到延遲過，但如果對即時性有疑慮的專案可能也要注意一下。\n\n下面就來創建一個 KV namespace，這就是一個 Database 的基本單位，目前 Cloudflare 是允許一個帳號有 100 個 KV namespace，所以正常來說應該也不用擔心會用完。下面用 `URLS` 當作 namespace 的名稱，因為我們是要存短網址的資料。\n\n```bash\n$ wrangler kv:namespace create \"URLS\"\n\n🌀  Creating namespace with title \"my-site-MY_KV\"\n✨  Success!\nAdd the following to your configuration file:\nkv_namespaces = [\n  { binding = \"URLS\", id = \"xxxxxxxxxxxxxxxxxxxxxxx\" }\n]\n```\n\n然後 wrangler 會有個給你一個 binding 和 id，就直接複製貼上到 `wrangler.tmol` 中即可：\n\n```toml\nkv_namespaces = [\n  { binding = \"URLS\", id = \"xxxxxxxxxxxxxxxxxxxxxxx\" }\n]\n```\n\n如果要在 wrangler 的 dev 模式中測試 KV，就多申請一個 Preview KV，來避免對已經上線的服務造成影響：\n\n```bash\n$ wrangler kv:namespace create \"URLS\" --preview\n\n⛅️ wrangler 2.0.14\n--------------------\n🌀 Creating namespace with title \"URLS\"\n✨ Success!\nAdd the following to your configuration file in your kv_namespaces array:\n{ binding = \"URLS\", preview_id = \"xxxxxxxxxxxxxxxxxxxx2\" }\n```\n\n這次把 `preview_id` 家在原本的 id 後方即可：\n\n```toml\nkv_namespaces = [\n    { binding = \"URLS\", id = \"xxxxxxxxxxxxxxxxxxxx\", preview_id = \"xxxxxxxxxxxxxxxxxxxx2\" }\n]\n```\n\n設定好後，wrangler 會直接把你剛剛取的名字直接用環境變數 (ENV) 傳入，具體的使用方式可以繼續往下看。\n\n## Routing\n\n為了方便等等我們處理傳入的 Routing，我們先來安裝一個 npm 套件。對你沒看錯，Workers 也是支援 npm 套件的：\n\n```bash\nyarn add itty-router\n\nnpm i itty-router\n```\n\n這樣等等就可以用 itty-router 來處理傳入的 request。\n\n我們先將 Handle Request 完全丟給的 itty-router 來處理，將 index.js 改成下方這樣：\n\n```js\nimport { Router } from \"itty-router\";\n\nconst router = Router();\n\nexport default {\n  fetch: router.handle,\n};\n```\n\n可以看到直接 export router 的 handle 方法，這樣就完全把 Requse 交給 Router 來處理。我們先將 root 回傳 Hello 測試看看：\n\n```js\nimport { Router } from \"itty-router\";\n\nconst router = Router();\n\nrouter.get(\"/\", async (req, env) => {\n  return new Response(\"Hello Workers\", {\n    status: 200,\n  });\n});\n\nexport default {\n  fetch: router.handle,\n};\n```\n\n現在可以 `wrangler dev` 一下，然後到 `loclahost:8787/` 看看會不會回傳 Hello Workers。\n\n> 之後的程式碼就不再完整的寫出來了，但就是在這個大框架下撰寫\n\n### New 短網址\n\n我們寫一個 post 方法來接收新的網址，並回傳他的新短網址給他。\n\n```js\nrouter.post(\"/new\", async (req, env) => {\n  const body = await req.json();        // 取得 POST JSON BODY 並轉成 JS 物件\n  console.log(JSON.stringify(body));\n  var { url, len } = body;\n  if (url == undefined) return f00(\"\"); // JSON 有誤，回傳 400 錯誤\n  if (!isValidHttpUrl(url)) return f00(\"URL is not valid\");  // 確認是否為 Http 網址\n  if (len == undefined) len = 5;\n  if (len < 4) return f00(\"Lenght must be at least 4\"); // 確認至少大於等於 4\n  var s = getRandomString(len); // 產生英文亂碼\n  while ((await env.URLS.get(s)) != undefined) { // 從 kv 確認沒有重複\n    len++; 有重複將 len +1 後再產生新的\n    s = getRandomString(len);\n  }\n  await env.URLS.put(s, url); // 存入 kv\n  return new Response(s);\n});\n\nconst f00 = (msg) => new Response(msg ? msg : \"BAD REQUEST\", { status: 400 });\n\nfunction isValidHttpUrl(string) {\n  let url;\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nfunction getRandomString(len) {\n  var s = \"\";\n  for (let i = 0; i < len; i++) {\n    s += String.fromCharCode(getRandomInt(26) + 97);\n  }\n  return s;\n}\n```\n\n這個 POST 要吃一個像是下面的 json body，分別有要縮的網址，和要產出的短網址長度：\n\n```json\n{\n  \"url\": \"https://tonypepe.com\",\n  \"len\": 3\n}\n```\n\n可以發現我們是沒有做權限檢查的，所以任何人只要對 POST `/new`，都可以產生新的短網址，但我自己是覺得問題也不大，畢竟 Cloudflare 就是一家 ddos 防護商，所以要被攻擊到一天的使用量都用完應該也很難。或是你想要做權限檢查，也可以試著實作看看。\n\n## Redirect 重新導向\n\n最後一步就是把短網址重新導向到原本的網址，這部份很簡單，就是從 kv 取得原本的網址，然後 Response HTTP 303 來做重新導向，取不到 value 就給 404。\n\n```js\nrouter.get(\"/:path\", async (req, env) => {\n  const { params } = req;\n  const url = await env.URLS.get(params.path.toLowerCase());\n  if (url == undefined) return new Response(\"NOT FOUND\", { status: 404 });\n  const response = new Response(\"\", { status: 303 });\n  response.headers.append(\"Location\", url);\n  return response;\n});\n```\n\n## Publish\n\n`wrangler publish` 就可以把程式碼部署到全球的 Cloudflare 節點，如果沒有自己網域，Cloudflare 也會給你一個 `xxx.workers.dev` 的網域免費使用，可以現在這裡測試看看，再決定要不要把自己的網域綁定上去。\n\n## 後記\n\n這篇用不到 100 行程式碼熟練了 Cloudflare 的 Serverless 服務，和寫出了短網址應用，讓我們不用自己架設自己的 Server 就可以有動態網頁的功能。我還看到官方的文件中可以把 Response 加上 Cors 的標頭，讓原本不允許跨站存取的 api 可以跨站存取，雖然很不道德，但是我喜歡。我自己還想到可以對原本的靜態網頁加上限制存取的功能，或是網頁有誤直接把網頁先導向 404，這都是很有趣的應用，大家可以自己發揮看看。\n\n如果要完整程式碼：[Gist](https://gist.github.com/TonyPepeBear/f435dae11b83fc2626a49a6b3cc9848b)\n\n## Reference\n\n- [Cloudflare Workers documentation](https://developers.cloudflare.com/workers/)\n","excerpt":"Cloudflare Workers 也是 Cloudflare 的佛心服務之一，可以把 node 程式部署到 Cloudflare 上的眾多節點，效能也不俗，每天還有 100,000 次的免費呼叫，也沒有冷啟動的問題，對流量不高的網頁來說完全夠用。另外，還有 Workers KV 可以用來儲存資料，這就可以寫出簡單的動態網頁，甚至是一些更複雜的應用。今天就來寫一個 Serverless 的短網…","frontmatter":{"title":"用 Cloudflare Workers 架設 Serverless 短網址服務","date":"2022-06-21T09:15:49.000Z","draft":false,"tags":["cloudflare","workers","worker","web","short","url"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/b6cf9d30-1028-4aa5-c136-0dbc6c098f00/public","description":null}}}]}},"pageContext":{"id":"550f8597-f4a8-5fe3-a7ca-f1392da79702"}},"staticQueryHashes":[]}