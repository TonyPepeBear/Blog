<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on TonyPepe</title><link>https://tonypepebear.github.io/HugoBlog/posts/</link><description>Recent content in Posts on TonyPepe</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 14 Jan 2022 13:48:25 +0000</lastBuildDate><atom:link href="https://tonypepebear.github.io/HugoBlog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Iconify -- icon 大禮包</title><link>https://tonypepebear.github.io/HugoBlog/posts/web/iconify/</link><pubDate>Fri, 14 Jan 2022 13:48:25 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/web/iconify/</guid><description>&lt;p>GitHub 上有許許多多開源的 icon，但是每個用法不盡相同，甚至大部分的使用方式，都是直接下載 SVG 使用。雖然使用 SVG 也不是不好，但是就會需要自己多一步驟的使用。Iconify 把許多 icon 整合在一起，並且提供非常簡單的辦法，就可以讓網頁有很精美的 icon。&lt;/p></description></item><item><title>用 Go 寫 Telegram Bot</title><link>https://tonypepebear.github.io/HugoBlog/posts/telegram/go-tg-bot/</link><pubDate>Sat, 11 Dec 2021 14:30:15 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/telegram/go-tg-bot/</guid><description>&lt;p>Telegram Bot 沒有任何使用限制，可以寫出許多屬於自己的幫手。本篇簡單的用 Go 寫一個鸚鵡機器人，用戶說什麼，機器人就回什麼。&lt;/p></description></item><item><title>Flutter/Dart (){} 和 () => 的差別</title><link>https://tonypepebear.github.io/HugoBlog/posts/flutter/dart-function-lambda-diff/</link><pubDate>Thu, 04 Nov 2021 05:52:44 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/flutter/dart-function-lambda-diff/</guid><description>&lt;p>Flutter 因為大量使用依賴注入，所以常常會需要傳入 Function。傳入 Function 時，常常會看到兩種寫法，一下是 &lt;code>() {}&lt;/code> 寫法，另一個是 &lt;code>() =&amp;gt;&lt;/code> 寫法。我剛開始寫的時候被搞得頭昏腦脹，查了一下才發現這兩個本身沒什麼不同。&lt;/p></description></item><item><title>Cloudflare Speed Week</title><link>https://tonypepebear.github.io/HugoBlog/posts/web/cloudflare-speed-week/</link><pubDate>Tue, 05 Oct 2021 16:10:58 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/web/cloudflare-speed-week/</guid><description>&lt;p>上個月看到 Cloudflare 發布了一關於速度週的文章，雖然看起來像是 Cloudflare 廣告自己的產品用的，我細讀後才發現，他詳細了說明了現在在上網時為何會有的網頁可以很快，有的網頁卻慢的跟烏龜一樣，詳細說明網路會遇到的一些困境和原理 (單然解法就是用他們家的產品)，在技術方面值得一讀，我就稍微統整一下。&lt;/p></description></item><item><title>Kotlin Coroutine</title><link>https://tonypepebear.github.io/HugoBlog/posts/kotlin/kotlin-coroutine/</link><pubDate>Sun, 19 Sep 2021 07:26:56 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/kotlin/kotlin-coroutine/</guid><description>&lt;p>Kotlin 在非同步處理上有新的方法，協程 &lt;code>Coroutine&lt;/code>。&lt;code>Coroutine&lt;/code> 不會像 &lt;code>Thread&lt;/code> 會耗費大量的資源，能在原本的&lt;code>線程&lt;/code>上創建極為輕量的&lt;code>協程&lt;/code>，且較不會發生記憶體洩漏的情況。&lt;/p></description></item><item><title>Git Submodule</title><link>https://tonypepebear.github.io/HugoBlog/posts/git/git-submodule/</link><pubDate>Tue, 14 Sep 2021 05:11:27 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/git/git-submodule/</guid><description>&lt;p>要在一個 Git 專案中有子專案 (我稱為 git in git)，有兩個辦法，一個是直接 clone 到目錄下，另一個就是使用 submodule。兩者的不同是前者的子專案會在母專案中佔掉所有的空間，而後者只會紀錄 submodule 的路徑和 commit 版本。&lt;/p></description></item><item><title>GitHub SSH</title><link>https://tonypepebear.github.io/HugoBlog/posts/git/github-ssh/</link><pubDate>Sun, 12 Sep 2021 14:32:19 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/git/github-ssh/</guid><description>&lt;p>在本機與 GitHub 溝通最安全的方式就是透過 ssh，最大的好處就是不需要輸入帳號密碼來確認身分，也可以享受到 ssh 加密所提供的安全性。&lt;/p></description></item><item><title>Web Basic</title><link>https://tonypepebear.github.io/HugoBlog/posts/web/web-basic/</link><pubDate>Wed, 01 Sep 2021 14:07:00 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/web/web-basic/</guid><description>&lt;p>瀏覽器只看得懂三種東西：Html、CSS、Javascript。但是常可以發現以這些以外的語言編寫網頁，像是 Python、Ruby、PHP、Java 等等，其實這些東西寫出來的網頁，最後也都是編譯(轉換)成 Html、CSS、Javascript。所以要學網頁，就先從這三樣東西開始學。&lt;/p></description></item><item><title>Cloud IDE Docker</title><link>https://tonypepebear.github.io/HugoBlog/posts/dev/cloud-ide-docker/</link><pubDate>Mon, 30 Aug 2021 08:13:47 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/dev/cloud-ide-docker/</guid><description>&lt;p>紀錄一下我的 &lt;a href="https://github.com/TonyPepeBear/cloud-ide-docker">Cloud IDE Docker&lt;/a> 使用方法。&lt;/p></description></item><item><title>Docker</title><link>https://tonypepebear.github.io/HugoBlog/posts/docker/docker/</link><pubDate>Wed, 25 Aug 2021 18:31:57 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/docker/docker/</guid><description>&lt;p>Docker 是一個虛擬化技術，可以將我們編寫好的程式包裹成一個小的「容器」，再發佈到伺服器上。Docker 解決了困擾程式界多年來的環境問題，只要伺服器安裝了 Docker 就可以確保一定可以執行服務。&lt;/p></description></item><item><title>Cloudflare Tunnel</title><link>https://tonypepebear.github.io/HugoBlog/posts/web/cloudflare-tunnel/</link><pubDate>Fri, 13 Aug 2021 15:17:39 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/web/cloudflare-tunnel/</guid><description>&lt;p>Cloudflare 真的是佛心公司，提供免費的 DNS、DDoS 防護，還可以拿來託管靜態網頁，而今天是介紹他們公司的 Tunnel，這個服務可以將本地電腦的特定 port 開放到網路上，而且完全免費，在台灣的速度也不慢，真的很佛，幾乎等於拿到免費的 IPv4。&lt;/p>
&lt;p>我覺得目前的缺點就是網路上相關的資料比較少，遇到問題很難找到資料參考，因為他其實主要是 Cloudflare 的一項零信任服務，目標客群都是一些厲害的網管，所以官方寫的文件也都很深奧，如果是新手可能會頭昏眼花。&lt;/p></description></item><item><title>A320neo 冷艙到飛行</title><link>https://tonypepebear.github.io/HugoBlog/posts/flight/a320-note/</link><pubDate>Wed, 21 Jul 2021 22:08:20 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/flight/a320-note/</guid><description>&lt;p>簡單記錄我所認知的 A320 的一些程序。&lt;/p></description></item><item><title>Beautiful Terminal</title><link>https://tonypepebear.github.io/HugoBlog/posts/linux/beautiful-terminal/</link><pubDate>Fri, 16 Jul 2021 23:43:07 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/linux/beautiful-terminal/</guid><description>&lt;p>打不贏別人，至少長得比他帥。最近終於把我的 Terminal 弄成自己喜歡的樣子，所以做一下簡單的紀錄，希望大家都可以把東西變成自己喜歡的樣子。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210716235146.png" alt="img">&lt;/p></description></item><item><title>Markdown</title><link>https://tonypepebear.github.io/HugoBlog/posts/web/markdown/</link><pubDate>Mon, 05 Jul 2021 17:05:38 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/web/markdown/</guid><description>&lt;p>Markdown 可以想像成 Html 的簡化版本，廣泛用於編寫文章或是技術文件，因為其特性基本上由 Html 簡化而來，所以方便的由寫好的 Markdown 產生 Html 網頁，像是這篇文章也是由 Markdown 編寫。&lt;/p></description></item><item><title>Frp</title><link>https://tonypepebear.github.io/HugoBlog/posts/linux/frp/</link><pubDate>Sun, 20 Jun 2021 21:48:33 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/linux/frp/</guid><description>&lt;p>frp 全名是 fast reverse proxy，可以將在 NAT 後方的服務快速的發布到公網 ip 上，可以支援 TCP 和 UDP 協議，我覺得唯一的缺點就是所有流量都會經過 Server 端，所以如果 Server 端的流量有限制就需要注意一下。&lt;/p></description></item><item><title>發布 Markdown 至 Medium</title><link>https://tonypepebear.github.io/HugoBlog/posts/kotlin/medium-api/</link><pubDate>Wed, 16 Jun 2021 02:35:56 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/kotlin/medium-api/</guid><description>&lt;p>我認為用 Markdown 用來寫技術文章還是最順手的，但是 Medium 的編輯器卻不支援 Markdown。前幾天用 import 的方式也失敗，另尋他處後發現 Medium 支援用 API 發布文章，更還支援用 Markdown 和 Html 發布。雖然不懂官方為何不直接讓用戶用 Markdown 發布，而是要用 API，但是竟然找到了一絲希望，就來試試看用 API 的方式發布文章。&lt;/p></description></item><item><title>用 VSCode 寫 C/C++</title><link>https://tonypepebear.github.io/HugoBlog/posts/vscode/vscode-clang/</link><pubDate>Tue, 08 Jun 2021 00:55:19 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/vscode/vscode-clang/</guid><description>&lt;p>其實在 VSCode 寫 C 根本不是一件難事，VSCode 本來就是一個優秀的文字編輯器，所以要要寫 C 完全不是問題，但問題是出在執行或 Debug 寫好的 Code 實在是很麻煩，要先經過不少設定。而且在官方的文件中，其實是教你怎麼建置專案，執行 Debug，如果只是寫一點簡單的小程式根本用不到那麼複雜的設定，所以本文是我目前發現比較容易在 VSCode 中執行 C 和 C++ 的方法。&lt;/p></description></item><item><title>用 Github Actions 來發布 Hugo 靜態網頁</title><link>https://tonypepebear.github.io/HugoBlog/posts/hugo/hugo-github-actions/</link><pubDate>Mon, 07 Jun 2021 22:00:53 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/hugo/hugo-github-actions/</guid><description>&lt;p>Github Actions 是 Github 官方提供的 CI/CD 服務，編寫簡單的腳本，就可以在每次 Push、 PR 時，自動的檢查程式碼可不可以通過 Test，或是直接產生 Release 來交付專案成品。另外一個重點是，這個服務完全免費，而在私有 Repo，則是有限制容器的執行時間。本文使用 Github Actions 來自動將 Hugo 專案自動產生靜態網頁，並且將網頁發布到 &lt;code>gh-pages&lt;/code> 的 git 分支。&lt;/p></description></item><item><title>用 Hugo 來寫文章吧</title><link>https://tonypepebear.github.io/HugoBlog/posts/hugo/hugo/</link><pubDate>Mon, 07 Jun 2021 02:10:46 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/hugo/hugo/</guid><description>&lt;p>Hugo 是靜態網頁的產生器，類似 Hexo 和 Jekyll，Hugo 由 go 語言編寫，效率極高，我原本是用 Hexo 在產生文章，後來發現 Hugo 這個好東西，也觀望了一陣子&lt;del>其實是懶&lt;/del>，就決定換過來了，目前也用得非常順手。&lt;/p></description></item><item><title>Ubuntu 開機黑屏</title><link>https://tonypepebear.github.io/HugoBlog/posts/linux/ubuntu-black-screen/</link><pubDate>Sun, 06 Jun 2021 01:17:17 +0800</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/linux/ubuntu-black-screen/</guid><description>&lt;p>我目前的工作環境都是用 Ubuntu &lt;del>(被 Windows 氣到)&lt;/del>，前幾天我重新安裝 Ubuntu 的時候，一直安裝失敗，重新安裝四、五次後都沒有畫面，最後才發現是顯卡驅動問題。&lt;/p>
&lt;blockquote>
&lt;p>聽說 Ubuntu 開機沒有畫面或是只有 Logo，十次有九次都是顯卡驅動的問題&lt;/p>
&lt;/blockquote></description></item><item><title>自架 Play With Docker</title><link>https://tonypepebear.github.io/HugoBlog/posts/docker/pwd-hosting/</link><pubDate>Sat, 05 Jun 2021 16:08:29 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/docker/pwd-hosting/</guid><description>&lt;p>學過 Docker 的人都應該有用過 Docker Playground 來學習或是測試過軟體，不想在本機跑 Docker 可以先用 Docker Playground 試試看軟體可不可以跑。&lt;/p></description></item><item><title>Hello World</title><link>https://tonypepebear.github.io/HugoBlog/posts/others/hello-world/</link><pubDate>Sat, 05 Jun 2021 11:15:18 +0000</pubDate><guid>https://tonypepebear.github.io/HugoBlog/posts/others/hello-world/</guid><description>&lt;p>This is my first &lt;code>post&lt;/code> in hugo.&lt;/p>
&lt;p>&lt;a href="google.com">google&lt;/a>&lt;/p></description></item></channel></rss>