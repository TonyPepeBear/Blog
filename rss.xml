<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>TonyPepe</title><link>https://tonypepe.com/</link><description>紀錄我踩過得坑</description><generator>Hugo 0.83.1 https://gohugo.io/</generator><language>zh-TW</language><managingEditor>tonybear55665566@gmail.com (TonyPepe)</managingEditor><webMaster>tonybear55665566@gmail.com (TonyPepe)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Sun, 06 Jun 2021 19:17:06 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://tonypepe.com/rss.xml"/><item><title>用 Hugo 來寫文章吧</title><link>https://tonypepe.com/posts/hugo/hugo/</link><guid isPermaLink="true">https://tonypepe.com/posts/hugo/hugo/</guid><pubDate>Mon, 07 Jun 2021 02:10:46 +0800</pubDate><author>tonybear55665566@gmail.com (TonyPepe)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>Hugo 是靜態網頁的產生器，類似 Hexo 和 Jekyll，Hugo 由 go 語言編寫，效率極高，我原本是用 Hexo 在產生文章，後來發現 Hugo 這個好東西，也觀望了一陣子&lt;del>其實是懶&lt;/del>，就決定換過來了，目前也用得非常順手。&lt;/p>
&lt;h2 id="安裝-hugo">安裝 Hugo&lt;/h2>
&lt;p>這是 Hugo 的&lt;a href="https://gohugo.io/">官網&lt;/a>，進去後可以看到一些簡單的介紹和安裝方法。&lt;/p>
&lt;p>我蠻推薦在 vscode 的 &lt;code>code in container&lt;/code> 的方式用 Hugo，因為我自己也是這樣用，這樣就不用擔心會弄髒環境，但就讓有興趣的人自己研究吧，這裡我介紹一般電腦的安裝方式。&lt;/p>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>Windows 我建議是用 Chocolatey 來安裝是最方便的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ps1" data-lang="ps1">&lt;span class="n">choco&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">hugo&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是如果不想要用 Chocolatey 安裝，可以去官方的 &lt;a href="https://github.com/gohugoio/hugo/releases">Github Release&lt;/a> 下載最新的 Windows 版本，下載完後記得加入 PATH。&lt;/p>
&lt;h3 id="mac">Mac&lt;/h3>
&lt;p>macOS 安裝最簡單，用 Homebrew 就可以快速的安裝。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install hugo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>Linux 我一律建議從官方的 &lt;a href="https://github.com/gohugoio/hugo/releases">Github Release&lt;/a> 下載最新的版本，並自己加到 PATH。&lt;/p>
&lt;p>雖然 apt 等版本管理器好像有提供，但官方的文件上都說版本幾乎都不是最新版，所以也不建議。用下載的方式還是最方便的，或是用 Docker 也是好辦法。&lt;/p>
&lt;h2 id="開始使用-hugo">開始使用 Hugo&lt;/h2>
&lt;p>先創建一個新的 Hugo 專案，下面的 &lt;code>MyBlog&lt;/code> 可以換成自己想要的專案名稱：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo new site MyBlog
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="新增主題">新增主題&lt;/h3>
&lt;p>創建好專案後，就可以來新增主題，目前在 Hugo 上提供非常多的主題，我們可以到官方的這個&lt;a href="https://themes.gohugo.io/">網站&lt;/a>找找看，但目前些不要增加難度，用最官房提供的簡單的 ananke 主題就好，反正主題是隨時都可以換的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> MyBlog
git init
git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">theme&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="se">\&amp;#34;&lt;/span>ananke&lt;span class="se">\&amp;#34;&lt;/span> &amp;gt;&amp;gt; config.toml
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，官方是建議使用 &lt;code>git submodule&lt;/code> 的方式新增主題，這樣之後在更新主題的時候也比較方便。&lt;/p>
&lt;p>最後一行的 &lt;code>echo&lt;/code> 指令會在專案底下產生一個 &lt;code>config.toml&lt;/code> 的檔案，基本上之後所有有關 Hugo 網站的設定，都可以在這裡變更。這一行指令應該會幫你在檔案中產生如下的內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="nx">theme&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;ananke&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="新增文章">新增文章&lt;/h3>
&lt;p>在 Hugo 中新增文章的指令就是如下，可以自己修改檔名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo new posts/my-first-post.md
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>產生完成後可以看到 Hugo 幫你產生了一些 Front Matter。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-md" data-lang="md">---
title: &amp;#34;My First Post&amp;#34;
date: 2019-03-26T08:47:11+01:00
draft: true
---
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的 &lt;code>draft&lt;/code> 的指令是草稿的意思，如果沒有在上線前改成 &lt;code>false&lt;/code>，是不會在正式網站中渲染的。&lt;/p>
&lt;p>現在可以自己產生的 Markdown 檔案中加一些內容，等等就可以看看效果怎麼樣。&lt;/p>
&lt;h2 id="執行-hugo-server">執行 Hugo Server&lt;/h2>
&lt;p>要啟動 Hugo Server 也非常簡單：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo server -D
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的 &lt;code>-D&lt;/code> 參數的意思是把 &lt;code>draft&lt;/code> 的草稿文件也渲染，如果想要看看上線的網頁會長怎樣，可以不要加上這個參數。&lt;/p>
&lt;h2 id="產生靜態網頁">產生靜態網頁&lt;/h2>
&lt;p>這個最簡單了，連猴子都會，&lt;code>-D&lt;/code> 的參數一樣是渲染草稿文件，可視需求加上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>到這裡就介紹完成所有 Hugo 基本的使用方法了，之後我會介紹如何使用 Github Action，讓我們每次只需要 Push 專案，Github 就會幫我們重新建置並部署網站。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/quick-start/">Hugo Quick Start&lt;/a>&lt;/li>
&lt;/ul></description><category domain="https://tonypepe.com/categories/hugo/">Hugo</category><category domain="https://tonypepe.com/tags/hugo/">hugo</category><category domain="https://tonypepe.com/tags/blog/">blog</category><category domain="https://tonypepe.com/tags/mac/">mac</category><category domain="https://tonypepe.com/tags/linux/">linux</category><category domain="https://tonypepe.com/tags/windows/">windows</category></item><item><title>用 Teminal 連接到 Amazon Lightsail</title><link>https://tonypepe.com/posts/linux/amazon-ssh/</link><guid isPermaLink="true">https://tonypepe.com/posts/linux/amazon-ssh/</guid><pubDate>Sun, 06 Jun 2021 17:16:35 +0800</pubDate><author>tonybear55665566@gmail.com (TonyPepe)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>AWS 個體，要使用本地的 Terminal 連線都要使用他專門產生的 key 來確保安全性，但需要比較複雜的設定。&lt;/p>
&lt;h2 id="下載-key">下載 Key&lt;/h2>
&lt;p>先到這個頁面按下帳戶頁面&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/TonyPepeBear/ImageBed/main/20210606172007.png" alt="">&lt;/p>
&lt;p>再到這個頁面創建或下載新的 key&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/TonyPepeBear/ImageBed/main/20210606172046.png" alt="">&lt;/p>
&lt;p>下載的 key 應該會是長 &lt;code>.pem&lt;/code> 的副檔名，我們下面假設他叫 &lt;code>aws.pem&lt;/code>。&lt;/p>
&lt;h1 id="用-key-連接到-aws-個體">用 Key 連接到 AWS 個體&lt;/h1>
&lt;p>ssh 為了避免 key 會被其他使用者看到，如果 key 不是私有權限會不讓你連線，所以我們先 &lt;code>chmod&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">chmod &lt;span class="m">600&lt;/span> aws.pem
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>改完權限之後應該就可以直接用 &lt;code>ssh -i&lt;/code> 連上個體：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ssh -i aws.pem ubuntu@123.45.6.7.89
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是每次都要這樣連線也是蠻麻煩的，我們可以把她 add 到我們的 &lt;code>.ssh&lt;/code> 裡面，新增完後就可以直接連線，也不用輸入密碼。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ssh-add aws.pem
ssh ubuntu@123.45.6.7.89
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://tonypepe.com/categories/linux/">Linux</category><category domain="https://tonypepe.com/tags/linux/">linux</category><category domain="https://tonypepe.com/tags/ssh/">ssh</category></item><item><title>Ubuntu 開機黑屏</title><link>https://tonypepe.com/posts/ubuntu/ubuntu-black-screen/</link><guid isPermaLink="true">https://tonypepe.com/posts/ubuntu/ubuntu-black-screen/</guid><pubDate>Sun, 06 Jun 2021 01:17:17 +0800</pubDate><author>tonybear55665566@gmail.com (TonyPepe)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>我目前的工作環境都是用 Ubuntu &lt;del>(被 Windows 氣到)&lt;/del>，前幾天我重新安裝 Ubuntu 的時候，一直安裝失敗，重新安裝四、五次後都沒有畫面，最後才發現是顯卡驅動問題。&lt;/p>
&lt;h2 id="解決問題">解決問題&lt;/h2>
&lt;p>在開機引導時會看到這個畫面，立馬按下鍵盤上的 &lt;code>c&lt;/code> 鍵。&lt;/p>
&lt;p>&lt;img src="https://i.stack.imgur.com/8RYuZ.png" alt="">&lt;/p>
&lt;p>按下 c 後，會以下畫面，找到 &lt;code>quite splash&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://i.stack.imgur.com/0Cfhc.png" alt="">&lt;/p>
&lt;p>把 &lt;code>quite splash&lt;/code> 改成 &lt;code>nomodeset&lt;/code>，不要懷疑，把兩個字刪掉，改成一個字，改錯也沒關係，下次重開就會復原。&lt;/p>
&lt;p>改完後，按下 &lt;code>f10&lt;/code> 應該就可以順利進入系統，只是是在沒有顯卡驅動的狀態，畫面可能非常不流暢，所以我們現在來安裝顯卡驅動。&lt;/p>
&lt;h2 id="顯卡驅動">顯卡驅動&lt;/h2>
&lt;p>開啟 Terminal，輸入下面的指令，可以自動檢查顯卡的驅動&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo ubuntu-drivers devices
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>應該可以看到其中一項後面有 recommended，基本上安裝那個版本就沒有問題。下面我們直接用自動安裝的方式安裝推薦的驅動。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo ubuntu-drivers autoinstall
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你懶的關心 &lt;code>autoinstall&lt;/code> 會幫你安裝哪個版本，基本上直接執行上面的指令就可以解決問題了。&lt;/p>
&lt;p>安裝完成後重開機，如果沒有遇到其他問題，這樣應該就可以順利進入系統了。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://askubuntu.com/questions/162075/my-computer-boots-to-a-black-screen-what-options-do-i-have-to-fix-it">My computer boots to a black screen, what options do I have to fix it?&lt;/a>&lt;/li>
&lt;/ul></description><category domain="https://tonypepe.com/categories/ubuntu/">Ubuntu</category><category domain="https://tonypepe.com/tags/ubuntu/">ubuntu</category></item><item><title>自架 Play With Docker</title><link>https://tonypepe.com/posts/docker/pwd-hosting/</link><guid isPermaLink="true">https://tonypepe.com/posts/docker/pwd-hosting/</guid><pubDate>Sat, 05 Jun 2021 16:08:29 +0000</pubDate><author>tonybear55665566@gmail.com (TonyPepe)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>學過 Docker 的人都應該有用過 Docker Playground 來學習或是測試過軟體，不想在本機跑 Docker 可以先用 Docker Playground 試試看軟體可不可以跑。&lt;/p>
&lt;p>官方已經有架設 &lt;a href="https://labs.play-with-docker.com/">Docker Playground&lt;/a>，可以讓大家方便使用，但我使用的時後常發現他會 Lag，也不知道是 Docker Server 的問題，還是臺灣網路的問題。剛好最近想要教社團 Docker，這樣我架好一個，大家就不需要準備環境，直接就可以開始學了。&lt;/p>
&lt;p>本專案的 &lt;a href="https://github.com/play-with-docker/play-with-docker">GitHub&lt;/a>&lt;/p>
&lt;h2 id="準備環境">準備環境&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Docker &lt;code>18.06.0+&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go 最新版&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>以上的安裝兩個在這邊都不贅述，請自行參閱官方文檔。&lt;/p>
&lt;h2 id="開始部署">開始部署&lt;/h2>
&lt;h3 id="第一步下載專案">第一步：下載專案&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/play-with-docker/play-with-docker
&lt;span class="nb">cd&lt;/span> play-with-docker
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第二步確認驅動">第二步：確認驅動&lt;/h3>
&lt;p>其實我不是很確定這一步驟是要幹嘛，但是官方文檔有寫到，但是我在 Mac 上無法執行此命令，也可以順利部署。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo modprobe xt_ipvs
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第三步docker-swarm">第三步：Docker swarm&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker swarm init
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第四步下載-image">第四步：下載 image&lt;/h3>
&lt;p>這個 Image 是之後在 PWD 中創建容器時要用到的 Image。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker pull franela/dind
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第五步go-mod">第五步：go mod&lt;/h3>
&lt;p>這步也是非必要的，我也不懂 Golang 所以也不確定是要幹嘛。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">go mod vendor
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="最後啟動">最後：啟動&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker-compose up
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>若沒有其他問題，理論上現在連接到 &lt;code>http://localhost:80&lt;/code> 就可以看到 PWD 正在執行，也可以開始創建容器使用。&lt;/p>
&lt;h2 id="localhost-or-404">localhost or 404&lt;/h2>
&lt;p>上一段的最後寫到可以連接到 localhost，但如果你試著用 localhost 以外的方式連接，就會出現問題，不管是 &lt;code>127.0.0.1&lt;/code> 或是用網址 &lt;code>pwd.example.com&lt;/code> 之類的都沒有辦法連接到 PWD，會不斷地出現 404，就是只有 localhost 可以。官方的文件就寫到這裡，也沒寫解法，以下是我自己發現的解決方法。&lt;/p>
&lt;p>基本上這個問題是 DNS 解析發生的問題，PWD 一次只能解析一種網址，預設是 &lt;code>localhost&lt;/code>，我們可以去他的設定檔中變更他。&lt;/p>
&lt;p>設定檔案在 &lt;code>play-with-docker/config/config.go&lt;/code> 之中，其中會有一行長下面的樣子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StringVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">PlaygroundDomain&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;playground-domain&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Domain to use for the playground&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到 PWD 這裡可以設定要解析的網址就是 &lt;code>localhost&lt;/code>，所以只要將此變更為 &lt;code>pwd.example.com&lt;/code>，就可以用這個網址連上 PWD。&lt;/p>
&lt;h3 id="連上容器內的-port">連上容器內的 Port&lt;/h3>
&lt;p>就算做完上面的設定，也順利了啟動 Docker 容器，但最後才發現想要連上特定的 Port 還是會失敗，因為他是用子網域的方式去連線 &lt;code>http://ip&amp;lt;hyphen-ip&amp;gt;-&amp;lt;session_jd&amp;gt;-&amp;lt;port&amp;gt;.direct.pwd.example.com&lt;/code>，所以又會遇到無法解析 DNS 的情況，我的解法是在 DNS 的設定中把 &lt;code>pwd.example.com&lt;/code> 和 &lt;code>*.pwd.example.com&lt;/code> 都加入 A Record，才順利連上。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/play-with-docker/play-with-docker">Play With Docker&lt;/a>&lt;/li>
&lt;/ul></description><category domain="https://tonypepe.com/categories/docker/">Docker</category><category domain="https://tonypepe.com/tags/docker/">docker</category><category domain="https://tonypepe.com/tags/play-with-docker/">play-with-docker</category></item><item><title>Hello World</title><link>https://tonypepe.com/posts/ohters/hello-world/</link><guid isPermaLink="true">https://tonypepe.com/posts/ohters/hello-world/</guid><pubDate>Sat, 05 Jun 2021 11:15:18 +0000</pubDate><author>tonybear55665566@gmail.com (TonyPepe)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>This is my first post in hugo.&lt;/p>
&lt;h2 id="kotlin">Kotlin&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hi&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$this&lt;/span>&lt;span class="s2"> HI&amp;#34;&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">var&lt;/span> &lt;span class="py">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">p&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;13 13&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>