{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/flutter/dart-function lambda diff","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"d8fb3977-7c7f-57ad-83c2-8dc1d7ba1927","html":"<p>Flutter 因為大量使用依賴注入，所以常常會需要傳入 Function。傳入 Function 時，常常會看到兩種寫法，一下是 <code class=\"language-text\">() {}</code> 寫法，另一個是 <code class=\"language-text\">() =></code> 寫法。我剛開始寫的時候被搞得頭昏腦脹，查了一下才發現這兩個本身沒什麼不同。</p>\n<!--more-->\n<h2>不同在哪</h2>\n<p>下面我用在寫 Flutter 中常見的創建一個有 10 個 Text 的 List 舉例。</p>\n<p>創建一個有 10 項元素的 List：</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面就是輸出一個帶有 0-9 的 List，那現在假設我會需要再創建 Text 前，根據 index 來做一些改變，下面就做最簡單的平方。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do some work</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">*</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>觀察上面兩個例子，不難發現兩個的差別，第一個寫法 <code class=\"language-text\">() =></code> 後面直接接上一個表達式(Expression)，當作回傳值。而 <code class=\"language-text\">() {}</code> 則是在大括號中寫一個完整的 Function，所以要寫一個 return。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/51868395/flutter-dart-difference-between-and\">Flutter/Dart - Difference between () {} and () => {}</a></li>\n</ul>","rawMarkdownBody":"\nFlutter 因為大量使用依賴注入，所以常常會需要傳入 Function。傳入 Function 時，常常會看到兩種寫法，一下是 `() {}` 寫法，另一個是 `() =>` 寫法。我剛開始寫的時候被搞得頭昏腦脹，查了一下才發現這兩個本身沒什麼不同。\n\n<!--more-->\n\n## 不同在哪\n\n下面我用在寫 Flutter 中常見的創建一個有 10 個 Text 的 List 舉例。\n\n創建一個有 10 項元素的 List：\n\n```dart\nList<Text> list = List.generate(10, (index) => Text(index.toString()));\n```\n\n上面就是輸出一個帶有 0-9 的 List，那現在假設我會需要再創建 Text 前，根據 index 來做一些改變，下面就做最簡單的平方。\n\n```dart\nList<Text> list = List.generate(10, (index) {\n    // do some work\n    var text = (index * index).toString();\n    return Text(text);\n});\n```\n\n觀察上面兩個例子，不難發現兩個的差別，第一個寫法 `() =>` 後面直接接上一個表達式(Expression)，當作回傳值。而 `() {}` 則是在大括號中寫一個完整的 Function，所以要寫一個 return。\n\n## Reference\n\n- [Flutter/Dart - Difference between () {} and () => {}](https://stackoverflow.com/questions/51868395/flutter-dart-difference-between-and)\n","excerpt":"Flutter 因為大量使用依賴注入，所以常常會需要傳入 Function。傳入 Function 時，常常會看到兩種寫法，一下是  寫法，另一個是  寫法。我剛開始寫的時候被搞得頭昏腦脹，查了一下才發現這兩個本身沒什麼不同。 不同在哪 下面我用在寫 Flutter 中常見的創建一個有 10 個 Text 的 List 舉例。 創建一個有 10 項元素的 List： 上面就是輸出一個帶有 0-9…","frontmatter":{"title":"Flutter/Dart (){} 和 () => 的差別","date":"2021-11-04T05:52:44.000Z","draft":false,"tags":["dart","flutter","function"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/f8a3eaa5-e9c2-455f-d301-43fc77fee200/large","description":"Flutter 因為大量使用依賴注入，所以常常會需要傳入 Function。傳入 Function 時，常常會看到兩種寫法，一下是 () {} 寫法，另一個是 () => 寫法。我剛開始寫的時候被搞得頭昏腦脹，查了一下才發現這兩個本身沒什麼不同。"}}}]}},"pageContext":{"id":"d8fb3977-7c7f-57ad-83c2-8dc1d7ba1927"}},"staticQueryHashes":[]}