{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/flutter/flutter-isolate","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"59f97761-859b-55ad-aabc-9c01b316ded3","html":"<p>本文翻譯自 Medium。<a href=\"https://medium.flutterdevs.com/multithreading-in-flutter-aa07e2ae2971\">原文網址</a>，請在閱讀前先去幫原作者拍拍手。另外，我也有在原文中加入一些我自己的理解。</p>\n<p>Flutter 是由 Google 開發的跨平台框架，因其出色的用戶界面能力和動畫而引起了廣泛關注。如果我們遇到畫面卡住、動畫未按預期工作以及螢幕跳躍等問題，它的威力就會受到阻礙，進而導致整個用戶體驗變得很糟糕。通常，觸發這種現象的原因可能是同步訪問多個 API 請求、圖像處理、動畫或任何其他耗時操作。</p>\n<p>很多開發人員希望在他們的應用程式中解決此問題，以便讓程式不會出現這種情況。可以通過創建多個隔離線程 <code class=\"language-text\">Isolate</code>，這些線程具有自己的事件循環並與運行 Flutter 的主執行緒 (Main Thread) 不共享記憶體來完成此操作。此過程稱為多執行緒處理。</p>\n<!--more-->\n<p>Dart 是一種單線程語言：所有的 Dart 程式碼都在一個 <code class=\"language-text\">Isolate</code> 中運行，這讓它們非常重要，整個 Dart 應用程序都在一個隔離體中運行。</p>\n<blockquote>\n<p>在 Flutter 中，每一個執行緒 (Thread) 就稱做一個 Isolate。</p>\n</blockquote>\n<h2>Need for Isolate</h2>\n<p>在 Flutter 中，即使是使用 async/await 的情況下，所有程式碼都在 Main Isolate 中執行 (雖然看起來是非同步的執行，但他們只是在 Main Isolate 中輪流執行，所以 async/await 數量一多還是會造成卡頓)，因此多線程是必不可少的。</p>\n<p><code class=\"language-text\">Isolate</code> 非常有用，可以運行需要很長時間才能完成而不會阻塞主線程的程式碼，這對於提供流暢和反應靈敏的用戶體驗非常重要。多線程允許程式的兩部分或更多部分並行執行，利用 CPU 的多核心。同時也可以讓程式同時執行多項任務，以減少對用戶輸入等事件做出反應時間。</p>\n<p>在深入探討 <code class=\"language-text\">Isolate</code> 的類型之前，有幾件事情需要記住：</p>\n<ul>\n<li>線程之間無法相互通訊：創建的隔離體之間沒有通訊，包括在 Flutter Isolate 中的自定的對象。</li>\n<li>通訊是透過 <code class=\"language-text\">port</code> 完成的：線程之間的任何通訊都是通過 port 進行的。</li>\n</ul>\n<h2>Types Of Isolate In Flutter</h2>\n<p>在 Flutter 中有兩種方式可以創建 Isolate：</p>\n<ul>\n<li><code class=\"language-text\">Compute</code> function</li>\n<li><code class=\"language-text\">Spawn</code> function</li>\n</ul>\n<h3>Spawn Function</h3>\n<p>使用 <code class=\"language-text\">spawn</code> 創建 Isolate 很簡單，它需要兩個參數：一個 Function 和 （可選的）Function 傳入值。</p>\n<p>以下是如何使用 Isolate.spawn 創建 Isolate 的範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'dart:isolate'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create the isolate</span>\n    <span class=\"token class-name\">Isolate</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>isolateFunction<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello from the main isolate!\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">isolateFunction</span><span class=\"token punctuation\">(</span>dynmic message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這會創建一個 Isolate 並在背景中執行 <code class=\"language-text\">isolateFunction</code> 中的程式碼。Main Isolate 將字串 \"Hello from the main isolate!\"，傳給新的 Isolate，這個字串會被新的 Isolate 接收到並且印出來。</p>\n<p>請注意，Isolate 是被不同的 Thread 執行的，他們並不共享記憶體，這意味著你需要用 Isolate 之間的通訊技術來在不同的 Isolate 中傳遞數據（就像面的範例是在創建 Isolate 時傳入，或是晚點會介紹的 Port）。</p>\n<h3>Compute Function</h3>\n<p>Flutter 中。你可以使用 Compute function 在單獨的 Isolate 中執行 function，Compute function 是一個 <code class=\"language-text\">Isolate.spawn</code> 的包裝器 (wrapper)，讓 Isolate 執行計算密集型的任務更方便一點。</p>\n<p>下面是一個在 Flutter 中使用 Comput function 創建 Isolate 的範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'dart:async'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">></span></span> computeFunction <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    int result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>computeIntensiveFunction<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nint <span class=\"token function\">computeInstensiveFunction</span><span class=\"token punctuation\">(</span>int value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 執行一些計算密集型任務</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在這個例子中，使用 <code class=\"language-text\">compute()</code> 來創建一個獨立的 Isolate 來執行 <code class=\"language-text\">computeInstensiveFunction</code> 中的程式碼。Compute function 會回傳一個 <code class=\"language-text\">Future</code> ，會在 Function 執行完成時，回傳 Function 的回傳值。在這個例子中是會回傳 100 * 100 = 10000，所以 result 的直是 10000。</p>\n<p>請注意，傳遞給 Comput function 的 Function，必須是頂層函數 (top-level function)，或是 static method，並且傳入值和回傳值的型態都是 dynmic。</p>\n<h2>Isolate 們如何相互溝通</h2>\n<p>要在 Isolate 之間通訊，可以使用 <code class=\"language-text\">SendPort</code> 和 <code class=\"language-text\">ReceivePort</code>。</p>\n<p>以下是一個範例，告訴你如何使用這兩個 classes 來將訊息從 Main Isolate 傳送到新的 Isolate：</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'dart:isolate'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 創建一個 SentPort 來將訊息傳送到新的 Isolate</span>\n    <span class=\"token keyword\">final</span> sendPort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 創建一個新的 Isolate</span>\n    <span class=\"token class-name\">Isolate</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>isolateEntryPoint<span class=\"token punctuation\">,</span> sendPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">isolateEntryPoint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendPort</span> sendPort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 創建一個 ReceivePort 來接從 Main Isolate 接收訊息</span>\n    <span class=\"token keyword\">final</span> receivePort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RceivePort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 傳送 receivePort 的 sendPort 給 Main Isolate，來讓 Main Isolate 可以傳送訊息到這個 Isolate</span>\n    sendPort<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>receivePort<span class=\"token punctuation\">.</span>sendPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 監聽來自 Main Isolate 的訊息</span>\n    receivePort<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Message received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">message</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>要從新的 Isolate 傳送訊息回到 Main Isolate，可以用從 Main Isolate 傳入的 SendPort。</p>\n<p>以下是如何使用此 SendPort 將訊息傳回 Main Isolate：</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">isolateEntryPoint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendPort</span> sendPort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 創建一個 ReceivePort 來接從 Main Isolate 接收訊息</span>\n    <span class=\"token keyword\">final</span> receivePort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RceivePort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 傳送 receivePort 的 sendPort 給 Main Isolate，來讓 Main Isolate 可以傳送訊息到這個 Isolate</span>\n    sendPort<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>receivePort<span class=\"token punctuation\">.</span>sendPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 監聽來自 Main Isolate 的訊息</span>\n    receivePort<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Message received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">message</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 傳送訊息回 Main Isolate</span>\n        sendPort<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello from the isolate!\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 Main Isolate 中，你可以使用 ReceivePort 來監聽來自新的 Isolate 的訊息：</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'dart:isolate'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 創建一個 SentPort 來將訊息傳送到新的 Isolate</span>\n    <span class=\"token keyword\">final</span> sendPort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 創建一個新的 Isolate</span>\n    <span class=\"token class-name\">Isolate</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>isolateEntryPoint<span class=\"token punctuation\">,</span> sendPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 創建一個 RecivePort 來接收來自新 Isolate 的訊息</span>\n    <span class=\"token keyword\">final</span> receivePort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReceivePort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 傳送 ReceivePort 的 SendPort 給新的 Isolate</span>\n    sendPort<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>receivePort<span class=\"token punctuation\">.</span>sendPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 監聽訊息</span>\n    receivePort<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Message received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">message</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">flutter_isolate</code> 套件提供了一種在單獨 Isolate（單獨的執行 Context）中運行 Dart 程式碼的方法。 Isolate 用於並行執行程式碼，可以用於實現負載平衡，因為它們允許你將工作負載分佈到多個線程中。</p>\n<p>以下是如何在 Flutter 中使用 <code class=\"language-text\">flutter_isolate</code> 來平衡工作量的範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_isolate/flutter_isolate.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 創建一個要負載平衡的 function</span>\n    <span class=\"token keyword\">final</span> workload <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do some work here</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 創建一個列表的 Isolate</span>\n    <span class=\"token keyword\">final</span> isolates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">IsolateRunner</span><span class=\"token punctuation\">(</span>workload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IsolateRunner</span><span class=\"token punctuation\">(</span>workload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IsolateRunner</span><span class=\"token punctuation\">(</span>workload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 執行每一個 Isolate</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> isolate <span class=\"token keyword\">in</span> isolates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        isolate<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個範例創建了一個包含三個 Isolate 的列表，每一個 Isolate 都有相同的工作，你可以呼叫每個 Isolate <code class=\"language-text\">run()</code> 來執行他們。</p>\n<p>其他使用方法可以看 <a href=\"https://pub.dev/packages/flutter_isolate\">flutter_isolate 的官方文件</a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://medium.flutterdevs.com/multithreading-in-flutter-aa07e2ae2971\">原文網址</a></li>\n<li><a href=\"https://pub.dev/packages/flutter_isolate\">flutter_isolate</a></li>\n</ul>","rawMarkdownBody":"\n本文翻譯自 Medium。[原文網址](https://medium.flutterdevs.com/multithreading-in-flutter-aa07e2ae2971)，請在閱讀前先去幫原作者拍拍手。另外，我也有在原文中加入一些我自己的理解。\n\nFlutter 是由 Google 開發的跨平台框架，因其出色的用戶界面能力和動畫而引起了廣泛關注。如果我們遇到畫面卡住、動畫未按預期工作以及螢幕跳躍等問題，它的威力就會受到阻礙，進而導致整個用戶體驗變得很糟糕。通常，觸發這種現象的原因可能是同步訪問多個 API 請求、圖像處理、動畫或任何其他耗時操作。\n\n很多開發人員希望在他們的應用程式中解決此問題，以便讓程式不會出現這種情況。可以通過創建多個隔離線程 `Isolate`，這些線程具有自己的事件循環並與運行 Flutter 的主執行緒 (Main Thread) 不共享記憶體來完成此操作。此過程稱為多執行緒處理。\n\n<!--more-->\n\nDart 是一種單線程語言：所有的 Dart 程式碼都在一個 `Isolate` 中運行，這讓它們非常重要，整個 Dart 應用程序都在一個隔離體中運行。\n\n> 在 Flutter 中，每一個執行緒 (Thread) 就稱做一個 Isolate。\n\n## Need for Isolate\n\n在 Flutter 中，即使是使用 async/await 的情況下，所有程式碼都在 Main Isolate 中執行 (雖然看起來是非同步的執行，但他們只是在 Main Isolate 中輪流執行，所以 async/await 數量一多還是會造成卡頓)，因此多線程是必不可少的。\n\n`Isolate` 非常有用，可以運行需要很長時間才能完成而不會阻塞主線程的程式碼，這對於提供流暢和反應靈敏的用戶體驗非常重要。多線程允許程式的兩部分或更多部分並行執行，利用 CPU 的多核心。同時也可以讓程式同時執行多項任務，以減少對用戶輸入等事件做出反應時間。\n\n在深入探討 `Isolate` 的類型之前，有幾件事情需要記住：\n\n- 線程之間無法相互通訊：創建的隔離體之間沒有通訊，包括在 Flutter Isolate 中的自定的對象。\n- 通訊是透過 `port` 完成的：線程之間的任何通訊都是通過 port 進行的。\n\n## Types Of Isolate In Flutter\n\n在 Flutter 中有兩種方式可以創建 Isolate：\n\n- `Compute` function\n- `Spawn` function\n\n### Spawn Function\n\n使用 `spawn` 創建 Isolate 很簡單，它需要兩個參數：一個 Function 和 （可選的）Function 傳入值。\n\n以下是如何使用 Isolate.spawn 創建 Isolate 的範例：\n\n```dart\nimport 'dart:isolate';\n\nvoid main() {\n    // create the isolate\n    Isolate.spawn(isolateFunction, \"Hello from the main isolate!\");\n}\n\nvoid isolateFunction(dynmic message) {\n    print(message);\n}\n```\n\n這會創建一個 Isolate 並在背景中執行 `isolateFunction` 中的程式碼。Main Isolate 將字串 \"Hello from the main isolate!\"，傳給新的 Isolate，這個字串會被新的 Isolate 接收到並且印出來。\n\n請注意，Isolate 是被不同的 Thread 執行的，他們並不共享記憶體，這意味著你需要用 Isolate 之間的通訊技術來在不同的 Isolate 中傳遞數據（就像面的範例是在創建 Isolate 時傳入，或是晚點會介紹的 Port）。\n\n### Compute Function\n\nFlutter 中。你可以使用 Compute function 在單獨的 Isolate 中執行 function，Compute function 是一個 `Isolate.spawn` 的包裝器 (wrapper)，讓 Isolate 執行計算密集型的任務更方便一點。\n\n下面是一個在 Flutter 中使用 Comput function 創建 Isolate 的範例：\n\n```dart\nimport 'dart:async';\n\nFuture<void> computeFunction async {\n    int result = await compute(computeIntensiveFunction, 100);\n    print(result);\n}\n\nint computeInstensiveFunction(int value) {\n    // 執行一些計算密集型任務\n    return value * value;\n}\n```\n\n在這個例子中，使用 `compute()` 來創建一個獨立的 Isolate 來執行 `computeInstensiveFunction` 中的程式碼。Compute function 會回傳一個 `Future` ，會在 Function 執行完成時，回傳 Function 的回傳值。在這個例子中是會回傳 100 \\* 100 = 10000，所以 result 的直是 10000。\n\n請注意，傳遞給 Comput function 的 Function，必須是頂層函數 (top-level function)，或是 static method，並且傳入值和回傳值的型態都是 dynmic。\n\n## Isolate 們如何相互溝通\n\n要在 Isolate 之間通訊，可以使用 `SendPort` 和 `ReceivePort`。\n\n以下是一個範例，告訴你如何使用這兩個 classes 來將訊息從 Main Isolate 傳送到新的 Isolate：\n\n```dart\nimport 'dart:isolate';\n\nvoid main() {\n    // 創建一個 SentPort 來將訊息傳送到新的 Isolate\n    final sendPort = new SendPort();\n    // 創建一個新的 Isolate\n    Isolate.spawn(isolateEntryPoint, sendPort);\n}\n\nvoid isolateEntryPoint(SendPort sendPort) {\n    // 創建一個 ReceivePort 來接從 Main Isolate 接收訊息\n    final receivePort = new RceivePort();\n\n    // 傳送 receivePort 的 sendPort 給 Main Isolate，來讓 Main Isolate 可以傳送訊息到這個 Isolate\n    sendPort.send(receivePort.sendPort);\n\n    // 監聽來自 Main Isolate 的訊息\n    receivePort.listen((message) {\n        print('Message received: $message');\n    });\n}\n```\n\n要從新的 Isolate 傳送訊息回到 Main Isolate，可以用從 Main Isolate 傳入的 SendPort。\n\n以下是如何使用此 SendPort 將訊息傳回 Main Isolate：\n\n```dart\nvoid isolateEntryPoint(SendPort sendPort) {\n    // 創建一個 ReceivePort 來接從 Main Isolate 接收訊息\n    final receivePort = new RceivePort();\n\n    // 傳送 receivePort 的 sendPort 給 Main Isolate，來讓 Main Isolate 可以傳送訊息到這個 Isolate\n    sendPort.send(receivePort.sendPort);\n\n    // 監聽來自 Main Isolate 的訊息\n    receivePort.listen((message) {\n        print('Message received: $message');\n\n        // 傳送訊息回 Main Isolate\n        sendPort.send(\"Hello from the isolate!\");\n    });\n}\n```\n\n在 Main Isolate 中，你可以使用 ReceivePort 來監聽來自新的 Isolate 的訊息：\n\n```dart\nimport 'dart:isolate';\n\nvoid main() {\n    // 創建一個 SentPort 來將訊息傳送到新的 Isolate\n    final sendPort = new SendPort();\n\n    // 創建一個新的 Isolate\n    Isolate.spawn(isolateEntryPoint, sendPort);\n\n    // 創建一個 RecivePort 來接收來自新 Isolate 的訊息\n    final receivePort = new ReceivePort();\n\n    // 傳送 ReceivePort 的 SendPort 給新的 Isolate\n    sendPort.send(receivePort.sendPort);\n\n    // 監聽訊息\n    receivePort.listen((message) {\n        print('Message received: $message');\n    });\n}\n```\n\n`flutter_isolate` 套件提供了一種在單獨 Isolate（單獨的執行 Context）中運行 Dart 程式碼的方法。 Isolate 用於並行執行程式碼，可以用於實現負載平衡，因為它們允許你將工作負載分佈到多個線程中。\n\n以下是如何在 Flutter 中使用 `flutter_isolate` 來平衡工作量的範例：\n\n```dart\nimport 'package:flutter_isolate/flutter_isolate.dart';\n\nvoid main() {\n    // 創建一個要負載平衡的 function\n    final workload = () {\n        // Do some work here\n    };\n\n    // 創建一個列表的 Isolate\n    final isolates = [\n        IsolateRunner(workload),\n        IsolateRunner(workload),\n        IsolateRunner(workload),\n    ];\n\n    // 執行每一個 Isolate\n    for (final isolate in isolates) {\n        isolate.run();\n    }\n}\n```\n\n這個範例創建了一個包含三個 Isolate 的列表，每一個 Isolate 都有相同的工作，你可以呼叫每個 Isolate `run()` 來執行他們。\n\n其他使用方法可以看 [flutter_isolate 的官方文件](https://pub.dev/packages/flutter_isolate)\n\n## Reference\n\n- [原文網址](https://medium.flutterdevs.com/multithreading-in-flutter-aa07e2ae2971)\n- [flutter_isolate](https://pub.dev/packages/flutter_isolate)\n","excerpt":"本文翻譯自 Medium。原文網址，請在閱讀前先去幫原作者拍拍手。另外，我也有在原文中加入一些我自己的理解。 Flutter 是由 Google 開發的跨平台框架，因其出色的用戶界面能力和動畫而引起了廣泛關注。如果我們遇到畫面卡住、動畫未按預期工作以及螢幕跳躍等問題，它的威力就會受到阻礙，進而導致整個用戶體驗變得很糟糕。通常，觸發這種現象的原因可能是同步訪問多個 API 請求、圖像處理、動畫或任…","frontmatter":{"title":"Flutter Isolate 多執行緒","date":"2023-03-15T01:53:01.621Z","draft":false,"tags":["flutter","dart","isolate","multithread"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/2aa71d52-6fd6-4086-80fc-ba6692219700/public","description":null}}}]}},"pageContext":{"id":"59f97761-859b-55ad-aabc-9c01b316ded3"}},"staticQueryHashes":[]}