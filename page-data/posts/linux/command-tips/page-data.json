{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/linux/command-tips","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"309a0330-b7a2-562c-974e-0b4e06b99aa7","html":"<p>記錄一些我怕忘的 Command Line 技巧，當作字典用。</p>\n<!--more-->\n<h2>清螢幕</h2>\n<p><code class=\"language-text\">clear</code> 或是 <code class=\"language-text\">ctrl + L</code></p>\n<h2>家目錄</h2>\n<p><code class=\"language-text\">~</code> 波浪符就是代表家目錄</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/etc$ <span class=\"token builtin class-name\">cd</span> ~\n\n~$</code></pre></div>\n<h2>預設文字編輯器</h2>\n<p>有時預設的文字編輯器不是 vim，而是 <code class=\"language-text\">nano</code> 或是 <code class=\"language-text\">emacs</code>，在打 git 指令時，會進錯編輯器。只要在 <code class=\"language-text\">.bashrc</code> 中加入以下兩行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">EDITOR</span><span class=\"token operator\">=</span>vim\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">VISUAL</span><span class=\"token operator\">=</span>vim</code></pre></div>\n<h2>變更 rc file 後馬上生效</h2>\n<p><code class=\"language-text\">source ~/.bashrc</code></p>\n<h2>返回上一個路徑</h2>\n<p><code class=\"language-text\">cd -</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token builtin class-name\">cd</span> /etc\n\n/etc$ <span class=\"token builtin class-name\">cd</span> /var\n\n/var$ <span class=\"token builtin class-name\">cd</span> -\n\n/etc$ <span class=\"token builtin class-name\">cd</span> ~\n\n~$</code></pre></div>\n<h2>把路徑放進 Stack</h2>\n<p><code class=\"language-text\">pushd</code> 把現在的路徑推進 Stack，並 cd 到後面的參數</p>\n<p><code class=\"language-text\">popd</code> 拿出來</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/etc$ <span class=\"token function\">pushd</span> /var\n/var /etc\n\n/var$ <span class=\"token function\">pushd</span> /home\n/home /var /etc\n\n/home$ <span class=\"token builtin class-name\">cd</span> ~\n\n~$ <span class=\"token builtin class-name\">cd</span> /var/\n\n~$ <span class=\"token builtin class-name\">cd</span> /var/lib/\n\n/var/lib$ <span class=\"token function\">popd</span>\n/var /etc\n\n/var$ <span class=\"token function\">popd</span>\n/etc\n\n/etc$</code></pre></div>\n<h2>把工作放到背景</h2>\n<p><code class=\"language-text\">ctrl + z</code></p>\n<p>注意，這會暫停整個 process，並不是放到背景執行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">vim</span> /proc/cpuinfo\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 <span class=\"token function\">vim</span> /proc/cpuinfo\n\n~$</code></pre></div>\n<p><code class=\"language-text\">fg</code> (foreground) 把放到背景的 process 取回前景繼續執行</p>\n<p>Shell 結束時，所有被暫停的 process 也會一起被殺掉</p>\n<h2>重複上一個 Command</h2>\n<p><code class=\"language-text\">!!</code> 就是代表上一個 Command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token builtin class-name\">echo</span> HI\nHI\n\n~$ <span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n<span class=\"token builtin class-name\">echo</span> HI\nHI\n\n~$</code></pre></div>\n<p>這是可以組合技的：忘記打 sudo 就 <code class=\"language-text\">sudo !!</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">apt</span> update\nReading package lists<span class=\"token punctuation\">..</span>. Done\nE: Could not <span class=\"token function\">open</span> lock <span class=\"token function\">file</span> /var/lib/apt/lists/lock - <span class=\"token function\">open</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13</span>: Permission denied<span class=\"token punctuation\">)</span>\nE: Unable to lock directory /var/lib/apt/lists/\n\n~$ <span class=\"token function\">sudo</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\nHit:1 http://archive.ubuntu.com/ubuntu jammy InRelease\nGet:2 http://security.ubuntu.com/ubuntu jammy-security InRelease <span class=\"token punctuation\">[</span><span class=\"token number\">110</span> kB<span class=\"token punctuation\">]</span>\nGet:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease <span class=\"token punctuation\">[</span><span class=\"token number\">109</span> kB<span class=\"token punctuation\">]</span>\nGet:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease <span class=\"token punctuation\">[</span><span class=\"token number\">99.8</span> kB<span class=\"token punctuation\">]</span>\nGet:5 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages <span class=\"token punctuation\">[</span><span class=\"token number\">230</span> kB<span class=\"token punctuation\">]</span>\nGet:6 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages <span class=\"token punctuation\">[</span><span class=\"token number\">143</span> kB<span class=\"token punctuation\">]</span>\nFetched <span class=\"token number\">693</span> kB <span class=\"token keyword\">in</span> 2s <span class=\"token punctuation\">(</span><span class=\"token number\">328</span> kB/s<span class=\"token punctuation\">)</span>\nReading package lists<span class=\"token punctuation\">..</span>. Done\nBuilding dependency tree<span class=\"token punctuation\">..</span>. Done\nReading state information<span class=\"token punctuation\">..</span>. Done\n<span class=\"token number\">1</span> package can be upgraded. Run <span class=\"token string\">'apt list --upgradable'</span> to see it.\n~$</code></pre></div>\n<h2>sudo 不輸入密碼</h2>\n<p>只要讓下面那一行出現在 <code class=\"language-text\">/etc/sudoers</code> 中就可以：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">%sudo ALL=(ALL) NOPASSWD:ALL</code></pre></div>\n<p>或是直接輸入 (with root)：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> ~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'%sudo ALL=(ALL) NOPASSWD:ALL'</span> <span class=\"token operator\">>></span> /etc/sudoers</code></pre></div>\n<h2>搜尋打過的指令</h2>\n<p><code class=\"language-text\">ctrl + r</code>，然後打上部分記得的指令，就會自動補完</p>\n<h2>輸出導進 less</h2>\n<p>有時指令輸出很長，需要翻頁顯示時，可以用 <code class=\"language-text\">|</code> 導入 <code class=\"language-text\">less</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">cat</span> /proc/cpuinfo <span class=\"token operator\">|</span> <span class=\"token function\">less</span></code></pre></div>\n<h2>清掉一整行</h2>\n<p><code class=\"language-text\">ctrl + u</code> 把還沒 enter 的指令清掉</p>\n<h2>光標到最前或最後</h2>\n<p><code class=\"language-text\">ctrl + a</code> 移動光標到最前</p>\n<p><code class=\"language-text\">ctrl + e</code> 移動光標到最後</p>\n<h2>連續執行指令</h2>\n<p><code class=\"language-text\">;</code> 不管前面有沒有成功，都執行後面的命令</p>\n<p><code class=\"language-text\">&amp;&amp;</code> 要前面得執行成功，才執行後面的命令</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">ls</span> / <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ <span class=\"token function\">ls</span> / <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ <span class=\"token function\">ls</span> /no_such_dir <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> hi\nls: cannot access <span class=\"token string\">'/no_such_dir'</span><span class=\"token builtin class-name\">:</span> No such <span class=\"token function\">file</span> or directory\nhi\n\n~$ <span class=\"token function\">ls</span> /no_such_dir <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> hi\nls: cannot access <span class=\"token string\">'/no_such_dir'</span><span class=\"token builtin class-name\">:</span> No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://youtube.com/watch?v=AVXYq8aL47Q\">18 Commands That Will Change The Way You Use Linux Forever</a></li>\n</ul>","rawMarkdownBody":"\n記錄一些我怕忘的 Command Line 技巧，當作字典用。\n\n<!--more-->\n\n## 清螢幕\n\n`clear` 或是 `ctrl + L`\n\n## 家目錄\n\n`~` 波浪符就是代表家目錄\n\n```bash\n/etc$ cd ~\n\n~$\n```\n\n## 預設文字編輯器\n\n有時預設的文字編輯器不是 vim，而是 `nano` 或是 `emacs`，在打 git 指令時，會進錯編輯器。只要在 `.bashrc` 中加入以下兩行：\n\n```bash\nexport EDITOR=vim\nexport VISUAL=vim\n```\n\n## 變更 rc file 後馬上生效\n\n`source ~/.bashrc`\n\n## 返回上一個路徑\n\n`cd -`\n\n```bash\n~$ cd /etc\n\n/etc$ cd /var\n\n/var$ cd -\n\n/etc$ cd ~\n\n~$\n```\n\n## 把路徑放進 Stack\n\n`pushd` 把現在的路徑推進 Stack，並 cd 到後面的參數\n\n`popd` 拿出來\n\n```bash\n/etc$ pushd /var\n/var /etc\n\n/var$ pushd /home\n/home /var /etc\n\n/home$ cd ~\n\n~$ cd /var/\n\n~$ cd /var/lib/\n\n/var/lib$ popd\n/var /etc\n\n/var$ popd\n/etc\n\n/etc$\n```\n\n## 把工作放到背景\n\n`ctrl + z`\n\n注意，這會暫停整個 process，並不是放到背景執行\n\n```bash\n~$ vim /proc/cpuinfo\n\n[1]+  Stopped                 vim /proc/cpuinfo\n\n~$\n```\n\n`fg` (foreground) 把放到背景的 process 取回前景繼續執行\n\nShell 結束時，所有被暫停的 process 也會一起被殺掉\n\n## 重複上一個 Command\n\n`!!` 就是代表上一個 Command\n\n```bash\n~$ echo HI\nHI\n\n~$ !!\necho HI\nHI\n\n~$\n```\n\n這是可以組合技的：忘記打 sudo 就 `sudo !!`\n\n```bash\n~$ apt update\nReading package lists... Done\nE: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)\nE: Unable to lock directory /var/lib/apt/lists/\n\n~$ sudo !!\nsudo apt update\nHit:1 http://archive.ubuntu.com/ubuntu jammy InRelease\nGet:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]\nGet:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [109 kB]\nGet:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [99.8 kB]\nGet:5 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [230 kB]\nGet:6 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [143 kB]\nFetched 693 kB in 2s (328 kB/s)\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\n1 package can be upgraded. Run 'apt list --upgradable' to see it.\n~$\n```\n\n## sudo 不輸入密碼\n\n只要讓下面那一行出現在 `/etc/sudoers` 中就可以：\n\n```text\n%sudo ALL=(ALL) NOPASSWD:ALL\n```\n\n或是直接輸入 (with root)：\n\n```bash\n(root) ~$ echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n```\n\n## 搜尋打過的指令\n\n`ctrl + r`，然後打上部分記得的指令，就會自動補完\n\n## 輸出導進 less\n\n有時指令輸出很長，需要翻頁顯示時，可以用 `|` 導入 `less`\n\n```bash\n~$ cat /proc/cpuinfo | less\n```\n\n## 清掉一整行\n\n`ctrl + u` 把還沒 enter 的指令清掉\n\n## 光標到最前或最後\n\n`ctrl + a` 移動光標到最前\n\n`ctrl + e` 移動光標到最後\n\n## 連續執行指令\n\n`;` 不管前面有沒有成功，都執行後面的命令\n\n`&&` 要前面得執行成功，才執行後面的命令\n\n```bash\n~$ ls / ; echo hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ ls / && echo hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ ls /no_such_dir ; echo hi\nls: cannot access '/no_such_dir': No such file or directory\nhi\n\n~$ ls /no_such_dir && echo hi\nls: cannot access '/no_such_dir': No such file or directory\n```\n\n## Reference\n\n- [18 Commands That Will Change The Way You Use Linux Forever](https://youtube.com/watch?v=AVXYq8aL47Q)\n","excerpt":"記錄一些我怕忘的 Command Line 技巧，當作字典用。 清螢幕  或是  家目錄  波浪符就是代表家目錄 預設文字編輯器 有時預設的文字編輯器不是 vim，而是  或是 ，在打 git 指令時，會進錯編輯器。只要在  中加入以下兩行： 變更 rc file 後馬上生效  返回上一個路徑  把路徑放進 Stack  把現在的路徑推進 Stack，並 cd 到後面的參數  拿出來 把工作放到…","frontmatter":{"title":"一些 Command Line 技巧","date":"2022-05-25T15:27:30.000Z","draft":false,"tags":["linux","ubuntu","mac","command","max"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9dfac9e4-1de1-43dc-eead-381301a1b500/public","description":null}}}]}},"pageContext":{"id":"309a0330-b7a2-562c-974e-0b4e06b99aa7"}},"staticQueryHashes":[]}