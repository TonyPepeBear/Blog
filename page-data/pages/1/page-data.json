{"componentChunkName":"component---src-templates-article-list-page-template-tsx","path":"/pages/1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"2797652b-b371-5832-b5ca-7639e58b787e","html":"<p>維基百科是大家的好朋友，但他的網頁排版感覺已經幾十年沒有更新過，閱讀起來有點不方便，而 Wikiwand 就是來幫助維基百科排版成更容易閱讀的形式，在 Google Chrome 上有官方的擴充功能可以將 Wiki 的網址直接重新導向到 Wikiwand，而 Safari 好像是因為 Apple 嚴格的條件所以沒有擴充功能，但我今天發現的一個技巧可以協助將網頁直接重新導向到 Wikiwand。</p>\n<!--more-->\n<h2>Wikiwand 比較</h2>\n<p>原版維基：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/0a6c340c-becb-4748-a9d3-949a48241600/public\" alt=\"img\"></p>\n<p>Wikiwand:</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/6023546f-67b9-4524-df91-33bc53f34f00/public\" alt=\"img\"></p>\n<h2>利用 AdGuard</h2>\n<p>這個技巧是利用廣告過濾器來協助網頁重新導向，而我是用 AdGuard 來幫助我們完成，我也只在 AdGuard 上用過，其他廣告過濾器我就不知道可不可以利用這個技巧了。如過沒有 AdGuard 的話，也可以去下載試用看看，自己用了很久覺得還不錯。</p>\n<p>整個過程只需要一步</p>\n<p>在 AdGuard 的設定中，在過濾器選項中新增使用者自訂的過濾器：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@@<span class=\"token operator\">||</span>wikipedia<span class=\"token punctuation\">.</span>org<span class=\"token operator\">^</span>$generichide<span class=\"token punctuation\">,</span>badfilter\nwikipedia<span class=\"token punctuation\">.</span>org#<span class=\"token operator\">%</span>#<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> lang <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">var</span> article <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.wikiwand.com/\"</span> <span class=\"token operator\">+</span> lang <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> article<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/4296f199-0bb2-4c34-922f-b45a5c280100/public\" alt=\"img\"></p>\n<p>大功告成</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"http://sebastiangrans.github.io/Wikiwand-on-Safari-13/\">Wikiwand on Safari</a></li>\n</ul>","rawMarkdownBody":"\n維基百科是大家的好朋友，但他的網頁排版感覺已經幾十年沒有更新過，閱讀起來有點不方便，而 Wikiwand 就是來幫助維基百科排版成更容易閱讀的形式，在 Google Chrome 上有官方的擴充功能可以將 Wiki 的網址直接重新導向到 Wikiwand，而 Safari 好像是因為 Apple 嚴格的條件所以沒有擴充功能，但我今天發現的一個技巧可以協助將網頁直接重新導向到 Wikiwand。\n\n<!--more-->\n\n## Wikiwand 比較\n\n原版維基：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/0a6c340c-becb-4748-a9d3-949a48241600/public)\n\nWikiwand:\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/6023546f-67b9-4524-df91-33bc53f34f00/public)\n\n## 利用 AdGuard\n\n這個技巧是利用廣告過濾器來協助網頁重新導向，而我是用 AdGuard 來幫助我們完成，我也只在 AdGuard 上用過，其他廣告過濾器我就不知道可不可以利用這個技巧了。如過沒有 AdGuard 的話，也可以去下載試用看看，自己用了很久覺得還不錯。\n\n整個過程只需要一步\n\n在 AdGuard 的設定中，在過濾器選項中新增使用者自訂的過濾器：\n\n```js\n@@||wikipedia.org^$generichide,badfilter\nwikipedia.org#%#if (window.location.search === \"\") { var lang = window.location.hostname.split('.')[0]; var article = window.location.pathname.split('/')[2]; window.location.href = \"http://www.wikiwand.com/\" + lang + \"/\" + article; }\n```\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/4296f199-0bb2-4c34-922f-b45a5c280100/public)\n\n大功告成\n\n## Reference\n\n- [Wikiwand on Safari](http://sebastiangrans.github.io/Wikiwand-on-Safari-13/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Others/Wikiwand on Safari.md","excerpt":"維基百科是大家的好朋友，但他的網頁排版感覺已經幾十年沒有更新過，閱讀起來有點不方便，而 Wikiwand 就是來幫助維基百科排版成更容易閱讀的形式，在 Google Chrome 上有官方的擴充功能可以將 Wiki 的網址直接重新導向到 Wikiwand，而 Safari 好像是因為 Apple 嚴格的條件所以沒有擴充功能，但我今天發現的一個技巧可以協助將網頁直接重新導向到 Wikiwand。 …","frontmatter":{"title":"Wikiwand on Safari","date":"2022-08-26T13:44:50.631Z","draft":false,"tags":["wiki","wikiwand","adguard"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/70c00ace-d3b4-4326-cd8c-938fe0cc7200/public","description":null}}},{"node":{"id":"abbc4a5c-22fa-521b-8c76-c393653c057b","html":"<p>Amend Commit 就是用來修改最新 Commit 的指令，如果要修改更之前的 Commit，就要用 Rebase 或是 Reset 了。</p>\n<!--more-->\n<h2>修改 Commit Message</h2>\n<p>如果最新的 Commit Message 亂寫或是寫的什麼不該寫的，就可以用 Amend Commit 來修改。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit --amend -m <span class=\"token string\">\"新的 Commit Message\"</span></code></pre></div>\n<h2>壓進前一次 Commit</h2>\n<p>我常常會先將目前的修改給 Commit 一下當作存檔，但如果每次都只有小修改就 Commit 一次也會造成 Commit 非常多，所以我們可以在 Commit 的時候用 Amend Commit 壓進前一次 Commit，或是想像成修改上一次的 Commit 把這次的修改給加進去。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit --amend</code></pre></div>","rawMarkdownBody":"\nAmend Commit 就是用來修改最新 Commit 的指令，如果要修改更之前的 Commit，就要用 Rebase 或是 Reset 了。\n\n<!--more-->\n\n## 修改 Commit Message\n\n如果最新的 Commit Message 亂寫或是寫的什麼不該寫的，就可以用 Amend Commit 來修改。\n\n```bash\ngit commit --amend -m \"新的 Commit Message\"\n```\n\n## 壓進前一次 Commit\n\n我常常會先將目前的修改給 Commit 一下當作存檔，但如果每次都只有小修改就 Commit 一次也會造成 Commit 非常多，所以我們可以在 Commit 的時候用 Amend Commit 壓進前一次 Commit，或是想像成修改上一次的 Commit 把這次的修改給加進去。\n\n```bash\ngit add .\ngit commit --amend\n```\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Git/amend.md","excerpt":"Amend Commit 就是用來修改最新 Commit 的指令，如果要修改更之前的 Commit，就要用 Rebase 或是 Reset 了。 修改 Commit Message 如果最新的 Commit Message 亂寫或是寫的什麼不該寫的，就可以用 Amend Commit 來修改。 壓進前一次 Commit 我常常會先將目前的修改給 Commit 一下當作存檔，但如果每次都只有小修改…","frontmatter":{"title":"Git Amend Commit","date":"2022-08-11T13:44:12.703Z","draft":false,"tags":["git","amend","commit"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/aa912c60-37ce-4fc5-6187-568499120700/public","description":null}}},{"node":{"id":"4c2b84a4-ff67-5922-b2e9-703e3980c137","html":"<p>今天把一台古老的 Samsung Galaxy S7 從 Android 6M 刷上 Android 11R，使用 Pixle Experience ROM，並安裝 Magisk 和 GPS JoyStick 來玩 Pokemon Go。過程不難，一步步做就不會出錯，從 Andoird 6 升到 11 也沒有早成手機有明顯卡頓，佩服作者。</p>\n<!--more-->\n<p>這次的動機主要是 Pokemon Go 最近開始不支援 Android 6 以下的裝置遊玩，只好升級原本的裝置。</p>\n<h2>步驟概覽</h2>\n<ol>\n<li>刷入 TWRP</li>\n<li>刷入 Pixle Experience</li>\n<li>安裝 Magisk</li>\n<li>安裝 SmaliPatcher</li>\n<li>安裝 SafetyNet Fix</li>\n<li>安裝並設定 GPS JoyStick</li>\n<li>玩</li>\n</ol>\n<p>手機應該不一定要是 S7 也可以照著這些思路完成。</p>\n<h2>手機事前準備</h2>\n<p>開啟 USB 偵錯和 OEM 解鎖。</p>\n<p>看完本文，並可以先把會用到的東西都下載下來。</p>\n<h2>刷入 TWRP</h2>\n<ol>\n<li>進入 Download Mode</li>\n<li>用 Odin 寫入 TWRP Recovery</li>\n<li>進入 TWRP</li>\n</ol>\n<p>下載最新的 Odin 版本 (目前是 3.13.1)，<a href=\"https://odindownload.com/\">Odin 官網</a></p>\n<p>下載 <a href=\"https://twrp.me/samsung/samsunggalaxys7.html\">TWRP for Samsung Galaxy S7</a> (目前是 3.6.2)。</p>\n<p>將手機連上電腦，並關機後進入 Download Mode (POWER + VOL DOWN + HOME)。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/4d367c79-5c09-4118-6b49-f09f918b8600/public\" alt=\"img\"></p>\n<p>開啟 Odin 並點 AP 選擇刷入 TWRP 檔案，關閉 Auto Reboot 後 Start，應該只要幾秒就會完成。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/dacd3ce6-e43e-490d-0a1f-4f6b430e7800/public\" alt=\"img\"></p>\n<p>強制關機 (POWER + VOL DOWN + HOME) 螢幕黑掉後馬上把音量鍵下換成音量鍵上 (POWER + VOL UP + HOME) 進入 Recovery Mode，如果到目前為止都成功的話應該就會看到 TWRP 的介面。</p>\n<h2>刷入 Pixle Experience ROM</h2>\n<p>下載 <a href=\"https://download.pixelexperience.org/herolte\">Galaxy S7 Pixle Experience</a>，目前最新版本是 (20210923-1530)。</p>\n<p>進入 TWRP 先 Wipe 四個分區：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/eed93d6e-153c-43d5-eac0-7eceeee50b00/public\" alt=\"img\"></p>\n<p>如果 Wipe 失敗且是因為沒辦法 mount data，可以參考<a href=\"https://forum.xda-developers.com/t/how-to-fix-unable-to-mount-data-internal-storage-0mb-in-twrp-permanently.3830897/\">這篇文章</a>。</p>\n<p>接下來可以選擇先將 ROM 放入 SD 卡，或是直接用 adb 命令刷 (電腦當然要裝好 adb，最快的方法還是用 Chocolatey)，我自己是直接用 adb 的命令刷。在 TWRP 主畫面選 Advanced，然後使用 ADB Sideload。</p>\n<p>開啟電腦 Terminal，cd 到放剛剛下載的 ROM 的目錄，並輸入以下命令 (檔名記得替換自己的)：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">adb sideload .\\PixelExperience_herolte-11.0-20210923-1530-OFFICIAL.zip</code></pre></div>\n<p>這個會是全部耗費最久的步驟，要有耐心地等久一點。</p>\n<p>完成後 Reboot 沒問題的話，等一兩分鐘 (官方好像是說 15 分鐘內，但我沒遇到那麼久) 應該就可以進入到系統。進入到系統後可以先做一些手機的初始化，確定手機使用上沒甚麼大問題後，可以先到 Google Play 下載 Pokemon Go 再繼續。</p>\n<h2>安裝 Magisk</h2>\n<p><a href=\"https://magiskmanager.com/\">Magisk</a> 是所有 Root 玩家應該都會用到的好東西，應該也是下載最新版就可以(目前是 25.1)。下載後要將副檔名改成 zip。可以用手機直接下載，或是用電腦下載後用 adb 命令 push 到手機中，我還是選擇用 adb，指令如下。：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">adb push magisk.zip /sdcard/Download</code></pre></div>\n<p>關機後再次進入 TWRP，這次選擇 Install，並安裝剛剛 push 到手機中的 Magisk.zip。安裝後重開機，再開啟 Magisk App 完成安裝。</p>\n<p>安裝完成 Magisk 後，進入 Magisk 右上角的設定，選擇隱藏 Magisk，取一個自己喜歡的名字，避免被 Pokemon Go 偵測到 Magisk 的存在。</p>\n<p>最後開啟兩個選項：Zygisk、強制黑名單，開啟這兩個選項後，需要再次重開機，並在<strong>設定黑名單選項</strong>中把 Pokemon Go (Pokemon Go App 好像有兩個 Package name 記得都要勾) 選擇起來。</p>\n<h2>安裝 SmaliPatcher 和 SafetyNet Fix</h2>\n<p>SmaliPatcher 是為了讓 Pokemon Go 偵測不到手機是用模擬的位置，SafetyNet 好像是讓 Pokemon Go 偵測不到有 Root (這我不是很確定，我只知道不裝進不了遊戲)</p>\n<p>繼續將手機連機到電腦，用點腦下載 <a href=\"https://forum.xda-developers.com/t/module-smali-patcher-7-4.3680053/\">SamliPatcher</a>(目前最新是 0.0.7.4)，解壓縮後是個執行檔，用系統管理員的身分執行，並勾如圖的選項 (我是勾了這三個，但聽說好像只勾第一個也可以)：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/5678afd4-b35f-4d1b-94ec-f12496862700/public\" alt=\"img\"></p>\n<p>確定手機連接到電腦後按下 ADD PATCH，這會需要跑一陣子，也需要有點內心的等候，完成會在執行檔的目錄拿到一個檔名類似 SmaliPatcherModule 的壓縮檔，一樣可以用剛剛的 adb 命令 push 到手機中，最後用 Magisk 安裝這個模組後重開機即可。</p>\n<blockquote>\n<p>SmaliPatcher 截至目前是不支援 Android 12 的，我因為這個坑卡了整個下午，Pokemon Go 都會偵測到模擬位置</p>\n</blockquote>\n<p>最後一個要安裝的東西，<a href=\"https://github.com/kdrag0n/safetynet-fix/releases\">SafetyNet Fix</a> (目前版本是 2.3.1)，可用剛剛的方式在電腦下載 zip 後 push 到手機，或是直接在手機下載，然後還是用 Magisk 安裝模組重開機即可。</p>\n<h2>設定 GPS JoyStick</h2>\n<p>不要從 Google Play 下載 GPS JoyStick，到他的<a href=\"http://gpsjoystick.theappninjas.com/\">官網</a>下載 Unlock Version (最新版本是 4.3.2)。</p>\n<p>開啟 GPS JoyStick 會看到一個隱私模式，這也是為了避免被 Pokemon Go 偵測到這個 App 的存在，所以也是自己開心取個名字重新安裝。</p>\n<p>到設定中關閉 <code class=\"language-text\">啟用間接模擬</code>，這選項預設是開啟的，一定要把它關閉。然後到開發人員選項中把模擬位置的選項設定成自己的 JoyStick 名字。</p>\n<h2>開啟 Pokemon Go</h2>\n<p>無須設定，大功告成</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://download.pixelexperience.org/herolte\">Galaxy S7 Pixle Experience</a></li>\n<li><a href=\"https://odindownload.com/\">Odin</a></li>\n<li><a href=\"https://twrp.me/samsung/samsunggalaxys7.html\">TWRP for Samsung Galaxy S7</a></li>\n<li><a href=\"https://magiskmanager.com/\">Magisk</a></li>\n<li><a href=\"https://forum.xda-developers.com/t/module-smali-patcher-7-4.3680053/\">SamliPatcher</a></li>\n<li><a href=\"http://gpsjoystick.theappninjas.com/\">GPS JoyStick</a></li>\n</ul>","rawMarkdownBody":"\n今天把一台古老的 Samsung Galaxy S7 從 Android 6M 刷上 Android 11R，使用 Pixle Experience ROM，並安裝 Magisk 和 GPS JoyStick 來玩 Pokemon Go。過程不難，一步步做就不會出錯，從 Andoird 6 升到 11 也沒有早成手機有明顯卡頓，佩服作者。\n\n<!--more-->\n\n這次的動機主要是 Pokemon Go 最近開始不支援 Android 6 以下的裝置遊玩，只好升級原本的裝置。\n\n## 步驟概覽\n\n1. 刷入 TWRP\n2. 刷入 Pixle Experience\n3. 安裝 Magisk\n4. 安裝 SmaliPatcher\n5. 安裝 SafetyNet Fix\n6. 安裝並設定 GPS JoyStick\n7. 玩\n\n手機應該不一定要是 S7 也可以照著這些思路完成。\n\n## 手機事前準備\n\n開啟 USB 偵錯和 OEM 解鎖。\n\n看完本文，並可以先把會用到的東西都下載下來。\n\n## 刷入 TWRP\n\n1. 進入 Download Mode\n2. 用 Odin 寫入 TWRP Recovery\n3. 進入 TWRP\n\n下載最新的 Odin 版本 (目前是 3.13.1)，[Odin 官網](https://odindownload.com/)\n\n下載 [TWRP for Samsung Galaxy S7](https://twrp.me/samsung/samsunggalaxys7.html) (目前是 3.6.2)。\n\n將手機連上電腦，並關機後進入 Download Mode (POWER + VOL DOWN + HOME)。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/4d367c79-5c09-4118-6b49-f09f918b8600/public)\n\n開啟 Odin 並點 AP 選擇刷入 TWRP 檔案，關閉 Auto Reboot 後 Start，應該只要幾秒就會完成。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/dacd3ce6-e43e-490d-0a1f-4f6b430e7800/public)\n\n強制關機 (POWER + VOL DOWN + HOME) 螢幕黑掉後馬上把音量鍵下換成音量鍵上 (POWER + VOL UP + HOME) 進入 Recovery Mode，如果到目前為止都成功的話應該就會看到 TWRP 的介面。\n\n## 刷入 Pixle Experience ROM\n\n下載 [Galaxy S7 Pixle Experience](https://download.pixelexperience.org/herolte)，目前最新版本是 (20210923-1530)。\n\n進入 TWRP 先 Wipe 四個分區：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/eed93d6e-153c-43d5-eac0-7eceeee50b00/public)\n\n如果 Wipe 失敗且是因為沒辦法 mount data，可以參考[這篇文章](https://forum.xda-developers.com/t/how-to-fix-unable-to-mount-data-internal-storage-0mb-in-twrp-permanently.3830897/)。\n\n接下來可以選擇先將 ROM 放入 SD 卡，或是直接用 adb 命令刷 (電腦當然要裝好 adb，最快的方法還是用 Chocolatey)，我自己是直接用 adb 的命令刷。在 TWRP 主畫面選 Advanced，然後使用 ADB Sideload。\n\n開啟電腦 Terminal，cd 到放剛剛下載的 ROM 的目錄，並輸入以下命令 (檔名記得替換自己的)：\n\n```sh\nadb sideload .\\PixelExperience_herolte-11.0-20210923-1530-OFFICIAL.zip\n```\n\n這個會是全部耗費最久的步驟，要有耐心地等久一點。\n\n完成後 Reboot 沒問題的話，等一兩分鐘 (官方好像是說 15 分鐘內，但我沒遇到那麼久) 應該就可以進入到系統。進入到系統後可以先做一些手機的初始化，確定手機使用上沒甚麼大問題後，可以先到 Google Play 下載 Pokemon Go 再繼續。\n\n## 安裝 Magisk\n\n[Magisk](https://magiskmanager.com/) 是所有 Root 玩家應該都會用到的好東西，應該也是下載最新版就可以(目前是 25.1)。下載後要將副檔名改成 zip。可以用手機直接下載，或是用電腦下載後用 adb 命令 push 到手機中，我還是選擇用 adb，指令如下。：\n\n```sh\nadb push magisk.zip /sdcard/Download\n```\n\n關機後再次進入 TWRP，這次選擇 Install，並安裝剛剛 push 到手機中的 Magisk.zip。安裝後重開機，再開啟 Magisk App 完成安裝。\n\n安裝完成 Magisk 後，進入 Magisk 右上角的設定，選擇隱藏 Magisk，取一個自己喜歡的名字，避免被 Pokemon Go 偵測到 Magisk 的存在。\n\n最後開啟兩個選項：Zygisk、強制黑名單，開啟這兩個選項後，需要再次重開機，並在**設定黑名單選項**中把 Pokemon Go (Pokemon Go App 好像有兩個 Package name 記得都要勾) 選擇起來。\n\n## 安裝 SmaliPatcher 和 SafetyNet Fix\n\nSmaliPatcher 是為了讓 Pokemon Go 偵測不到手機是用模擬的位置，SafetyNet 好像是讓 Pokemon Go 偵測不到有 Root (這我不是很確定，我只知道不裝進不了遊戲)\n\n繼續將手機連機到電腦，用點腦下載 [SamliPatcher](https://forum.xda-developers.com/t/module-smali-patcher-7-4.3680053/)(目前最新是 0.0.7.4)，解壓縮後是個執行檔，用系統管理員的身分執行，並勾如圖的選項 (我是勾了這三個，但聽說好像只勾第一個也可以)：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/5678afd4-b35f-4d1b-94ec-f12496862700/public)\n\n確定手機連接到電腦後按下 ADD PATCH，這會需要跑一陣子，也需要有點內心的等候，完成會在執行檔的目錄拿到一個檔名類似 SmaliPatcherModule 的壓縮檔，一樣可以用剛剛的 adb 命令 push 到手機中，最後用 Magisk 安裝這個模組後重開機即可。\n\n> SmaliPatcher 截至目前是不支援 Android 12 的，我因為這個坑卡了整個下午，Pokemon Go 都會偵測到模擬位置\n\n最後一個要安裝的東西，[SafetyNet Fix](https://github.com/kdrag0n/safetynet-fix/releases) (目前版本是 2.3.1)，可用剛剛的方式在電腦下載 zip 後 push 到手機，或是直接在手機下載，然後還是用 Magisk 安裝模組重開機即可。\n\n## 設定 GPS JoyStick\n\n不要從 Google Play 下載 GPS JoyStick，到他的[官網](http://gpsjoystick.theappninjas.com/)下載 Unlock Version (最新版本是 4.3.2)。\n\n開啟 GPS JoyStick 會看到一個隱私模式，這也是為了避免被 Pokemon Go 偵測到這個 App 的存在，所以也是自己開心取個名字重新安裝。\n\n到設定中關閉 `啟用間接模擬`，這選項預設是開啟的，一定要把它關閉。然後到開發人員選項中把模擬位置的選項設定成自己的 JoyStick 名字。\n\n## 開啟 Pokemon Go\n\n無須設定，大功告成\n\n## Reference\n\n- [Galaxy S7 Pixle Experience](https://download.pixelexperience.org/herolte)\n- [Odin](https://odindownload.com/)\n- [TWRP for Samsung Galaxy S7](https://twrp.me/samsung/samsunggalaxys7.html)\n- [Magisk](https://magiskmanager.com/)\n- [SamliPatcher](https://forum.xda-developers.com/t/module-smali-patcher-7-4.3680053/)\n- [GPS JoyStick](http://gpsjoystick.theappninjas.com/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Android/S7 Poekmon Root.md","excerpt":"今天把一台古老的 Samsung Galaxy S7 從 Android 6M 刷上 Android 11R，使用 Pixle Experience ROM，並安裝 Magisk 和 GPS JoyStick 來玩 Pokemon Go。過程不難，一步步做就不會出錯，從 Andoird 6 升到 11 也沒有早成手機有明顯卡頓，佩服作者。 這次的動機主要是 Pokemon Go 最近開始不支援 …","frontmatter":{"title":"S7 刷 Android 11 + Pokemon Go 飛人簡單紀錄","date":"2022-07-17T13:39:39.000Z","draft":false,"tags":["android","samsung","s7","twrp","pokemon","joystick","gps","pixle","magisk","odin"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d0d9494e-6a67-4237-77aa-c4d7f059b400/public","description":null}}},{"node":{"id":"497c64d1-c2d9-57b6-bd9f-9c60e6829fa5","html":"<p>紀錄一下網站成效</p>\n<!--more-->\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/7e18d41e-67cc-45cb-92fc-2e1373ba2a00/public\" alt=\"img\"></p>\n<p>兩篇成效意外好的坑</p>\n<blockquote>\n<p>廢文沒錯</p>\n</blockquote>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://search.google.com/\">Google Search Console</a></li>\n</ul>","rawMarkdownBody":"\n紀錄一下網站成效\n\n<!--more-->\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/7e18d41e-67cc-45cb-92fc-2e1373ba2a00/public)\n\n兩篇成效意外好的坑\n\n> 廢文沒錯\n\n## Reference\n\n- [Google Search Console](https://search.google.com/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Blog/20220708 review.md","excerpt":"紀錄一下網站成效 img 兩篇成效意外好的坑 廢文沒錯 Reference Google Search Console","frontmatter":{"title":"本站 2022/7/8 成效紀錄","date":"2022-07-08T05:24:40.177Z","draft":false,"tags":["blog","gatsby","google","search"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/46de886b-02a6-48d1-e5f5-1486881dcc00/public","description":null}}},{"node":{"id":"22235767-e1e6-5ec4-a8c0-8f1428c52404","html":"<p>Cloudflare Workers 也是 Cloudflare 的佛心服務之一，可以把 node 程式部署到 Cloudflare 上的眾多節點，效能也不俗，每天還有 100,000 次的免費呼叫，也沒有冷啟動的問題，對流量不高的網頁來說完全夠用。另外，還有 Workers KV 可以用來儲存資料，這就可以寫出簡單的動態網頁，甚至是一些更複雜的應用。今天就來寫一個 Serverless 的短網址服務，並把資料存在 KV 中，就我目前自己測試下來，Workers 的效率真的沒話說。</p>\n<!--more-->\n<h2>Workers Playground</h2>\n<p>如果想要在網頁中先試試看 Workers，可以到 <a href=\"https://cloudflareworkers.com/\">Cloudflare Workers</a> 這個網站。</p>\n<p>會有一個預設的模板長這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Fetch and log a given request object\n * @param {Request} request\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got response\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>讓我們先來理解一下程式碼。</p>\n<p>可以看到程式有兩個 function，其中 <code class=\"language-text\">addEventListener(...)</code> 就是程式的入口，當 Workers 收到 Request 之後，就會傳入你給他的 function，然後再決定要用什麼 Response 回傳到 Client，這裡他寫了一個 <code class=\"language-text\">handleRequest</code> 的 function 來處理。所以這個程式碼實際上做的事，就只有把 Request 和 Response 給 log 出來，回傳原本的網頁的樣子不做任何更動。</p>\n<p>下圖是 Workers 在 Cloudflare 上的運行順序，可以看到 Workers 被放在最後一個，也就是最後一個決定要回傳什麼內容給 User 的地方，也可以理解為可以在這裡對原本的 Response 做最後的更動，再回傳給 Client。</p>\n<p>所以這個 Playground 上可以輸入任意的 URL，來預覽你的 Workers 在任何一個網站上，會對 Response 做的更動。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/32bd1508-ba78-4e94-76a0-adec503fe000/public\" alt=\"img\"></p>\n<p>也就是說如果把程式改成下面這樣，就可以發現任意網站都會變成 Google 的模樣。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://google.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d7409a8b-8203-4e23-6491-309a4cc5b500/public\" alt=\"img\"></p>\n<p>理解後就會發現，其實 Workers 可以對網頁有即時性的更改，也就是說可以對現有的網頁加上新功能，或是在不更動原本網頁的情況下去修 bug。</p>\n<h2>Wrangler</h2>\n<p>Wrangler 是管理 Workers 會用到的 cli 工具，雖然不安裝也是可以在網頁中撰寫 Workers ，但是功能就會少很多，所以還是建議安裝一下。這裡是官方的 Repo <a href=\"https://github.com/cloudflare/wrangler2\">cloudflare/wrangler2</a>。</p>\n<p>用 npm 安裝到 Global：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @cloudflare/wrangler -g</code></pre></div>\n<p>還是建議去官方 Repo 看下有沒有其他注意事項</p>\n<p>安裝完成後要登入 Cloudflare 帳號，<code class=\"language-text\">wrangler login</code>，再用瀏覽器登入即可。</p>\n<h2>Init Project</h2>\n<p><code class=\"language-text\">wrangler init &lt;project-name></code> 創建新的專案，這當中 Wrangler 會問一些問題，可以按照自己的需求決定。</p>\n<p>init 完成後，可以看到自動產生了一些檔案，基本上會用到的只有 <code class=\"language-text\">wrangler.toml</code> 和 <code class=\"language-text\">index.js</code> 兩個檔案。</p>\n<p>現在可以先在 Terminal 中輸入 <code class=\"language-text\">wrangler dev</code>，就可以讓 Workers 跑在本地。</p>\n<h3>Bug</h3>\n<p>因為我的 Cloudflare 一次登入多個 User，所以在使用 wrangler 的 <strong>2.0.14</strong> 時候會出 bug 直接閃退，我解決的方式是直接在 <code class=\"language-text\">wrangler.toml</code> 中輸入 <code class=\"language-text\">account_id</code> 來避免 wrangler 會需要選擇帳號的問題。</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">account_id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxx\"</span></code></pre></div>\n<h2>Cloudflare Workers KV</h2>\n<p>看到名字取作 KV，直觀的就是表示 <code class=\"language-text\">key-value</code> 鍵值對，缺點是 Key 只能對上一個 Value，不能要巢狀的 Value (像是 Json 那樣)，解決的方式其實也是不難，可以直接在 Value 中存上整的 Json 檔案，但在本文不會多做說明，可以自己研究看看。</p>\n<p>另外 Cloudflare 也有提到，KV 存取在全球可能不是即時性的，好像是只保證 60 秒後會同步到所有 Server，雖然我覺得最慢應該也是 5 內秒啦，我從來沒有感受到延遲過，但如果對即時性有疑慮的專案可能也要注意一下。</p>\n<p>下面就來創建一個 KV namespace，這就是一個 Database 的基本單位，目前 Cloudflare 是允許一個帳號有 100 個 KV namespace，所以正常來說應該也不用擔心會用完。下面用 <code class=\"language-text\">URLS</code> 當作 namespace 的名稱，因為我們是要存短網址的資料。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ wrangler kv:namespace create <span class=\"token string\">\"URLS\"</span>\n\n🌀  Creating namespace with title <span class=\"token string\">\"my-site-MY_KV\"</span>\n✨  Success<span class=\"token operator\">!</span>\nAdd the following to your configuration file:\nkv_namespaces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> binding <span class=\"token operator\">=</span> <span class=\"token string\">\"URLS\"</span>, <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxxxxx\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>然後 wrangler 會有個給你一個 binding 和 id，就直接複製貼上到 <code class=\"language-text\">wrangler.tmol</code> 中即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">kv_namespaces</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token key property\">binding</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"URLS\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxxxxx\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>如果要在 wrangler 的 dev 模式中測試 KV，就多申請一個 Preview KV，來避免對已經上線的服務造成影響：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ wrangler kv:namespace create <span class=\"token string\">\"URLS\"</span> --preview\n\n⛅️ wrangler <span class=\"token number\">2.0</span>.14\n--------------------\n🌀 Creating namespace with title <span class=\"token string\">\"URLS\"</span>\n✨ Success<span class=\"token operator\">!</span>\nAdd the following to your configuration <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> your kv_namespaces array:\n<span class=\"token punctuation\">{</span> binding <span class=\"token operator\">=</span> <span class=\"token string\">\"URLS\"</span>, preview_id <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxx2\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>這次把 <code class=\"language-text\">preview_id</code> 加在原本的 id 後方即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">kv_namespaces</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token key property\">binding</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"URLS\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">preview_id</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxxxxx2\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>設定好後，wrangler 會直接把你剛剛取的名字直接用環境變數 (ENV) 傳入，具體的使用方式可以繼續往下看。</p>\n<h2>Routing</h2>\n<p>為了方便等等我們處理傳入的 Routing，我們先來安裝一個 npm 套件。對你沒看錯，Workers 也是支援 npm 套件的：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> itty-router\n\n<span class=\"token function\">npm</span> i itty-router</code></pre></div>\n<p>這樣等等就可以用 itty-router 來處理傳入的 request。</p>\n<p>我們先將 Handle Request 完全丟給的 itty-router 來處理，將 index.js 改成下方這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"itty-router\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> router<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到直接 export router 的 handle 方法，這樣就完全把 Requse 交給 Router 來處理。我們先將 root 回傳 Hello 測試看看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"itty-router\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Workers\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> router<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>現在可以 <code class=\"language-text\">wrangler dev</code> 一下，然後到 <code class=\"language-text\">loclahost:8787/</code> 看看會不會回傳 Hello Workers。</p>\n<blockquote>\n<p>之後的程式碼就不再完整的寫出來了，但就是在這個大框架下撰寫</p>\n</blockquote>\n<h3>New 短網址</h3>\n<p>我們寫一個 post 方法來接收新的網址，並回傳他的新短網址給他。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/new\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 取得 POST JSON BODY 並轉成 JS 物件</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> len <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f00</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JSON 有誤，回傳 400 錯誤</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidHttpUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f00</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL is not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 確認是否為 Http 網址</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> len <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f00</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lenght must be at least 4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 確認至少大於等於 4</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token function\">getRandomString</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 產生英文亂碼</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">URLS</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 從 kv 確認沒有重複</span>\n    len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> 有重複將 len <span class=\"token operator\">+</span><span class=\"token number\">1</span> 後再產生新的\n    s <span class=\"token operator\">=</span> <span class=\"token function\">getRandomString</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">URLS</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存入 kv</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f00</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">?</span> msg <span class=\"token operator\">:</span> <span class=\"token string\">\"BAD REQUEST\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isValidHttpUrl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> url<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">.</span>protocol <span class=\"token operator\">===</span> <span class=\"token string\">\"http:\"</span> <span class=\"token operator\">||</span> url<span class=\"token punctuation\">.</span>protocol <span class=\"token operator\">===</span> <span class=\"token string\">\"https:\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getRandomString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">len</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個 POST 要吃一個像是下面的 json body，分別有要縮的網址，和要產出的短網址長度：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://tonypepe.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"len\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以發現我們是沒有做權限檢查的，所以任何人只要對 POST <code class=\"language-text\">/new</code>，都可以產生新的短網址，但我自己是覺得問題也不大，畢竟 Cloudflare 就是一家 ddos 防護商，所以要被攻擊到一天的使用量都用完應該也很難。或是你想要做權限檢查，也可以試著實作看看。</p>\n<h2>Redirect 重新導向</h2>\n<p>最後一步就是把短網址重新導向到原本的網址，這部份很簡單，就是從 kv 取得原本的網址，然後 Response HTTP 303 來做重新導向，取不到 value 就給 404。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:path\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">URLS</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOT FOUND\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">404</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">303</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Location\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Publish</h2>\n<p><code class=\"language-text\">wrangler publish</code> 就可以把程式碼部署到全球的 Cloudflare 節點，如果沒有自己網域，Cloudflare 也會給你一個 <code class=\"language-text\">xxx.workers.dev</code> 的網域免費使用，可以現在這裡測試看看，再決定要不要把自己的網域綁定上去。</p>\n<h2>後記</h2>\n<p>這篇用不到 100 行程式碼熟練了 Cloudflare 的 Serverless 服務，和寫出了短網址應用，讓我們不用自己架設自己的 Server 就可以有動態網頁的功能。我還看到官方的文件中可以把 Response 加上 Cors 的標頭，讓原本不允許跨站存取的 api 可以跨站存取，雖然很不道德，但是我喜歡。我自己還想到可以對原本的靜態網頁加上限制存取的功能，或是網頁有誤直接把網頁先導向 404，這都是很有趣的應用，大家可以自己發揮看看。</p>\n<p>如果要完整程式碼：<a href=\"https://gist.github.com/TonyPepeBear/f435dae11b83fc2626a49a6b3cc9848b\">Gist</a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://developers.cloudflare.com/workers/\">Cloudflare Workers documentation</a></li>\n</ul>","rawMarkdownBody":"\nCloudflare Workers 也是 Cloudflare 的佛心服務之一，可以把 node 程式部署到 Cloudflare 上的眾多節點，效能也不俗，每天還有 100,000 次的免費呼叫，也沒有冷啟動的問題，對流量不高的網頁來說完全夠用。另外，還有 Workers KV 可以用來儲存資料，這就可以寫出簡單的動態網頁，甚至是一些更複雜的應用。今天就來寫一個 Serverless 的短網址服務，並把資料存在 KV 中，就我目前自己測試下來，Workers 的效率真的沒話說。\n\n<!--more-->\n\n## Workers Playground\n\n如果想要在網頁中先試試看 Workers，可以到 [Cloudflare Workers](https://cloudflareworkers.com/) 這個網站。\n\n會有一個預設的模板長這樣：\n\n```js\naddEventListener(\"fetch\", (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n\n/**\n * Fetch and log a given request object\n * @param {Request} request\n */\nasync function handleRequest(request) {\n  console.log(\"Got request\", request);\n  const response = await fetch(request);\n  console.log(\"Got response\", response);\n  return response;\n}\n```\n\n讓我們先來理解一下程式碼。\n\n可以看到程式有兩個 function，其中 `addEventListener(...)` 就是程式的入口，當 Workers 收到 Request 之後，就會傳入你給他的 function，然後再決定要用什麼 Response 回傳到 Client，這裡他寫了一個 `handleRequest` 的 function 來處理。所以這個程式碼實際上做的事，就只有把 Request 和 Response 給 log 出來，回傳原本的網頁的樣子不做任何更動。\n\n下圖是 Workers 在 Cloudflare 上的運行順序，可以看到 Workers 被放在最後一個，也就是最後一個決定要回傳什麼內容給 User 的地方，也可以理解為可以在這裡對原本的 Response 做最後的更動，再回傳給 Client。\n\n所以這個 Playground 上可以輸入任意的 URL，來預覽你的 Workers 在任何一個網站上，會對 Response 做的更動。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/32bd1508-ba78-4e94-76a0-adec503fe000/public)\n\n也就是說如果把程式改成下面這樣，就可以發現任意網站都會變成 Google 的模樣。\n\n```js\naddEventListener(\"fetch\", (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n\nasync function handleRequest(request) {\n  const response = await fetch(\"https://google.com\");\n  return response;\n}\n```\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d7409a8b-8203-4e23-6491-309a4cc5b500/public)\n\n理解後就會發現，其實 Workers 可以對網頁有即時性的更改，也就是說可以對現有的網頁加上新功能，或是在不更動原本網頁的情況下去修 bug。\n\n## Wrangler\n\nWrangler 是管理 Workers 會用到的 cli 工具，雖然不安裝也是可以在網頁中撰寫 Workers ，但是功能就會少很多，所以還是建議安裝一下。這裡是官方的 Repo [cloudflare/wrangler2](https://github.com/cloudflare/wrangler2)。\n\n用 npm 安裝到 Global：\n\n```bash\nnpm i @cloudflare/wrangler -g\n```\n\n還是建議去官方 Repo 看下有沒有其他注意事項\n\n安裝完成後要登入 Cloudflare 帳號，`wrangler login`，再用瀏覽器登入即可。\n\n## Init Project\n\n`wrangler init <project-name>` 創建新的專案，這當中 Wrangler 會問一些問題，可以按照自己的需求決定。\n\ninit 完成後，可以看到自動產生了一些檔案，基本上會用到的只有 `wrangler.toml` 和 `index.js` 兩個檔案。\n\n現在可以先在 Terminal 中輸入 `wrangler dev`，就可以讓 Workers 跑在本地。\n\n### Bug\n\n因為我的 Cloudflare 一次登入多個 User，所以在使用 wrangler 的 **2.0.14** 時候會出 bug 直接閃退，我解決的方式是直接在 `wrangler.toml` 中輸入 `account_id` 來避免 wrangler 會需要選擇帳號的問題。\n\n```toml\naccount_id = \"xxxxxxxxxxxxxxx\"\n```\n\n## Cloudflare Workers KV\n\n看到名字取作 KV，直觀的就是表示 `key-value` 鍵值對，缺點是 Key 只能對上一個 Value，不能要巢狀的 Value (像是 Json 那樣)，解決的方式其實也是不難，可以直接在 Value 中存上整的 Json 檔案，但在本文不會多做說明，可以自己研究看看。\n\n另外 Cloudflare 也有提到，KV 存取在全球可能不是即時性的，好像是只保證 60 秒後會同步到所有 Server，雖然我覺得最慢應該也是 5 內秒啦，我從來沒有感受到延遲過，但如果對即時性有疑慮的專案可能也要注意一下。\n\n下面就來創建一個 KV namespace，這就是一個 Database 的基本單位，目前 Cloudflare 是允許一個帳號有 100 個 KV namespace，所以正常來說應該也不用擔心會用完。下面用 `URLS` 當作 namespace 的名稱，因為我們是要存短網址的資料。\n\n```bash\n$ wrangler kv:namespace create \"URLS\"\n\n🌀  Creating namespace with title \"my-site-MY_KV\"\n✨  Success!\nAdd the following to your configuration file:\nkv_namespaces = [\n  { binding = \"URLS\", id = \"xxxxxxxxxxxxxxxxxxxxxxx\" }\n]\n```\n\n然後 wrangler 會有個給你一個 binding 和 id，就直接複製貼上到 `wrangler.tmol` 中即可：\n\n```toml\nkv_namespaces = [\n  { binding = \"URLS\", id = \"xxxxxxxxxxxxxxxxxxxxxxx\" }\n]\n```\n\n如果要在 wrangler 的 dev 模式中測試 KV，就多申請一個 Preview KV，來避免對已經上線的服務造成影響：\n\n```bash\n$ wrangler kv:namespace create \"URLS\" --preview\n\n⛅️ wrangler 2.0.14\n--------------------\n🌀 Creating namespace with title \"URLS\"\n✨ Success!\nAdd the following to your configuration file in your kv_namespaces array:\n{ binding = \"URLS\", preview_id = \"xxxxxxxxxxxxxxxxxxxx2\" }\n```\n\n這次把 `preview_id` 加在原本的 id 後方即可：\n\n```toml\nkv_namespaces = [\n    { binding = \"URLS\", id = \"xxxxxxxxxxxxxxxxxxxx\", preview_id = \"xxxxxxxxxxxxxxxxxxxx2\" }\n]\n```\n\n設定好後，wrangler 會直接把你剛剛取的名字直接用環境變數 (ENV) 傳入，具體的使用方式可以繼續往下看。\n\n## Routing\n\n為了方便等等我們處理傳入的 Routing，我們先來安裝一個 npm 套件。對你沒看錯，Workers 也是支援 npm 套件的：\n\n```bash\nyarn add itty-router\n\nnpm i itty-router\n```\n\n這樣等等就可以用 itty-router 來處理傳入的 request。\n\n我們先將 Handle Request 完全丟給的 itty-router 來處理，將 index.js 改成下方這樣：\n\n```js\nimport { Router } from \"itty-router\";\n\nconst router = Router();\n\nexport default {\n  fetch: router.handle,\n};\n```\n\n可以看到直接 export router 的 handle 方法，這樣就完全把 Requse 交給 Router 來處理。我們先將 root 回傳 Hello 測試看看：\n\n```js\nimport { Router } from \"itty-router\";\n\nconst router = Router();\n\nrouter.get(\"/\", async (req, env) => {\n  return new Response(\"Hello Workers\", {\n    status: 200,\n  });\n});\n\nexport default {\n  fetch: router.handle,\n};\n```\n\n現在可以 `wrangler dev` 一下，然後到 `loclahost:8787/` 看看會不會回傳 Hello Workers。\n\n> 之後的程式碼就不再完整的寫出來了，但就是在這個大框架下撰寫\n\n### New 短網址\n\n我們寫一個 post 方法來接收新的網址，並回傳他的新短網址給他。\n\n```js\nrouter.post(\"/new\", async (req, env) => {\n  const body = await req.json();        // 取得 POST JSON BODY 並轉成 JS 物件\n  console.log(JSON.stringify(body));\n  var { url, len } = body;\n  if (url == undefined) return f00(\"\"); // JSON 有誤，回傳 400 錯誤\n  if (!isValidHttpUrl(url)) return f00(\"URL is not valid\");  // 確認是否為 Http 網址\n  if (len == undefined) len = 5;\n  if (len < 4) return f00(\"Lenght must be at least 4\"); // 確認至少大於等於 4\n  var s = getRandomString(len); // 產生英文亂碼\n  while ((await env.URLS.get(s)) != undefined) { // 從 kv 確認沒有重複\n    len++; 有重複將 len +1 後再產生新的\n    s = getRandomString(len);\n  }\n  await env.URLS.put(s, url); // 存入 kv\n  return new Response(s);\n});\n\nconst f00 = (msg) => new Response(msg ? msg : \"BAD REQUEST\", { status: 400 });\n\nfunction isValidHttpUrl(string) {\n  let url;\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nfunction getRandomString(len) {\n  var s = \"\";\n  for (let i = 0; i < len; i++) {\n    s += String.fromCharCode(getRandomInt(26) + 97);\n  }\n  return s;\n}\n```\n\n這個 POST 要吃一個像是下面的 json body，分別有要縮的網址，和要產出的短網址長度：\n\n```json\n{\n  \"url\": \"https://tonypepe.com\",\n  \"len\": 3\n}\n```\n\n可以發現我們是沒有做權限檢查的，所以任何人只要對 POST `/new`，都可以產生新的短網址，但我自己是覺得問題也不大，畢竟 Cloudflare 就是一家 ddos 防護商，所以要被攻擊到一天的使用量都用完應該也很難。或是你想要做權限檢查，也可以試著實作看看。\n\n## Redirect 重新導向\n\n最後一步就是把短網址重新導向到原本的網址，這部份很簡單，就是從 kv 取得原本的網址，然後 Response HTTP 303 來做重新導向，取不到 value 就給 404。\n\n```js\nrouter.get(\"/:path\", async (req, env) => {\n  const { params } = req;\n  const url = await env.URLS.get(params.path.toLowerCase());\n  if (url == undefined) return new Response(\"NOT FOUND\", { status: 404 });\n  const response = new Response(\"\", { status: 303 });\n  response.headers.append(\"Location\", url);\n  return response;\n});\n```\n\n## Publish\n\n`wrangler publish` 就可以把程式碼部署到全球的 Cloudflare 節點，如果沒有自己網域，Cloudflare 也會給你一個 `xxx.workers.dev` 的網域免費使用，可以現在這裡測試看看，再決定要不要把自己的網域綁定上去。\n\n## 後記\n\n這篇用不到 100 行程式碼熟練了 Cloudflare 的 Serverless 服務，和寫出了短網址應用，讓我們不用自己架設自己的 Server 就可以有動態網頁的功能。我還看到官方的文件中可以把 Response 加上 Cors 的標頭，讓原本不允許跨站存取的 api 可以跨站存取，雖然很不道德，但是我喜歡。我自己還想到可以對原本的靜態網頁加上限制存取的功能，或是網頁有誤直接把網頁先導向 404，這都是很有趣的應用，大家可以自己發揮看看。\n\n如果要完整程式碼：[Gist](https://gist.github.com/TonyPepeBear/f435dae11b83fc2626a49a6b3cc9848b)\n\n## Reference\n\n- [Cloudflare Workers documentation](https://developers.cloudflare.com/workers/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Web/cf-workers-short-url.md","excerpt":"Cloudflare Workers 也是 Cloudflare 的佛心服務之一，可以把 node 程式部署到 Cloudflare 上的眾多節點，效能也不俗，每天還有 100,000 次的免費呼叫，也沒有冷啟動的問題，對流量不高的網頁來說完全夠用。另外，還有 Workers KV 可以用來儲存資料，這就可以寫出簡單的動態網頁，甚至是一些更複雜的應用。今天就來寫一個 Serverless 的短網…","frontmatter":{"title":"用 Cloudflare Workers 架設 Serverless 短網址服務","date":"2022-06-21T09:15:49.000Z","draft":false,"tags":["cloudflare","workers","worker","web","short","url"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/b6cf9d30-1028-4aa5-c136-0dbc6c098f00/public","description":null}}},{"node":{"id":"1f835006-d336-5140-acce-32c9475d47e1","html":"<p>最近把網站從 Hugo 遷移到 Gatsby，遇到了一些問題，我就來簡單記錄一下解決問題的過程，而且因為我對 Node 也不是很熟，所以主要是在當作我練習 Node 和 React。</p>\n<!--more-->\n<h2>Why？</h2>\n<ol>\n<li>Hugo 實在很難使用 Node 套件</li>\n<li>單純想給自己一個接觸 Node 的機會</li>\n</ol>\n<p>許多網頁的套件庫都是使用 node 開發的，但因為 Hugo 是用 go 開發，雖然有提供對 npm 套件的支援，但是還是沒有原生的方便，在用套件的時候常常會遇到問題。所以我還是下定決心換到 Gatsby，也可以順便熟悉一下 React。另外，我是使用 TypeScript 來開發，這也是有點虐待自己，不過還好還是順利完成，也對 TS 有多點認識。</p>\n<p>目前遇到的一個最大的缺點，大概就是 Hugo 產生網頁的速度真的超級快，Gatsby 因為依賴一大堆 npm 套件，所以我在 Cloudflare Pages 上的平均需要大約 5 分鐘網頁才能建置好。</p>\n<h2>遇到的問題</h2>\n<p>目前遇到的主要問題大概就是下面三點：</p>\n<ol>\n<li>npm build 不成功</li>\n<li>觀看更多的功能</li>\n<li>meilisearch</li>\n</ol>\n<h2>npm to yarn</h2>\n<p>一開始我是使用 npm 作為套件管理，我在本機開發時都沒有遇到什麼問題，直到我幾乎都開發完成後，我就將網頁 push 到 GitHub 上，GitHub Actions 在 Build 時也沒有遇到問題，直到 Cloudflare Pages 在建置時，就是會一直失敗，我也一直確定 node 和 npm 版本跟我本地的一樣，但無論如何就是失敗，直到我上網查後，才發現 Gatsby 官方也是建議使用 yarn，npm 好像會遇到問題。我就試著 <code class=\"language-text\">yarn</code> 一下，讓專案自動遷移到 yarn，就沒又再出現問題了，實在莫名其妙。所以也是建議大家以後若有使用到 Gatsby，還是使用 yarn 比較好一點。</p>\n<h2>觀看更多</h2>\n<p>在 Hugo 時，Hugo 支援在 Markdown 中使用 <code class=\"language-text\">&lt;!--more--></code> 的標籤來提取標籤前的部分當作文章摘要，用來顯示在 ListTemplate，而 Gatsby 只有提供提取前 n 字的功能。而這對我網頁的美觀程度就有一點不方便，因為我 Hugo 已經累計了不少文章，若要現在再去一篇篇修改，也是會有點麻煩，所以只好自己稍微研究一下要怎麼處理。</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Hello\n\n摘要\n\n<span class=\"token comment\">&lt;!--more--></span>\n\n正文\n\n正文</code></pre></div>\n<p>我處理的方式簡單暴力，我發現 Gatsby 在 GraphQL 的時候，可以拿到 RawMarkdown，而且這個也會保留註解，所以我靈機一動，我就自己使用 Node 套件，自己解析 Markdown 不就好了？所以我就用 <code class=\"language-text\">marked</code> 套件，幫我把 md 轉成 html。範例大致如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> marked <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"marked\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Summary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> summary <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>rawMarkdownBody<span class=\"token punctuation\">.</span><span class=\"token function\">spllit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;!--more-->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div dangerouslaSetSetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> marked<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>summary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>MeiliSearch</h2>\n<p>我原本的 Hugo 網頁，就是使用 MeiliSearch 來當我的搜尋功能，可以參考這個 <a href=\"/search/tag?tag=meilisearch\">tag</a> 。所以一樣是會需要產生一個 <code class=\"language-text\">SearchIndex.json</code>，我直接在 <code class=\"language-text\">gatsby-node.ts</code> 裡的 <code class=\"language-text\">noPostBuild</code> 手動產生 json，再用 <code class=\"language-text\">fs</code> 寫入檔案，直接給大家程式碼參考。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> onPostBuild<span class=\"token operator\">:</span> GatsbyNode<span class=\"token punctuation\">[</span><span class=\"token string\">\"onPostBuild\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  graphql<span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> errors<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token generic-function\"><span class=\"token function\">graphql</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ArticleListData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>articleGraphql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// SearchIndex.json</span>\n  <span class=\"token keyword\">const</span> searchArr<span class=\"token operator\">:</span> SearchIndex<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> summary <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>rawMarkdownBody<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;!--more-->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n      <span class=\"token string\">\"/posts/\"</span> <span class=\"token operator\">+</span>\n      node<span class=\"token punctuation\">.</span>fileAbsolutePath\n        <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/posts/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> miliseconds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    searchArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> index<span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> miliseconds<span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      summary<span class=\"token operator\">:</span> summary<span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./public/SearchIndex.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>searchArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>產生 Json 後，我一樣是使用 GitHub Actions 來自動把 Index 推到 MeiliSearch Server。</p>\n<h2>Tag Page</h2>\n<p>其實 Gatsby 應該也是有方法可以產生 Tag Page，但是因為我想到要用 Tag Page 時，我已經弄好 MeiliSearch 了，所以我就靈機一動，想想是不是也可以直接簡單的使用 MeiliSearch 來動態的產生 Tag Page 就好，結果還真的被我弄成功了，就來紀錄一下我大概的思路。雖然我知道這八成不是什麼好方法，但是簡單暴力。</p>\n<p>MeiliSearch 可以設定 <code class=\"language-text\">filterableAttributes</code> 的屬性，所以我把我的 Index 中的 Tag 屬性設定成可以 Filterable，然後再取得網址的 Params，最後向 MeiliSearch 搜尋後動態的把結果顯示在網頁上。也可以參考<a href=\"https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters\">官方文件</a>。</p>\n<p>這時遇到的問題就是 Gatsby 是 Server Side Rendering，所以取的 Params 要使用額外的 plugin，我是使用 <code class=\"language-text\">gatsby-plugin-use-query-params</code>，就可以像是 React 的 useState 的方式來取的網址的 Parm。</p>\n<p>也是提供部分的程式碼給大家參考：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">SearchTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> tag <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> tag<span class=\"token operator\">:</span> StringParam <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取的 Params</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">,</span> setResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 執行搜尋</span>\n    client\n      <span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gatsby-blog\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tags=\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>tag <span class=\"token operator\">?</span> tag <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        limit<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>MainLayout title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"tag: \"</span> <span class=\"token operator\">+</span> tag <span class=\"token operator\">+</span> <span class=\"token string\">\" - TonyPepe\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1 className<span class=\"token operator\">=</span><span class=\"token string\">\"my-4 bg-white rounded-md py-4 px-6 text-2xl\"</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"Tag: \"</span> <span class=\"token operator\">+</span> tag<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>LoadingChild <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>ResultClild hits<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MainLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MeiliSearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">\"https://search.tonypepe.com\"</span><span class=\"token punctuation\">,</span>\n  apiKey<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>後紀</h2>\n<p>Node 在建置上實在是太慢，真的會有一點受不了，每次光是要 Run 起 Dev Server，就至少需要 30 秒，相比 Hugo 就算是有裝一點點的 npm 套件，還是只要 10 秒左右就可以開始寫網頁了。</p>\n<p>當然，使用 Gatsby 開發的好處也是很多，可以最大化的自訂網頁的長相和功能，不會被 Hugo 的功能限制住，如果缺少了什麼功能，都可以自己用 js 開發出來，而且在使用一些 Web Library 和 React 真的太方便了。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://gatsbyjs.org/\">Gatsby</a></li>\n<li><a href=\"https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters\">MeiliSearch - Filtering and faceted search</a></li>\n</ul>","rawMarkdownBody":"\n最近把網站從 Hugo 遷移到 Gatsby，遇到了一些問題，我就來簡單記錄一下解決問題的過程，而且因為我對 Node 也不是很熟，所以主要是在當作我練習 Node 和 React。\n\n<!--more-->\n\n## Why？\n\n1. Hugo 實在很難使用 Node 套件\n2. 單純想給自己一個接觸 Node 的機會\n\n許多網頁的套件庫都是使用 node 開發的，但因為 Hugo 是用 go 開發，雖然有提供對 npm 套件的支援，但是還是沒有原生的方便，在用套件的時候常常會遇到問題。所以我還是下定決心換到 Gatsby，也可以順便熟悉一下 React。另外，我是使用 TypeScript 來開發，這也是有點虐待自己，不過還好還是順利完成，也對 TS 有多點認識。\n\n目前遇到的一個最大的缺點，大概就是 Hugo 產生網頁的速度真的超級快，Gatsby 因為依賴一大堆 npm 套件，所以我在 Cloudflare Pages 上的平均需要大約 5 分鐘網頁才能建置好。\n\n## 遇到的問題\n\n目前遇到的主要問題大概就是下面三點：\n\n1. npm build 不成功\n2. 觀看更多的功能\n3. meilisearch\n\n## npm to yarn\n\n一開始我是使用 npm 作為套件管理，我在本機開發時都沒有遇到什麼問題，直到我幾乎都開發完成後，我就將網頁 push 到 GitHub 上，GitHub Actions 在 Build 時也沒有遇到問題，直到 Cloudflare Pages 在建置時，就是會一直失敗，我也一直確定 node 和 npm 版本跟我本地的一樣，但無論如何就是失敗，直到我上網查後，才發現 Gatsby 官方也是建議使用 yarn，npm 好像會遇到問題。我就試著 `yarn` 一下，讓專案自動遷移到 yarn，就沒又再出現問題了，實在莫名其妙。所以也是建議大家以後若有使用到 Gatsby，還是使用 yarn 比較好一點。\n\n## 觀看更多\n\n在 Hugo 時，Hugo 支援在 Markdown 中使用 `<!--more-->` 的標籤來提取標籤前的部分當作文章摘要，用來顯示在 ListTemplate，而 Gatsby 只有提供提取前 n 字的功能。而這對我網頁的美觀程度就有一點不方便，因為我 Hugo 已經累計了不少文章，若要現在再去一篇篇修改，也是會有點麻煩，所以只好自己稍微研究一下要怎麼處理。\n\n```md\nHello\n\n摘要\n\n<!--more-->\n\n正文\n\n正文\n```\n\n我處理的方式簡單暴力，我發現 Gatsby 在 GraphQL 的時候，可以拿到 RawMarkdown，而且這個也會保留註解，所以我靈機一動，我就自己使用 Node 套件，自己解析 Markdown 不就好了？所以我就用 `marked` 套件，幫我把 md 轉成 html。範例大致如下：\n\n```typescript\nimport { marked } from \"marked\";\n\nexport default function Summary({ node }: Props) {\n  const summary = node.rawMarkdownBody.spllit(\"<!--more-->\")[0];\n  return <div dangerouslaSetSetInnerHTML={{ __html: marked.parse(summary) }} />;\n}\n```\n\n## MeiliSearch\n\n我原本的 Hugo 網頁，就是使用 MeiliSearch 來當我的搜尋功能，可以參考這個 [tag](/search/tag?tag=meilisearch) 。所以一樣是會需要產生一個 `SearchIndex.json`，我直接在 `gatsby-node.ts` 裡的 `noPostBuild` 手動產生 json，再用 `fs` 寫入檔案，直接給大家程式碼參考。\n\n```typescript\nexport const onPostBuild: GatsbyNode[\"onPostBuild\"] = async ({\n  graphql,\n  actions,\n}) => {\n  const { errors, data } = await graphql<ArticleListData>(articleGraphql);\n  // SearchIndex.json\n  const searchArr: SearchIndex[] = [];\n  data!!.allMarkdownRemark.edges.forEach(({ node }, index) => {\n    const summary = node.rawMarkdownBody.split(\"<!--more-->\")[0];\n    const url =\n      \"/posts/\" +\n      node.fileAbsolutePath\n        .split(\"/posts/\")[1]\n        .split(\".md\")[0]\n        .replace(\" \", \"-\")\n        .toLowerCase();\n    const miliseconds = new Date(node.frontmatter.date).getTime();\n    searchArr.push({\n      id: index,\n      date: miliseconds,\n      url: url,\n      title: node.frontmatter.title,\n      summary: summary,\n      content: node.internal.content.replace(\"\\n\", \" \"),\n      tags: node.frontmatter.tags,\n    });\n  });\n  fs.writeFileSync(\"./public/SearchIndex.json\", JSON.stringify(searchArr));\n};\n```\n\n產生 Json 後，我一樣是使用 GitHub Actions 來自動把 Index 推到 MeiliSearch Server。\n\n## Tag Page\n\n其實 Gatsby 應該也是有方法可以產生 Tag Page，但是因為我想到要用 Tag Page 時，我已經弄好 MeiliSearch 了，所以我就靈機一動，想想是不是也可以直接簡單的使用 MeiliSearch 來動態的產生 Tag Page 就好，結果還真的被我弄成功了，就來紀錄一下我大概的思路。雖然我知道這八成不是什麼好方法，但是簡單暴力。\n\nMeiliSearch 可以設定 `filterableAttributes` 的屬性，所以我把我的 Index 中的 Tag 屬性設定成可以 Filterable，然後再取得網址的 Params，最後向 MeiliSearch 搜尋後動態的把結果顯示在網頁上。也可以參考[官方文件](https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters)。\n\n這時遇到的問題就是 Gatsby 是 Server Side Rendering，所以取的 Params 要使用額外的 plugin，我是使用 `gatsby-plugin-use-query-params`，就可以像是 React 的 useState 的方式來取的網址的 Parm。\n\n也是提供部分的程式碼給大家參考：\n\n```typescript\nexport default function SearchTags() {\n  const [{ tag }, _] = useQueryParams({ tag: StringParam }); // 取的 Params\n  const [result, setResult] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  React.useEffect(() => {\n    // 執行搜尋\n    client\n      .index(\"gatsby-blog\")\n      .search(\"\", {\n        filter: [\"tags=\" + (tag ? tag : \"\")],\n        limit: Number.MAX_SAFE_INTEGER,\n      })\n      .then((res: any) => {\n        setResult(res.hits);\n        setIsLoading(false);\n      });\n  }, []);\n  return (\n    <MainLayout title={\"tag: \" + tag + \" - TonyPepe\"}>\n      <div>\n        <h1 className=\"my-4 bg-white rounded-md py-4 px-6 text-2xl\">\n          {\"Tag: \" + tag}\n        </h1>\n        {isLoading ? <LoadingChild /> : <ResultClild hits={result} />}\n      </div>\n    </MainLayout>\n  );\n}\n\nconst client = new MeiliSearch({\n  host: \"https://search.tonypepe.com\",\n  apiKey: \"\",\n});\n```\n\n## 後紀\n\nNode 在建置上實在是太慢，真的會有一點受不了，每次光是要 Run 起 Dev Server，就至少需要 30 秒，相比 Hugo 就算是有裝一點點的 npm 套件，還是只要 10 秒左右就可以開始寫網頁了。\n\n當然，使用 Gatsby 開發的好處也是很多，可以最大化的自訂網頁的長相和功能，不會被 Hugo 的功能限制住，如果缺少了什麼功能，都可以自己用 js 開發出來，而且在使用一些 Web Library 和 React 真的太方便了。\n\n## Reference\n\n- [Gatsby](https://gatsbyjs.org/)\n- [MeiliSearch - Filtering and faceted search](https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Web/hugo-to-gatsby.md","excerpt":"最近把網站從 Hugo 遷移到 Gatsby，遇到了一些問題，我就來簡單記錄一下解決問題的過程，而且因為我對 Node 也不是很熟，所以主要是在當作我練習 Node 和 React。 Why？ Hugo 實在很難使用 Node 套件 單純想給自己一個接觸 Node 的機會 許多網頁的套件庫都是使用 node 開發的，但因為 Hugo 是用 go 開發，雖然有提供對 npm 套件的支援，但是還是沒…","frontmatter":{"title":"從 Hugo 遷到 Gatsby 的紀錄","date":"2022-06-01T15:17:28.142Z","draft":false,"tags":["hugo","gatsby","blog","web","node","npm","meilisearch","search"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/2892b2bf-2c12-4d17-21f7-ba2e57c98100/public","description":null}}},{"node":{"id":"af3c84b0-2162-5466-8b24-f810139828dd","html":"<p>記錄一些我怕忘的 Command Line 技巧，當作字典用。</p>\n<!--more-->\n<h2>清螢幕</h2>\n<p><code class=\"language-text\">clear</code> 或是 <code class=\"language-text\">ctrl + L</code></p>\n<h2>家目錄</h2>\n<p><code class=\"language-text\">~</code> 波浪符就是代表家目錄</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/etc$ <span class=\"token builtin class-name\">cd</span> ~\n\n~$</code></pre></div>\n<h2>預設文字編輯器</h2>\n<p>有時預設的文字編輯器不是 vim，而是 <code class=\"language-text\">nano</code> 或是 <code class=\"language-text\">emacs</code>，在打 git 指令時，會進錯編輯器。只要在 <code class=\"language-text\">.bashrc</code> 中加入以下兩行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">EDITOR</span><span class=\"token operator\">=</span>vim\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">VISUAL</span><span class=\"token operator\">=</span>vim</code></pre></div>\n<h2>變更 rc file 後馬上生效</h2>\n<p><code class=\"language-text\">source ~/.bashrc</code></p>\n<h2>返回上一個路徑</h2>\n<p><code class=\"language-text\">cd -</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token builtin class-name\">cd</span> /etc\n\n/etc$ <span class=\"token builtin class-name\">cd</span> /var\n\n/var$ <span class=\"token builtin class-name\">cd</span> -\n\n/etc$ <span class=\"token builtin class-name\">cd</span> ~\n\n~$</code></pre></div>\n<h2>把路徑放進 Stack</h2>\n<p><code class=\"language-text\">pushd</code> 把現在的路徑推進 Stack，並 cd 到後面的參數</p>\n<p><code class=\"language-text\">popd</code> 拿出來</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/etc$ <span class=\"token function\">pushd</span> /var\n/var /etc\n\n/var$ <span class=\"token function\">pushd</span> /home\n/home /var /etc\n\n/home$ <span class=\"token builtin class-name\">cd</span> ~\n\n~$ <span class=\"token builtin class-name\">cd</span> /var/\n\n~$ <span class=\"token builtin class-name\">cd</span> /var/lib/\n\n/var/lib$ <span class=\"token function\">popd</span>\n/var /etc\n\n/var$ <span class=\"token function\">popd</span>\n/etc\n\n/etc$</code></pre></div>\n<h2>把工作放到背景</h2>\n<p><code class=\"language-text\">ctrl + z</code></p>\n<p>注意，這會暫停整個 process，並不是放到背景執行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">vim</span> /proc/cpuinfo\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 <span class=\"token function\">vim</span> /proc/cpuinfo\n\n~$</code></pre></div>\n<p><code class=\"language-text\">fg</code> (foreground) 把放到背景的 process 取回前景繼續執行</p>\n<p>Shell 結束時，所有被暫停的 process 也會一起被殺掉</p>\n<h2>重複上一個 Command</h2>\n<p><code class=\"language-text\">!!</code> 就是代表上一個 Command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token builtin class-name\">echo</span> HI\nHI\n\n~$ <span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n<span class=\"token builtin class-name\">echo</span> HI\nHI\n\n~$</code></pre></div>\n<p>這是可以組合技的：忘記打 sudo 就 <code class=\"language-text\">sudo !!</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">apt</span> update\nReading package lists<span class=\"token punctuation\">..</span>. Done\nE: Could not <span class=\"token function\">open</span> lock <span class=\"token function\">file</span> /var/lib/apt/lists/lock - <span class=\"token function\">open</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13</span>: Permission denied<span class=\"token punctuation\">)</span>\nE: Unable to lock directory /var/lib/apt/lists/\n\n~$ <span class=\"token function\">sudo</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\nHit:1 http://archive.ubuntu.com/ubuntu jammy InRelease\nGet:2 http://security.ubuntu.com/ubuntu jammy-security InRelease <span class=\"token punctuation\">[</span><span class=\"token number\">110</span> kB<span class=\"token punctuation\">]</span>\nGet:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease <span class=\"token punctuation\">[</span><span class=\"token number\">109</span> kB<span class=\"token punctuation\">]</span>\nGet:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease <span class=\"token punctuation\">[</span><span class=\"token number\">99.8</span> kB<span class=\"token punctuation\">]</span>\nGet:5 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages <span class=\"token punctuation\">[</span><span class=\"token number\">230</span> kB<span class=\"token punctuation\">]</span>\nGet:6 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages <span class=\"token punctuation\">[</span><span class=\"token number\">143</span> kB<span class=\"token punctuation\">]</span>\nFetched <span class=\"token number\">693</span> kB <span class=\"token keyword\">in</span> 2s <span class=\"token punctuation\">(</span><span class=\"token number\">328</span> kB/s<span class=\"token punctuation\">)</span>\nReading package lists<span class=\"token punctuation\">..</span>. Done\nBuilding dependency tree<span class=\"token punctuation\">..</span>. Done\nReading state information<span class=\"token punctuation\">..</span>. Done\n<span class=\"token number\">1</span> package can be upgraded. Run <span class=\"token string\">'apt list --upgradable'</span> to see it.\n~$</code></pre></div>\n<h2>sudo 不輸入密碼</h2>\n<p>只要讓下面那一行出現在 <code class=\"language-text\">/etc/sudoers</code> 中就可以：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">%sudo ALL=(ALL) NOPASSWD:ALL</code></pre></div>\n<p>或是直接輸入 (with root)：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> ~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'%sudo ALL=(ALL) NOPASSWD:ALL'</span> <span class=\"token operator\">>></span> /etc/sudoers</code></pre></div>\n<h2>搜尋打過的指令</h2>\n<p><code class=\"language-text\">ctrl + r</code>，然後打上部分記得的指令，就會自動補完</p>\n<h2>輸出導進 less</h2>\n<p>有時指令輸出很長，需要翻頁顯示時，可以用 <code class=\"language-text\">|</code> 導入 <code class=\"language-text\">less</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">cat</span> /proc/cpuinfo <span class=\"token operator\">|</span> <span class=\"token function\">less</span></code></pre></div>\n<h2>清掉一整行</h2>\n<p><code class=\"language-text\">ctrl + u</code> 把還沒 enter 的指令清掉</p>\n<h2>光標到最前或最後</h2>\n<p><code class=\"language-text\">ctrl + a</code> 移動光標到最前</p>\n<p><code class=\"language-text\">ctrl + e</code> 移動光標到最後</p>\n<h2>連續執行指令</h2>\n<p><code class=\"language-text\">;</code> 不管前面有沒有成功，都執行後面的命令</p>\n<p><code class=\"language-text\">&amp;&amp;</code> 要前面得執行成功，才執行後面的命令</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">ls</span> / <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ <span class=\"token function\">ls</span> / <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ <span class=\"token function\">ls</span> /no_such_dir <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> hi\nls: cannot access <span class=\"token string\">'/no_such_dir'</span><span class=\"token builtin class-name\">:</span> No such <span class=\"token function\">file</span> or directory\nhi\n\n~$ <span class=\"token function\">ls</span> /no_such_dir <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> hi\nls: cannot access <span class=\"token string\">'/no_such_dir'</span><span class=\"token builtin class-name\">:</span> No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://youtube.com/watch?v=AVXYq8aL47Q\">18 Commands That Will Change The Way You Use Linux Forever</a></li>\n</ul>","rawMarkdownBody":"\n記錄一些我怕忘的 Command Line 技巧，當作字典用。\n\n<!--more-->\n\n## 清螢幕\n\n`clear` 或是 `ctrl + L`\n\n## 家目錄\n\n`~` 波浪符就是代表家目錄\n\n```bash\n/etc$ cd ~\n\n~$\n```\n\n## 預設文字編輯器\n\n有時預設的文字編輯器不是 vim，而是 `nano` 或是 `emacs`，在打 git 指令時，會進錯編輯器。只要在 `.bashrc` 中加入以下兩行：\n\n```bash\nexport EDITOR=vim\nexport VISUAL=vim\n```\n\n## 變更 rc file 後馬上生效\n\n`source ~/.bashrc`\n\n## 返回上一個路徑\n\n`cd -`\n\n```bash\n~$ cd /etc\n\n/etc$ cd /var\n\n/var$ cd -\n\n/etc$ cd ~\n\n~$\n```\n\n## 把路徑放進 Stack\n\n`pushd` 把現在的路徑推進 Stack，並 cd 到後面的參數\n\n`popd` 拿出來\n\n```bash\n/etc$ pushd /var\n/var /etc\n\n/var$ pushd /home\n/home /var /etc\n\n/home$ cd ~\n\n~$ cd /var/\n\n~$ cd /var/lib/\n\n/var/lib$ popd\n/var /etc\n\n/var$ popd\n/etc\n\n/etc$\n```\n\n## 把工作放到背景\n\n`ctrl + z`\n\n注意，這會暫停整個 process，並不是放到背景執行\n\n```bash\n~$ vim /proc/cpuinfo\n\n[1]+  Stopped                 vim /proc/cpuinfo\n\n~$\n```\n\n`fg` (foreground) 把放到背景的 process 取回前景繼續執行\n\nShell 結束時，所有被暫停的 process 也會一起被殺掉\n\n## 重複上一個 Command\n\n`!!` 就是代表上一個 Command\n\n```bash\n~$ echo HI\nHI\n\n~$ !!\necho HI\nHI\n\n~$\n```\n\n這是可以組合技的：忘記打 sudo 就 `sudo !!`\n\n```bash\n~$ apt update\nReading package lists... Done\nE: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)\nE: Unable to lock directory /var/lib/apt/lists/\n\n~$ sudo !!\nsudo apt update\nHit:1 http://archive.ubuntu.com/ubuntu jammy InRelease\nGet:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]\nGet:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [109 kB]\nGet:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [99.8 kB]\nGet:5 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [230 kB]\nGet:6 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [143 kB]\nFetched 693 kB in 2s (328 kB/s)\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\n1 package can be upgraded. Run 'apt list --upgradable' to see it.\n~$\n```\n\n## sudo 不輸入密碼\n\n只要讓下面那一行出現在 `/etc/sudoers` 中就可以：\n\n```text\n%sudo ALL=(ALL) NOPASSWD:ALL\n```\n\n或是直接輸入 (with root)：\n\n```bash\n(root) ~$ echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n```\n\n## 搜尋打過的指令\n\n`ctrl + r`，然後打上部分記得的指令，就會自動補完\n\n## 輸出導進 less\n\n有時指令輸出很長，需要翻頁顯示時，可以用 `|` 導入 `less`\n\n```bash\n~$ cat /proc/cpuinfo | less\n```\n\n## 清掉一整行\n\n`ctrl + u` 把還沒 enter 的指令清掉\n\n## 光標到最前或最後\n\n`ctrl + a` 移動光標到最前\n\n`ctrl + e` 移動光標到最後\n\n## 連續執行指令\n\n`;` 不管前面有沒有成功，都執行後面的命令\n\n`&&` 要前面得執行成功，才執行後面的命令\n\n```bash\n~$ ls / ; echo hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ ls / && echo hi\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nhi\n\n~$ ls /no_such_dir ; echo hi\nls: cannot access '/no_such_dir': No such file or directory\nhi\n\n~$ ls /no_such_dir && echo hi\nls: cannot access '/no_such_dir': No such file or directory\n```\n\n## Reference\n\n- [18 Commands That Will Change The Way You Use Linux Forever](https://youtube.com/watch?v=AVXYq8aL47Q)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Linux/command tips.md","excerpt":"記錄一些我怕忘的 Command Line 技巧，當作字典用。 清螢幕  或是  家目錄  波浪符就是代表家目錄 預設文字編輯器 有時預設的文字編輯器不是 vim，而是  或是 ，在打 git 指令時，會進錯編輯器。只要在  中加入以下兩行： 變更 rc file 後馬上生效  返回上一個路徑  把路徑放進 Stack  把現在的路徑推進 Stack，並 cd 到後面的參數  拿出來 把工作放到…","frontmatter":{"title":"一些 Command Line 技巧","date":"2022-05-25T15:27:30.000Z","draft":false,"tags":["linux","ubuntu","mac","command","max"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9dfac9e4-1de1-43dc-eead-381301a1b500/public","description":null}}},{"node":{"id":"22c3b17c-4301-5fb4-9145-fa9a71fdb584","html":"<p>為什麼要在 Container 中 Coding？因爲開發中最大的難題總是在環境建置，好不容易建置好環境，要寫下個專案時，因為電腦已經髒兮兮，安裝環境時就會容易衝到版本，而造成惡性循環，環境建置一次比一次困難，最後發現重灌電腦最快。在 Container 中 Coding 就可以簡單用完即丟，每次都可以在乾淨的電腦安裝環境，裝任何東西也不怕把本機弄髒，在 Windows 上更可以簡單的在 Linux 中開發。</p>\n<!--more-->\n<p>在 Container 裡 Coding 已經不是什麼新鮮事，VSCode 的官方就有提供 <a href=\"https://code.visualstudio.com/docs/remote/containers\">Developing inside a Container</a> 的官方文件，可以用本機的 Docker 快速的產生 Container 並且在裡面開發。壞處就是只能在本機連線，如果有多台電腦想要共同開發的需求，就只好用今天要介紹的方式，用 SSH 連入 Container，只要連得上 SSH 就可以開發，開發時也不用被侷限在一台電腦的 Docker 上。當然，最大的缺點就是要有一台一直運作著 Docker 的 Server 可以讓你隨時連線。GitHub 有一個 <a href=\"https://github.com/features/codespaces\">Codespace</a> 的功能，就是很類似的想法，Code in Cloud，但畢竟是企業的收費服務，我之前有抽到預覽版，到現在都可以免費使用，是真的很方便的功能，也就是他的方便，讓我想研究如何自己架類似的服務。</p>\n<h2>Dockerfile</h2>\n<p>簡單來說就是創建一個已經被預裝 SSH Server 的 Linux，我們今天就用 Ubuntu，然後順便預裝一些開發中常會用到套件，像是 <code class=\"language-text\">git</code>, <code class=\"language-text\">vim</code> 等等。</p>\n<blockquote>\n<p>如果想跳過這步驟，用我創建好的 Image 可以拉到下一個章節去看</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> UBUNTU_VERSION=latest</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:<span class=\"token variable\">${UBUNTU_VERSION}</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DEBIAN_FRONTEND noninteractive</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt update <span class=\"token operator\">\\</span>\n    &amp;&amp; apt install -y openssh-server ssh sudo git vim <span class=\"token operator\">\\</span>\n    &amp;&amp; useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1000 ubuntu <span class=\"token operator\">\\</span>\n    &amp;&amp; echo <span class=\"token string\">\"ubuntu:ubuntu\"</span> | chpasswd <span class=\"token operator\">\\</span>\n    &amp;&amp; echo <span class=\"token string\">'%sudo ALL=(ALL) NOPASSWD:ALL'</span> >> /etc/sudoers <span class=\"token operator\">\\</span>\n    &amp;&amp; service ssh start</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 22</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"/usr/sbin/sshd\"</span>, <span class=\"token string\">\"-D\"</span>]</span></code></pre></div>\n<p>可以看到我把帳號密碼都設置為 <code class=\"language-text\">ubuntu</code>，然後讓 <code class=\"language-text\">sudo</code> 時可以不用密碼。然後安裝啟動 ssh service，最後開啟 22 port。用下面的 Docker 指令就可以創建自己的 Image：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> build -t ssh-ubuntu <span class=\"token builtin class-name\">.</span></code></pre></div>\n<h3>我構建好的 Image</h3>\n<p>我有創一個 GitHub Repo 放我的 Dockerfile，並用 GitHub Actions + Packages 來發布 Image，Image 名稱為 <code class=\"language-text\">ghcr.io/tonypepebear/ssh-dev-ubuntu</code>。</p>\n<p><a href=\"https://github.com/TonyPepeBear/ssh-dev-container/pkgs/container/ssh-dev-ubuntu\">Package 網址</a></p>\n<h2>啟動 Container 並 SSH 連入</h2>\n<p>啟動 Container 並把 22 Port 弄出來，我是映射到 8222：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run -dp <span class=\"token number\">8222</span>:22 ssh-ubuntu\n\n如果要用我的 Image：\n<span class=\"token function\">docker</span> run -dp <span class=\"token number\">8222</span>:22 ghcr.io/tonypepebear/ssh-dev-ubuntu</code></pre></div>\n<p>SSH 連入，詢問密碼就是 <code class=\"language-text\">ubuntu</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">ssh</span> -p <span class=\"token number\">8222</span> ubuntu@localhost</code></pre></div>\n<p>如果沒發生問題，到現在應該就可以順利的連到 Container 中。</p>\n<h2>VSCode SSH 連線</h2>\n<p>需要先在 VSCode 中安裝 Remote - SSH 套件，如圖：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/be8ec8dc-8900-4cbe-1587-45fa6f3f6500/public\" alt=\"img\"></p>\n<p>安裝完成後，點擊最左下角的 Remote 功能，再選擇 Connect to SSH Host，輸入 SSH 指令 <code class=\"language-text\">ssh -p 8222 ubuntu@localhost</code>，就可以順利連到 Container 中。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/960ea18c-82c7-4ce1-73d3-8ff092f2b000/public\" alt=\"img\"></p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/814b9dac-f39d-4d07-1095-2d280cd5e300/public\" alt=\"img\"></p>\n<h2>後記</h2>\n<p>其實我也不會每個專案都新增一個新的 Container，而是用到我受不了或衝突到後，才創建一個新的，畢竟每次創新的 Container 也是有點麻煩，但是能讓我在安裝一些亂七八糟的環境 (就是在說你們 npm, pip) 時，可以大膽地按下去，不用擔心把電腦搞到受不了才是重點。希望大家在開發的路上可以更加順利。</p>\n<p>另外，VSCode 的 SSH 連線功能真的做的不錯，甚至可以 Port Forwarding，在開發網頁的時候不用在 Docker 中多 Forwarding 一個 Port，可以隨時用 VSCode Forwarding 到本機上。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://code.visualstudio.com/docs/remote/ssh\">Remote Development using SSH</a></li>\n</ul>","rawMarkdownBody":"\n為什麼要在 Container 中 Coding？因爲開發中最大的難題總是在環境建置，好不容易建置好環境，要寫下個專案時，因為電腦已經髒兮兮，安裝環境時就會容易衝到版本，而造成惡性循環，環境建置一次比一次困難，最後發現重灌電腦最快。在 Container 中 Coding 就可以簡單用完即丟，每次都可以在乾淨的電腦安裝環境，裝任何東西也不怕把本機弄髒，在 Windows 上更可以簡單的在 Linux 中開發。\n\n<!--more-->\n\n在 Container 裡 Coding 已經不是什麼新鮮事，VSCode 的官方就有提供 [Developing inside a Container](https://code.visualstudio.com/docs/remote/containers) 的官方文件，可以用本機的 Docker 快速的產生 Container 並且在裡面開發。壞處就是只能在本機連線，如果有多台電腦想要共同開發的需求，就只好用今天要介紹的方式，用 SSH 連入 Container，只要連得上 SSH 就可以開發，開發時也不用被侷限在一台電腦的 Docker 上。當然，最大的缺點就是要有一台一直運作著 Docker 的 Server 可以讓你隨時連線。GitHub 有一個 [Codespace](https://github.com/features/codespaces) 的功能，就是很類似的想法，Code in Cloud，但畢竟是企業的收費服務，我之前有抽到預覽版，到現在都可以免費使用，是真的很方便的功能，也就是他的方便，讓我想研究如何自己架類似的服務。\n\n## Dockerfile\n\n簡單來說就是創建一個已經被預裝 SSH Server 的 Linux，我們今天就用 Ubuntu，然後順便預裝一些開發中常會用到套件，像是 `git`, `vim` 等等。\n\n> 如果想跳過這步驟，用我創建好的 Image 可以拉到下一個章節去看\n\n```Dockerfile\nARG UBUNTU_VERSION=latest\n\nFROM ubuntu:${UBUNTU_VERSION}\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt update \\\n    && apt install -y openssh-server ssh sudo git vim \\\n    && useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1000 ubuntu \\\n    && echo \"ubuntu:ubuntu\" | chpasswd \\\n    && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \\\n    && service ssh start\n\nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n可以看到我把帳號密碼都設置為 `ubuntu`，然後讓 `sudo` 時可以不用密碼。然後安裝啟動 ssh service，最後開啟 22 port。用下面的 Docker 指令就可以創建自己的 Image：\n\n```shell\ndocker build -t ssh-ubuntu .\n```\n\n### 我構建好的 Image\n\n我有創一個 GitHub Repo 放我的 Dockerfile，並用 GitHub Actions + Packages 來發布 Image，Image 名稱為 `ghcr.io/tonypepebear/ssh-dev-ubuntu`。\n\n[Package 網址](https://github.com/TonyPepeBear/ssh-dev-container/pkgs/container/ssh-dev-ubuntu)\n\n## 啟動 Container 並 SSH 連入\n\n啟動 Container 並把 22 Port 弄出來，我是映射到 8222：\n\n```shell\ndocker run -dp 8222:22 ssh-ubuntu\n\n如果要用我的 Image：\ndocker run -dp 8222:22 ghcr.io/tonypepebear/ssh-dev-ubuntu\n```\n\nSSH 連入，詢問密碼就是 `ubuntu`：\n\n```shell\nssh -p 8222 ubuntu@localhost\n```\n\n如果沒發生問題，到現在應該就可以順利的連到 Container 中。\n\n## VSCode SSH 連線\n\n需要先在 VSCode 中安裝 Remote - SSH 套件，如圖：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/be8ec8dc-8900-4cbe-1587-45fa6f3f6500/public)\n\n安裝完成後，點擊最左下角的 Remote 功能，再選擇 Connect to SSH Host，輸入 SSH 指令 `ssh -p 8222 ubuntu@localhost`，就可以順利連到 Container 中。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/960ea18c-82c7-4ce1-73d3-8ff092f2b000/public)\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/814b9dac-f39d-4d07-1095-2d280cd5e300/public)\n\n## 後記\n\n其實我也不會每個專案都新增一個新的 Container，而是用到我受不了或衝突到後，才創建一個新的，畢竟每次創新的 Container 也是有點麻煩，但是能讓我在安裝一些亂七八糟的環境 (就是在說你們 npm, pip) 時，可以大膽地按下去，不用擔心把電腦搞到受不了才是重點。希望大家在開發的路上可以更加順利。\n\n另外，VSCode 的 SSH 連線功能真的做的不錯，甚至可以 Port Forwarding，在開發網頁的時候不用在 Docker 中多 Forwarding 一個 Port，可以隨時用 VSCode Forwarding 到本機上。\n\n## Reference\n\n- [Remote Development using SSH](https://code.visualstudio.com/docs/remote/ssh)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/VSCode/SSH Dev Container.md","excerpt":"為什麼要在 Container 中 Coding？因爲開發中最大的難題總是在環境建置，好不容易建置好環境，要寫下個專案時，因為電腦已經髒兮兮，安裝環境時就會容易衝到版本，而造成惡性循環，環境建置一次比一次困難，最後發現重灌電腦最快。在 Container 中 Coding 就可以簡單用完即丟，每次都可以在乾淨的電腦安裝環境，裝任何東西也不怕把本機弄髒，在 Windows 上更可以簡單的在 Lin…","frontmatter":{"title":"VSCode SSH 連入 Docker Container","date":"2022-05-21T14:07:16.000Z","draft":false,"tags":["vscode","ssh","docker"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/0f3867f8-dd79-482c-1f27-a7a166f7dc00/public","description":null}}}]}},"pageContext":{"limit":8,"skip":0,"numPages":4,"currentPage":1}},"staticQueryHashes":[]}