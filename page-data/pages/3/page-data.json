{"componentChunkName":"component---src-templates-article-list-page-template-tsx","path":"/pages/3","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"a9e11a01-abab-5de8-b3ae-abccff685c14","html":"<p>在本機與 GitHub 溝通最安全的方式就是透過 ssh，最大的好處就是不需要輸入帳號密碼來確認身分，也可以享受到 ssh 加密所提供的安全性。</p>\n<!--more-->\n<h2>ssh-keygen</h2>\n<p>要使用 ssh 非對稱加密，就會需要公鑰與私鑰，創建 ssh key 的方法就是 <code class=\"language-text\">ssh-keygen</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">user@66c0bf85e710:~$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/home/user/.ssh/id_rsa<span class=\"token punctuation\">)</span>:\nCreated directory <span class=\"token string\">'/home/user/.ssh'</span><span class=\"token builtin class-name\">.</span>\nEnter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:\nEnter same passphrase again:\nYour identification has been saved <span class=\"token keyword\">in</span> /home/user/.ssh/id_rsa\nYour public key has been saved <span class=\"token keyword\">in</span> /home/user/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:+UUuTN0YLUi2eh7HJoJvuy0whUuLvXIQejjPPTZ9gw4 user@66c0bf85e710\nThe key's randomart image is:\n+---<span class=\"token punctuation\">[</span>RSA <span class=\"token number\">3072</span><span class=\"token punctuation\">]</span>----+\n<span class=\"token operator\">|</span>         .o<span class=\"token punctuation\">..</span>.   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">..</span>o.+.  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>       <span class=\"token builtin class-name\">.</span>  o +<span class=\"token punctuation\">..</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token builtin class-name\">.</span> o<span class=\"token punctuation\">..</span><span class=\"token operator\">=</span> +     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>   o <span class=\"token operator\">=</span>.+S * *    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  + + *. <span class=\"token operator\">=</span> B     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">=</span> <span class=\"token assign-left variable\">oE</span><span class=\"token operator\">=</span>o.o      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    + Bo+oo      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>     + +++<span class=\"token punctuation\">..</span>     <span class=\"token operator\">|</span>\n+----<span class=\"token punctuation\">[</span>SHA256<span class=\"token punctuation\">]</span>-----+</code></pre></div>\n<p><code class=\"language-text\">ssh-keygen</code> 會問一些問題，最快的方式就是直接留白(保持預設)，一直按 enter 就可以看到已經在 <code class=\"language-text\">~/.ssh</code> 產生了兩個檔案：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">user@66c0bf85e710:~$ <span class=\"token function\">ls</span> -l ~/.ssh\ntotal <span class=\"token number\">8</span>\n-rw------- <span class=\"token number\">1</span> user user <span class=\"token number\">2602</span> Sep <span class=\"token number\">12</span> <span class=\"token number\">22</span>:42 id_rsa\n-rw-r--r-- <span class=\"token number\">1</span> user user  <span class=\"token number\">571</span> Sep <span class=\"token number\">12</span> <span class=\"token number\">22</span>:42 id_rsa.pub\nuser@66c0bf85e710:~$</code></pre></div>\n<p><code class=\"language-text\">id_rsa</code> 就是私鑰，而多個 pub 結尾的 <code class=\"language-text\">id_rsa.pub</code> 就是公鑰。私鑰請不要傳給任何人，公鑰則提供給 GitHub。可以用 cat 將公鑰顯示出來並複製他：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.714d829xbug0.png\" alt=\"image\"></p>\n<h2>把公鑰交給 GitHub</h2>\n<p>到 GitHub 的 Settings -> SSH and GPG keys -> New SSH key：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.5frveu05dt00.png\" alt=\"image\"></p>\n<p>把剛剛複製下來的公鑰貼上，Title 可以自己隨便輸入或打這台電腦的名字：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.56vkhmb55ps0.png\" alt=\"image\"></p>\n<h2>測試連線</h2>\n<p>輸入下面命令就可以知道有沒有連線成功，如果有看到自己的使用者名稱，就代表已經完成 ssh 的認證：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre></div>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.5f99gnzo3ps0.png\" alt=\"image\"></p>\n<p>第一次連線可能會問要不要信任，輸入 <code class=\"language-text\">yes</code> 即可。</p>\n<blockquote>\n<p>如果覺得上面的方法麻煩，也可以直接創建一個私有 repo，然後試著 clone 和 push，就知道有沒有認證成功了。</p>\n</blockquote>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/testing-your-ssh-connection\">Testing your SSH connection</a></li>\n</ul>","rawMarkdownBody":"\n在本機與 GitHub 溝通最安全的方式就是透過 ssh，最大的好處就是不需要輸入帳號密碼來確認身分，也可以享受到 ssh 加密所提供的安全性。\n\n<!--more-->\n\n## ssh-keygen\n\n要使用 ssh 非對稱加密，就會需要公鑰與私鑰，創建 ssh key 的方法就是 `ssh-keygen`：\n\n```shell\nuser@66c0bf85e710:~$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/user/.ssh/id_rsa):\nCreated directory '/home/user/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/user/.ssh/id_rsa\nYour public key has been saved in /home/user/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:+UUuTN0YLUi2eh7HJoJvuy0whUuLvXIQejjPPTZ9gw4 user@66c0bf85e710\nThe key's randomart image is:\n+---[RSA 3072]----+\n|         .o...   |\n|         ..o.+.  |\n|       .  o +..  |\n|    . o..= +     |\n|   o =.+S * *    |\n|  + + *. = B     |\n|   = oE=o.o      |\n|    + Bo+oo      |\n|     + +++..     |\n+----[SHA256]-----+\n```\n\n`ssh-keygen` 會問一些問題，最快的方式就是直接留白(保持預設)，一直按 enter 就可以看到已經在 `~/.ssh` 產生了兩個檔案：\n\n```shell\nuser@66c0bf85e710:~$ ls -l ~/.ssh\ntotal 8\n-rw------- 1 user user 2602 Sep 12 22:42 id_rsa\n-rw-r--r-- 1 user user  571 Sep 12 22:42 id_rsa.pub\nuser@66c0bf85e710:~$\n```\n\n`id_rsa` 就是私鑰，而多個 pub 結尾的 `id_rsa.pub` 就是公鑰。私鑰請不要傳給任何人，公鑰則提供給 GitHub。可以用 cat 將公鑰顯示出來並複製他：\n\n![image](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.714d829xbug0.png)\n\n## 把公鑰交給 GitHub\n\n到 GitHub 的 Settings -> SSH and GPG keys -> New SSH key：\n\n![image](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.5frveu05dt00.png)\n\n把剛剛複製下來的公鑰貼上，Title 可以自己隨便輸入或打這台電腦的名字：\n\n![image](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.56vkhmb55ps0.png)\n\n## 測試連線\n\n輸入下面命令就可以知道有沒有連線成功，如果有看到自己的使用者名稱，就代表已經完成 ssh 的認證：\n\n```shell\nssh -T git@github.com\n```\n\n![image](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210912/image.5f99gnzo3ps0.png)\n\n第一次連線可能會問要不要信任，輸入 `yes` 即可。\n\n> 如果覺得上面的方法麻煩，也可以直接創建一個私有 repo，然後試著 clone 和 push，就知道有沒有認證成功了。\n\n## Reference\n\n- [Testing your SSH connection](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/testing-your-ssh-connection)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Git/github ssh.md","excerpt":"在本機與 GitHub 溝通最安全的方式就是透過 ssh，最大的好處就是不需要輸入帳號密碼來確認身分，也可以享受到 ssh 加密所提供的安全性。 ssh-keygen 要使用 ssh 非對稱加密，就會需要公鑰與私鑰，創建 ssh key 的方法就是 ：  會問一些問題，最快的方式就是直接留白(保持預設)，一直按 enter 就可以看到已經在  產生了兩個檔案：  就是私鑰，而多個 pub 結尾的…","frontmatter":{"title":"GitHub SSH","date":"2021-09-12T14:32:19.000Z","draft":false,"tags":["git","github","ssh"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/8fdd1b8a-21b2-4d15-9947-a6bdcc6f1000/public","description":"在本機與 GitHub 溝通最安全的方式就是透過 ssh，最大的好處就是不需要輸入帳號密碼來確認身分，也可以享受到 ssh 加密所提供的安全性。"}}},{"node":{"id":"6768d0b8-3c0c-5392-8320-9c2443f08519","html":"<p>紀錄一下我的 <a href=\"https://github.com/TonyPepeBear/cloud-ide-docker\">Cloud IDE Docker</a> 使用方法。</p>\n<!--more-->\n<h2>Pycharm Community</h2>\n<p><a href=\"https://hub.docker.com/r/tonypepe/pycharmc\">Docker Hub</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -dp <span class=\"token number\">8887</span>:8887 tonypepe/pycharmc</code></pre></div>","rawMarkdownBody":"\n紀錄一下我的 [Cloud IDE Docker](https://github.com/TonyPepeBear/cloud-ide-docker) 使用方法。\n\n<!--more-->\n\n## Pycharm Community\n\n[Docker Hub](https://hub.docker.com/r/tonypepe/pycharmc)\n\n```bash\ndocker run -dp 8887:8887 tonypepe/pycharmc\n```\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Dev/Cloud Ide Docker.md","excerpt":"紀錄一下我的 Cloud IDE Docker 使用方法。 Pycharm Community Docker Hub","frontmatter":{"title":"Cloud IDE Docker","date":"2021-08-30T08:13:47.000Z","draft":false,"tags":["ide","docker","jetbrains"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/87cfccae-9904-4391-0e52-2b001fffd500/public","description":null}}},{"node":{"id":"b04ee4c4-22aa-519f-a77a-6ab113d7d6a2","html":"<p>Docker 是一個虛擬化技術，可以將我們編寫好的程式包裹成一個小的「容器」，再發佈到伺服器上。Docker 解決了困擾程式界多年來的環境問題，只要伺服器安裝了 Docker 就可以確保一定可以執行服務。</p>\n<!--more-->\n<h2>Docker v.s. VM</h2>\n<p>入門 Docker 最常見的問題就是，Docker 和 VM 差在哪裡？這個問題不難理解，VM 「虛擬機」，顧名思義是虛擬化「硬體」。而 Docker 則是只虛擬化作業系統，或是稱作「軟體」。</p>\n<p>大家都應該知道每創建一個虛擬機，都會耗費掉數分鐘的時間，若還要安裝環境，那耗費的時間則會相當可觀，也會耗費掉相當大的硬體資源。Docker 只虛擬化軟體的優勢，就是可以在幾秒內就啟動服務，耗費資源也相當少，還省去了建立環境的時間。</p>\n<h2>Docker Hub</h2>\n<blockquote>\n<p>Git 有 GitHub，Docker 有 Docker Hub</p>\n</blockquote>\n<p>Docker Hub 是 Docker 官方用來存放 Image 的倉庫 (Registry)，使用者也可以自架 Registry，但是如果未指定 Registry，Docker 預設會去找 Docker Hub 上的 Image。</p>\n<h2>Image</h2>\n<p>Image 通常可以是一個系統，也可以是一個已經安裝好特定執行環境 (像是 JAVA) 的系統。系統部分最常見的會是用 alpine linux，這是一個非常小的項目，只有一個系統，可以讓你在幾秒內就可以啟動服務，許多執行環境也會建構在這個系統上。現在可以先去 Docker Hub 上看看幾個前幾名的 Image，大概就會比較清楚 Image 的功用。</p>\n<p>Docker Image 可以由下列幾方式取得：</p>\n<ul>\n<li>從 Docker Hub 上下載</li>\n<li>由 Dockerfile 構建</li>\n<li>從其他電腦 import</li>\n</ul>\n<h2>Container</h2>\n<p>Docker 用 Image 創建 Container，也就是說，Container 是 Image 的實例，Container 基本上就是一個完整的作業系統，可以執行任何的程式。</p>\n<h2>Docker Run</h2>\n<p>我們簡單創建一個 Ubuntu 的 Container，並且啟動它：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run ubuntu</code></pre></div>\n<p>執行後可以看到 Docker 自動從 Docker Hub 上下載 Ubuntu 的 Image，但是開始執行後卻甚麼都沒發生就結束了。這是因為 Ubuntu 的 Image 預設是啟動一個 Shell，如果沒有 Attach 到 Sheel 上，Container 馬上就結束了。</p>\n<p>所以如果我們要 Attach 到 Ubuntu 的 Shell 上，可以這樣執行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -it ubuntu</code></pre></div>\n<p>執行應該就會看到我們到 ubuntu 的 Shell 裡。</p>\n<h2>啟動一個網頁服務</h2>\n<p>Nginx 有官方的 Hello Image，可以更清楚的看到 Container 有在執行 Nginx 服務。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -p <span class=\"token number\">8080</span>:80 -d nginxdemos/hello</code></pre></div>\n<p>上面多了一個 <code class=\"language-text\">-p</code> 的參數，後面跟上 <code class=\"language-text\">8080:80</code>，意思是本機的 8080 Port 對到容器的 80 Port，這樣就可以讓我們在本機的 8080 Port 上看到 Nginx 的網頁了。</p>\n<h2>列出、刪除容器</h2>\n<p>列出正在執行的容器：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre></div>\n<p>列出所有容器，包含已經停止的容器：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -a</code></pre></div>\n<p>刪除容器，若是尚未停止的容器則無法刪除：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>container_id<span class=\"token operator\">></span></code></pre></div>\n<p>加上 <code class=\"language-text\">-f</code> 參數，可強制刪除執行中的容器：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> -f <span class=\"token operator\">&lt;</span>container_id<span class=\"token operator\">></span></code></pre></div>\n<p>強制刪除所有容器：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span></code></pre></div>\n<h2>創建自己的 Image</h2>\n<p>要教 Docker 怎麼創建 Image，需要先建立一個 <code class=\"language-text\">Dockerfile</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:latest</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt update <span class=\"token operator\">\\</span>\n    &amp;&amp; apt install vim git -y <span class=\"token operator\">\\</span>\n    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"/bin/bash\"</span>]</span></code></pre></div>\n<p>Build Image:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t my-ubuntu <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>注意上面的指令的最後面有一個 <code class=\"language-text\">.</code>，代表 Build 這個目錄。<code class=\"language-text\">-t</code> 的參數則是 Image 的名稱，或是稱作 Tag。</p>","rawMarkdownBody":"\nDocker 是一個虛擬化技術，可以將我們編寫好的程式包裹成一個小的「容器」，再發佈到伺服器上。Docker 解決了困擾程式界多年來的環境問題，只要伺服器安裝了 Docker 就可以確保一定可以執行服務。\n\n<!--more-->\n\n## Docker v.s. VM\n\n入門 Docker 最常見的問題就是，Docker 和 VM 差在哪裡？這個問題不難理解，VM 「虛擬機」，顧名思義是虛擬化「硬體」。而 Docker 則是只虛擬化作業系統，或是稱作「軟體」。\n\n大家都應該知道每創建一個虛擬機，都會耗費掉數分鐘的時間，若還要安裝環境，那耗費的時間則會相當可觀，也會耗費掉相當大的硬體資源。Docker 只虛擬化軟體的優勢，就是可以在幾秒內就啟動服務，耗費資源也相當少，還省去了建立環境的時間。\n\n## Docker Hub\n\n> Git 有 GitHub，Docker 有 Docker Hub\n\nDocker Hub 是 Docker 官方用來存放 Image 的倉庫 (Registry)，使用者也可以自架 Registry，但是如果未指定 Registry，Docker 預設會去找 Docker Hub 上的 Image。\n\n## Image\n\nImage 通常可以是一個系統，也可以是一個已經安裝好特定執行環境 (像是 JAVA) 的系統。系統部分最常見的會是用 alpine linux，這是一個非常小的項目，只有一個系統，可以讓你在幾秒內就可以啟動服務，許多執行環境也會建構在這個系統上。現在可以先去 Docker Hub 上看看幾個前幾名的 Image，大概就會比較清楚 Image 的功用。\n\nDocker Image 可以由下列幾方式取得：\n\n- 從 Docker Hub 上下載\n- 由 Dockerfile 構建\n- 從其他電腦 import\n\n## Container\n\nDocker 用 Image 創建 Container，也就是說，Container 是 Image 的實例，Container 基本上就是一個完整的作業系統，可以執行任何的程式。\n\n## Docker Run\n\n我們簡單創建一個 Ubuntu 的 Container，並且啟動它：\n\n```bash\ndocker run ubuntu\n```\n\n執行後可以看到 Docker 自動從 Docker Hub 上下載 Ubuntu 的 Image，但是開始執行後卻甚麼都沒發生就結束了。這是因為 Ubuntu 的 Image 預設是啟動一個 Shell，如果沒有 Attach 到 Sheel 上，Container 馬上就結束了。\n\n所以如果我們要 Attach 到 Ubuntu 的 Shell 上，可以這樣執行：\n\n```bash\ndocker run -it ubuntu\n```\n\n執行應該就會看到我們到 ubuntu 的 Shell 裡。\n\n## 啟動一個網頁服務\n\nNginx 有官方的 Hello Image，可以更清楚的看到 Container 有在執行 Nginx 服務。\n\n```bash\ndocker run -p 8080:80 -d nginxdemos/hello\n```\n\n上面多了一個 `-p` 的參數，後面跟上 `8080:80`，意思是本機的 8080 Port 對到容器的 80 Port，這樣就可以讓我們在本機的 8080 Port 上看到 Nginx 的網頁了。\n\n## 列出、刪除容器\n\n列出正在執行的容器：\n\n```bash\ndocker ps\n```\n\n列出所有容器，包含已經停止的容器：\n\n```bash\ndocker ps -a\n```\n\n刪除容器，若是尚未停止的容器則無法刪除：\n\n```bash\ndocker rm <container_id>\n```\n\n加上 `-f` 參數，可強制刪除執行中的容器：\n\n```bash\ndocker rm -f <container_id>\n```\n\n強制刪除所有容器：\n\n```bash\ndocker rm $(docker ps -aq)\n```\n\n## 創建自己的 Image\n\n要教 Docker 怎麼創建 Image，需要先建立一個 `Dockerfile`：\n\n```dockerfile\nFROM ubuntu:latest\n\nRUN apt update \\\n    && apt install vim git -y \\\n    && rm -rf /var/lib/apt/lists/*\n\nCMD [\"/bin/bash\"]\n```\n\nBuild Image:\n\n```bash\ndocker build -t my-ubuntu .\n```\n\n注意上面的指令的最後面有一個 `.`，代表 Build 這個目錄。`-t` 的參數則是 Image 的名稱，或是稱作 Tag。\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Docker/docker.md","excerpt":"Docker 是一個虛擬化技術，可以將我們編寫好的程式包裹成一個小的「容器」，再發佈到伺服器上。Docker 解決了困擾程式界多年來的環境問題，只要伺服器安裝了 Docker 就可以確保一定可以執行服務。 Docker v.s. VM 入門 Docker 最常見的問題就是，Docker 和 VM 差在哪裡？這個問題不難理解，VM 「虛擬機」，顧名思義是虛擬化「硬體」。而 Docker 則是只虛擬…","frontmatter":{"title":"Docker","date":"2021-08-25T18:31:57.000Z","draft":false,"tags":["docker"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/a45b7e65-d6dd-4ef5-23b4-44e2090c5b00/public","description":"Docker 是一個虛擬化技術，可以將我們編寫好的程式包裹成一個小的「容器」，再發佈到伺服器上。Docker 解決了困擾程式界多年來的環境問題，只要伺服器安裝了 Docker 就可以確保一定可以執行服務。"}}},{"node":{"id":"0328ae6c-1fa1-50d8-aec1-a55575fe59b5","html":"<p>Cloudflare 真的是佛心公司，提供免費的 DNS、DDoS 防護，還可以拿來託管靜態網頁，而今天是介紹他們公司的 Tunnel，這個服務可以將本地電腦的特定 port 開放到網路上，而且完全免費，在台灣的速度也不慢，真的很佛，幾乎等於拿到免費的 IPv4。</p>\n<p>我覺得目前的缺點就是網路上相關的資料比較少，遇到問題很難找到資料參考，因為他其實主要是 Cloudflare 的一項零信任服務，目標客群都是一些厲害的網管，所以官方寫的文件也都很深奧，如果是新手可能會頭昏眼花。</p>\n<!--more-->\n<p>這一項服務可以先不用帳號就能試用，不過就不能自訂 Domain，我會先介紹免登入的，再介紹要登入的。第一步還是要在本地先安裝環境。</p>\n<h2>安裝 cloudflared</h2>\n<h3>全系統適用</h3>\n<p>注意 Cloudflare 後面多了一個 <code class=\"language-text\">d</code>，這是他連上 Tunnel 的必要程式，是用 Go 編寫，安裝方式就是到<a href=\"https://github.com/cloudflare/cloudflared/releases\">官方 Github</a>下載符合自己環境的執行檔。</p>\n<h3>macOS</h3>\n<p>mac 可以用 Homebrew 安裝：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">brew install cloudflare/cloudflare/cloudflared</code></pre></div>\n<h3>Windows</h3>\n<p>Windows 永遠是最麻煩的，下載完執行檔後，隨便丟到一個資料夾，然後加到 PATH 裡。</p>\n<h3>Update</h3>\n<p>要更新這個執行檔，只要 Run 下面的指令，另外，Windows 不支援自動更新，要更新就只能手動下載覆蓋：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared update</code></pre></div>\n<h2>免登入測試 Tunnel</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared tunnel --url http://localhost:8080</code></pre></div>\n<p>執行上面的指令，就可以將本地電腦的 8080 port 用 http 公開到網路上，應該會看到輸出中會給一串個 <code class=\"language-text\">*-*-*.trycloudflare.com</code> 的網址，現在只要訪問那個網址，就可以發現本地的網頁已經可以從全網連到，不需註冊，也不用設定複雜的 Domain，還不限流量。</p>\n<h2>登入 Cloudflare</h2>\n<p>第一步就是先登入 Cloudflare 的帳號，也要有一個已經託管給 Cloudflare 的 Domain：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared tunnel login</code></pre></div>\n<p>執行這個命令後，應該會跳出瀏覽器授權，如果沒有跳出，就手動複製提供的授權網址登入 Cloudflare 帳號。</p>\n<h2>創建並使用 Tunnel</h2>\n<p>登入完成後就可以開始創建通道，創建只會在本地產生一些文件，並不會有任何連線的動作，可以放心執行：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared tunnel create &lt;Name&gt;</code></pre></div>\n<p>創建完成後，Cloudflare 會給一組 UUID，可以看一下有沒有創建成功：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared tunnel list</code></pre></div>\n<p>如果要刪除就是 Delete：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared tunnel delete &lt;Name or UUID&gt;</code></pre></div>\n<h2>DNS 設定</h2>\n<p>在創建 Tunnel 後，Cloudflare 會將剛剛創建隧道時產生的 UUID 綁定到 <code class=\"language-text\">&lt;UUID>.cfargotunnel.com</code> 這個 Domain，不過 Cloudflare 會擋掉用這個 Domain 直接連線的流量，所以我們要把我們的 Domain 新增一個 CNAME 紀錄，把流量往這邊導。</p>\n<p>有兩個方法可以設定 CNAME，一個是自己去 Cloudflare 的官網設定：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210813165733.png\" alt=\"img\"></p>\n<p>另一個是直接用指令設定，快又方便，把後面的 domain 改成自己想要綁定的：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared tunnel route dns &lt;Name or UUID&gt; test.example.com</code></pre></div>\n<p>打完後如果不放心，還是可以自己到 Cloudflare 的 Dns 設定看一下有沒有設定完成，應該會看到跟上圖一樣產生一個 CNAME Record。</p>\n<h2>Tunnel Config</h2>\n<p>下面是最簡單的 Config 範例，這是一個 <code class=\"language-text\">yml</code> 檔案：</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">tunnel</span><span class=\"token punctuation\">:</span> &lt;Name<span class=\"token punctuation\">></span>\n\n<span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> test.example.com\n    <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> http_status<span class=\"token punctuation\">:</span><span class=\"token number\">404</span></code></pre></div>\n<p>上面會把 8080 的 HTTP 流量導到 <code class=\"language-text\">domain.example.com</code>，使用剛剛創建的 Tunnel。</p>\n<p>最後一行一定要有一個可以接受所有流量的 Service，不然服務會不能啟動，這裡全部往 404 導。</p>\n<h2>Run Tunnel</h2>\n<p>最後一步，加上 config 的參數，把剛剛的 yml 檔喂給 Cloudflare，就可以啟動通道了：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cloudflared tunnel --config test.yml run</code></pre></div>\n<h2>後記</h2>\n<p>這篇只介紹了如何創建一個 Http 的 Tunnel，如果要開其他的 TCP Port，還需要其他的設定，而且在 Client 端也會需要安裝 Cloudflared，所以我留到下一篇在介紹。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://developers.cloudflare.com/cloudflare-one/\">Cloudflare for Teams documentation</a></li>\n</ul>","rawMarkdownBody":"\nCloudflare 真的是佛心公司，提供免費的 DNS、DDoS 防護，還可以拿來託管靜態網頁，而今天是介紹他們公司的 Tunnel，這個服務可以將本地電腦的特定 port 開放到網路上，而且完全免費，在台灣的速度也不慢，真的很佛，幾乎等於拿到免費的 IPv4。\n\n我覺得目前的缺點就是網路上相關的資料比較少，遇到問題很難找到資料參考，因為他其實主要是 Cloudflare 的一項零信任服務，目標客群都是一些厲害的網管，所以官方寫的文件也都很深奧，如果是新手可能會頭昏眼花。\n\n<!--more-->\n\n這一項服務可以先不用帳號就能試用，不過就不能自訂 Domain，我會先介紹免登入的，再介紹要登入的。第一步還是要在本地先安裝環境。\n\n## 安裝 cloudflared\n\n### 全系統適用\n\n注意 Cloudflare 後面多了一個 `d`，這是他連上 Tunnel 的必要程式，是用 Go 編寫，安裝方式就是到[官方 Github](https://github.com/cloudflare/cloudflared/releases)下載符合自己環境的執行檔。\n\n### macOS\n\nmac 可以用 Homebrew 安裝：\n\n```sh\nbrew install cloudflare/cloudflare/cloudflared\n```\n\n### Windows\n\nWindows 永遠是最麻煩的，下載完執行檔後，隨便丟到一個資料夾，然後加到 PATH 裡。\n\n### Update\n\n要更新這個執行檔，只要 Run 下面的指令，另外，Windows 不支援自動更新，要更新就只能手動下載覆蓋：\n\n```sh\ncloudflared update\n```\n\n## 免登入測試 Tunnel\n\n```sh\ncloudflared tunnel --url http://localhost:8080\n```\n\n執行上面的指令，就可以將本地電腦的 8080 port 用 http 公開到網路上，應該會看到輸出中會給一串個 `*-*-*.trycloudflare.com` 的網址，現在只要訪問那個網址，就可以發現本地的網頁已經可以從全網連到，不需註冊，也不用設定複雜的 Domain，還不限流量。\n\n## 登入 Cloudflare\n\n第一步就是先登入 Cloudflare 的帳號，也要有一個已經託管給 Cloudflare 的 Domain：\n\n```sh\ncloudflared tunnel login\n```\n\n執行這個命令後，應該會跳出瀏覽器授權，如果沒有跳出，就手動複製提供的授權網址登入 Cloudflare 帳號。\n\n## 創建並使用 Tunnel\n\n登入完成後就可以開始創建通道，創建只會在本地產生一些文件，並不會有任何連線的動作，可以放心執行：\n\n```sh\ncloudflared tunnel create <Name>\n```\n\n創建完成後，Cloudflare 會給一組 UUID，可以看一下有沒有創建成功：\n\n```sh\ncloudflared tunnel list\n```\n\n如果要刪除就是 Delete：\n\n```sh\ncloudflared tunnel delete <Name or UUID>\n```\n\n## DNS 設定\n\n在創建 Tunnel 後，Cloudflare 會將剛剛創建隧道時產生的 UUID 綁定到 `<UUID>.cfargotunnel.com` 這個 Domain，不過 Cloudflare 會擋掉用這個 Domain 直接連線的流量，所以我們要把我們的 Domain 新增一個 CNAME 紀錄，把流量往這邊導。\n\n有兩個方法可以設定 CNAME，一個是自己去 Cloudflare 的官網設定：\n\n![img](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210813165733.png)\n\n另一個是直接用指令設定，快又方便，把後面的 domain 改成自己想要綁定的：\n\n```sh\ncloudflared tunnel route dns <Name or UUID> test.example.com\n```\n\n打完後如果不放心，還是可以自己到 Cloudflare 的 Dns 設定看一下有沒有設定完成，應該會看到跟上圖一樣產生一個 CNAME Record。\n\n## Tunnel Config\n\n下面是最簡單的 Config 範例，這是一個 `yml` 檔案：\n\n```yml\ntunnel: <Name>\n\ningress:\n  - hostname: test.example.com\n    service: http://localhost:8080\n  - service: http_status:404\n```\n\n上面會把 8080 的 HTTP 流量導到 `domain.example.com`，使用剛剛創建的 Tunnel。\n\n最後一行一定要有一個可以接受所有流量的 Service，不然服務會不能啟動，這裡全部往 404 導。\n\n## Run Tunnel\n\n最後一步，加上 config 的參數，把剛剛的 yml 檔喂給 Cloudflare，就可以啟動通道了：\n\n```sh\ncloudflared tunnel --config test.yml run\n```\n\n## 後記\n\n這篇只介紹了如何創建一個 Http 的 Tunnel，如果要開其他的 TCP Port，還需要其他的設定，而且在 Client 端也會需要安裝 Cloudflared，所以我留到下一篇在介紹。\n\n## Reference\n\n- [Cloudflare for Teams documentation](https://developers.cloudflare.com/cloudflare-one/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Web/Cloudflare Tunnel.md","excerpt":"Cloudflare 真的是佛心公司，提供免費的 DNS、DDoS 防護，還可以拿來託管靜態網頁，而今天是介紹他們公司的 Tunnel，這個服務可以將本地電腦的特定 port 開放到網路上，而且完全免費，在台灣的速度也不慢，真的很佛，幾乎等於拿到免費的 IPv4。 我覺得目前的缺點就是網路上相關的資料比較少，遇到問題很難找到資料參考，因為他其實主要是 Cloudflare 的一項零信任服務，目標…","frontmatter":{"title":"Cloudflare Tunnel","date":"2021-08-13T07:17:39.000Z","draft":false,"tags":["cloudflare","tunnel","teams","cloudflare-tunnel"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/00e85cf1-4c03-45ea-004c-f61e6216d400/public","description":"Cloudflare 真的是佛心公司，提供免費的 DNS、DDoS 防護，還可以拿來託管靜態網頁，而今天是介紹他們公司的 Tunnel，這個服務可以將本地電腦的特定 port 開放到網路上，而且完全免費，在台灣的速度也不慢，真的很佛，幾乎等於拿到免費的 IPv4。"}}},{"node":{"id":"acc7e2df-e6e5-5c7a-aa49-4f23527be703","html":"<p>簡單記錄我所認知的 A320 的一些程序。</p>\n<!--more-->\n<blockquote>\n<p>注意這些都不是標準程序，只是我自己亂理解的，也省去蠻多步驟，基本上就是能起讓飛機動起來，標準程序肯定是更複雜的。</p>\n</blockquote>\n<h2>啟動飛機前檢查</h2>\n<p><del>模擬器中跳過還是可以飛</del></p>\n<ol>\n<li>Engine Master 1 and 2 Switch -> OFF\n<ul>\n<li>主引擎 1, 2 都關閉</li>\n</ul>\n</li>\n<li>Engine Mode Selector -> NORM\n<ul>\n<li>引擎模式在 Normal 位置</li>\n</ul>\n</li>\n<li>Weather Radar -> OFF\n<ul>\n<li>關閉氣象雷達</li>\n</ul>\n</li>\n<li>Landing Gear -> Down\n<ul>\n<li>機輪放下</li>\n</ul>\n</li>\n<li>Wipers -> Both OFF\n<ul>\n<li>兩個雨刷都關閉</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/7e29f7e1-bf0b-44d4-7589-29286ed81b00/large\" alt=\"img\"></p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/ca5109ba-4baf-40e3-850e-ee4002882c00/large\" alt=\"img\"></p>\n<h2>啟動飛機</h2>\n<ol>\n<li>Batt 1 and 2 -> ON</li>\n<li>EXT Power -> ON\n<ul>\n<li>啟動外部電源</li>\n<li>這時應該可以看到所有儀表亮起</li>\n</ul>\n</li>\n<li>APU Fire Test\n<ul>\n<li>APU 滅火測試</li>\n</ul>\n</li>\n<li>APU Master and wait 3 sec -> ON\n<ul>\n<li>打開 APU 主開關，並等待 3 秒</li>\n</ul>\n</li>\n<li>APU START -> ON\n<ul>\n<li>發動 APU</li>\n</ul>\n</li>\n<li>Wait for APU START -> Green \"AVAIL\"\n<ul>\n<li>等 APU 發動完成</li>\n</ul>\n</li>\n<li>APU BLEED -> ON\n<ul>\n<li>開啟 APU 供給氣壓</li>\n</ul>\n</li>\n<li>EXT Power -> OFF\n<ul>\n<li>移除外部電源</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/bcc428a6-c065-4bc3-0d19-ad204b860700/large\" alt=\"img\"></p>\n<h2>Overhead Panel 上方儀表</h2>\n<p>基本上，由左至右，由下而上的檢查</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/4aa17d2f-419c-40e6-09f8-e31ca2833a00/large\" alt=\"img\"></p>\n<h3>左邊那排</h3>\n<ol>\n<li>CREW SUPPLY -> ON\n<ul>\n<li>打開組員氧氣供給</li>\n</ul>\n</li>\n<li>ADIRS 1, 2, 3 -> NAV\n<ul>\n<li>開啟三個慣性導航，需等待 6-7 分鐘校準</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/b25f2e34-5ff9-4534-4fc2-927961a5ce00/large\" alt=\"img\"></p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/16fb299e-1847-4767-8093-aa0d058cd400/large\" alt=\"img\"></p>\n<h3>中間那排</h3>\n<ol>\n<li>NAV &#x26; LOGO Light -> ON</li>\n<li>OVHD INTEG LT -> AS REQ.</li>\n<li>DOME LT -> AS REQ.</li>\n<li>ANN LT TEST</li>\n<li>EMER EXIT LT -> ARM</li>\n<li>SEAT BELTS -> ON</li>\n<li>NO SMOKING -> ON</li>\n<li>ALL PUMP -> ON</li>\n<li>ENG 1 FIRE TEST</li>\n<li>ENG 2 FIRE TEST</li>\n</ol>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/e5f05a70-bc36-4bc3-fff2-61f413e6b900/large\" alt=\"img\"></p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/613ca5d3-3519-4c5d-cb82-4f9371e1d500/large\" alt=\"img\"></p>\n<h3>右邊那排</h3>\n<p>基本上不用動</p>\n<h2>MCDU 飛行電腦</h2>\n<p>在等待導航校準時，來設定飛行電腦。設定飛行電腦有一個口訣：</p>\n<blockquote>\n<p>D > I > F > S > R > I > P > P</p>\n</blockquote>\n<ul>\n<li>DATA</li>\n<li>INIT A</li>\n<li>F-PLN</li>\n<li>SEC PLAN</li>\n<li>RAD NAV</li>\n<li>INIT B</li>\n<li>PREF</li>\n<li>PROG</li>\n</ul>\n<blockquote>\n<p>飛行電腦設定蠻複雜的，本文就先跳過詳細步驟，專注在冷操到起飛。</p>\n</blockquote>\n<h2>後推 and 啟動引擎前檢查</h2>\n<p>記得等 IRS 校準完後再後推。</p>\n<ol>\n<li>申請後推</li>\n<li>BECON Light -> ON\n<ul>\n<li>啟動 BECAON 燈</li>\n</ul>\n</li>\n<li>Trust Levers -> IDLE\n<ul>\n<li>確定推力桿在 IDLE</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/f3d16c92-7e28-4b76-c106-458211015c00/public\" alt=\"img\"></p>\n<p>在 MSFS 的 FlyByWire 中可以用旁邊的 FlyPad 申請後推。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/71f815a8-11e0-4d0b-38a5-2de486a4e000/public\" alt=\"img\"></p>\n<h2>啟動引擎</h2>\n<ol>\n<li>ENG MODE selector -> IGN/START\n<ul>\n<li>把 ENG MODE selector 轉到右邊的啟動引擎模式</li>\n</ul>\n</li>\n<li>ENGINE 2 START -> ON\n<ul>\n<li>啟動右邊的 2 號引擎</li>\n<li>我也不知道為甚麼都是先啟動 2 號引擎</li>\n<li>等待發動完成後再發動 1 號引擎</li>\n<li>發動時應監控引擎數據，19% N1, 68% N2, 520°C EGT, 290 kg/h FF，等待 2 號引擎 AVAIL 字樣出現</li>\n</ul>\n</li>\n<li>ENGINE 1 START -> ON\n<ul>\n<li>啟動左邊的 1 號引擎，重複第 2 步直到 1 號引擎 AVAIL 字樣出現</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/1e82de0e-18d0-402e-b279-780fe5f6b800/public\" alt=\"img\"></p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d164d67d-9afb-4bd6-2eb9-835d7fe24300/public\" alt=\"img\"></p>\n<h2>啟動引擎後</h2>\n<ol>\n<li>ENG MODE selectgor -> NORM\n<ul>\n<li>引擎模式轉回中間 NORM</li>\n</ul>\n</li>\n<li>APU Bleed -> OFF\n<ul>\n<li>關閉 APU 供氣</li>\n</ul>\n</li>\n<li>APU MASTER -> OFF\n<ul>\n<li>關閉 APU</li>\n</ul>\n</li>\n<li>FLAPS lever -> SET TAKEOFF POSITION\n<ul>\n<li>放出襟翼到起飛需要的位置</li>\n</ul>\n</li>\n</ol>\n<h2>滑行 Taxi</h2>\n<ol>\n<li>NOSE Light -> Taxi\n<ul>\n<li>開啟滑行燈</li>\n</ul>\n</li>\n<li>RWY TURN OFF -> ON\n<ul>\n<li>開啟脫離跑道燈 (轉彎燈)</li>\n</ul>\n</li>\n<li>PARK BRK -> OFF\n<ul>\n<li>關閉手煞車</li>\n</ul>\n</li>\n<li>AUTO BRK MAX -> ON\n<ul>\n<li>開啟最大自動煞車</li>\n</ul>\n</li>\n</ol>\n<h2>起飛</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCDKKDx4mNVI7vONL1vqTx7g\">教官我想飛</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCOHc8xzWD25Nn-snDBJUMGQ\">機師阿楷</a></li>\n<li><a href=\"https://github.com/flybywiresim/manuals/blob/master/pdf/A32NX%20Documentation/FBW%20A32NX%20Checklist.pdf\">FBW A32NX Checklist.pdf</a></li>\n<li><a href=\"https://github.com/flybywiresim/manuals/blob/master/pdf/A32NX%20Documentation/FBW%20A32NX%20SOP.pdf\">FBW A32NX SOP.pdf</a></li>\n</ul>","rawMarkdownBody":"\n簡單記錄我所認知的 A320 的一些程序。\n\n<!--more-->\n\n> 注意這些都不是標準程序，只是我自己亂理解的，也省去蠻多步驟，基本上就是能起讓飛機動起來，標準程序肯定是更複雜的。\n\n## 啟動飛機前檢查\n\n~~模擬器中跳過還是可以飛~~\n\n1. Engine Master 1 and 2 Switch -> OFF\n   - 主引擎 1, 2 都關閉\n2. Engine Mode Selector -> NORM\n   - 引擎模式在 Normal 位置\n3. Weather Radar -> OFF\n   - 關閉氣象雷達\n4. Landing Gear -> Down\n   - 機輪放下\n5. Wipers -> Both OFF\n   - 兩個雨刷都關閉\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/7e29f7e1-bf0b-44d4-7589-29286ed81b00/large)\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/ca5109ba-4baf-40e3-850e-ee4002882c00/large)\n\n## 啟動飛機\n\n1. Batt 1 and 2 -> ON\n2. EXT Power -> ON\n   - 啟動外部電源\n   - 這時應該可以看到所有儀表亮起\n3. APU Fire Test\n   - APU 滅火測試\n4. APU Master and wait 3 sec -> ON\n   - 打開 APU 主開關，並等待 3 秒\n5. APU START -> ON\n   - 發動 APU\n6. Wait for APU START -> Green \"AVAIL\"\n   - 等 APU 發動完成\n7. APU BLEED -> ON\n   - 開啟 APU 供給氣壓\n8. EXT Power -> OFF\n   - 移除外部電源\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/bcc428a6-c065-4bc3-0d19-ad204b860700/large)\n\n## Overhead Panel 上方儀表\n\n基本上，由左至右，由下而上的檢查\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/4aa17d2f-419c-40e6-09f8-e31ca2833a00/large)\n\n### 左邊那排\n\n1. CREW SUPPLY -> ON\n   - 打開組員氧氣供給\n2. ADIRS 1, 2, 3 -> NAV\n   - 開啟三個慣性導航，需等待 6-7 分鐘校準\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/b25f2e34-5ff9-4534-4fc2-927961a5ce00/large)\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/16fb299e-1847-4767-8093-aa0d058cd400/large)\n\n### 中間那排\n\n1. NAV & LOGO Light -> ON\n2. OVHD INTEG LT -> AS REQ.\n3. DOME LT -> AS REQ.\n4. ANN LT TEST\n5. EMER EXIT LT -> ARM\n6. SEAT BELTS -> ON\n7. NO SMOKING -> ON\n8. ALL PUMP -> ON\n9. ENG 1 FIRE TEST\n10. ENG 2 FIRE TEST\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/e5f05a70-bc36-4bc3-fff2-61f413e6b900/large)\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/613ca5d3-3519-4c5d-cb82-4f9371e1d500/large)\n\n### 右邊那排\n\n基本上不用動\n\n## MCDU 飛行電腦\n\n在等待導航校準時，來設定飛行電腦。設定飛行電腦有一個口訣：\n\n> D > I > F > S > R > I > P > P\n\n- DATA\n- INIT A\n- F-PLN\n- SEC PLAN\n- RAD NAV\n- INIT B\n- PREF\n- PROG\n\n> 飛行電腦設定蠻複雜的，本文就先跳過詳細步驟，專注在冷操到起飛。\n\n## 後推 and 啟動引擎前檢查\n\n記得等 IRS 校準完後再後推。\n\n1. 申請後推\n2. BECON Light -> ON\n   - 啟動 BECAON 燈\n3. Trust Levers -> IDLE\n   - 確定推力桿在 IDLE\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/f3d16c92-7e28-4b76-c106-458211015c00/public)\n\n在 MSFS 的 FlyByWire 中可以用旁邊的 FlyPad 申請後推。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/71f815a8-11e0-4d0b-38a5-2de486a4e000/public)\n\n## 啟動引擎\n\n1. ENG MODE selector -> IGN/START\n   - 把 ENG MODE selector 轉到右邊的啟動引擎模式\n2. ENGINE 2 START -> ON\n   - 啟動右邊的 2 號引擎\n   - 我也不知道為甚麼都是先啟動 2 號引擎\n   - 等待發動完成後再發動 1 號引擎\n   - 發動時應監控引擎數據，19% N1, 68% N2, 520°C EGT, 290 kg/h FF，等待 2 號引擎 AVAIL 字樣出現\n3. ENGINE 1 START -> ON\n   - 啟動左邊的 1 號引擎，重複第 2 步直到 1 號引擎 AVAIL 字樣出現\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/1e82de0e-18d0-402e-b279-780fe5f6b800/public)\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d164d67d-9afb-4bd6-2eb9-835d7fe24300/public)\n\n## 啟動引擎後\n\n1. ENG MODE selectgor -> NORM\n   - 引擎模式轉回中間 NORM\n2. APU Bleed -> OFF\n   - 關閉 APU 供氣\n3. APU MASTER -> OFF\n   - 關閉 APU\n4. FLAPS lever -> SET TAKEOFF POSITION\n   - 放出襟翼到起飛需要的位置\n\n## 滑行 Taxi\n\n1. NOSE Light -> Taxi\n   - 開啟滑行燈\n2. RWY TURN OFF -> ON\n   - 開啟脫離跑道燈 (轉彎燈)\n3. PARK BRK -> OFF\n   - 關閉手煞車\n4. AUTO BRK MAX -> ON\n   - 開啟最大自動煞車\n\n## 起飛\n\n## Reference\n\n- [教官我想飛](https://www.youtube.com/channel/UCDKKDx4mNVI7vONL1vqTx7g)\n- [機師阿楷](https://www.youtube.com/channel/UCOHc8xzWD25Nn-snDBJUMGQ)\n- [FBW A32NX Checklist.pdf](https://github.com/flybywiresim/manuals/blob/master/pdf/A32NX%20Documentation/FBW%20A32NX%20Checklist.pdf)\n- [FBW A32NX SOP.pdf](https://github.com/flybywiresim/manuals/blob/master/pdf/A32NX%20Documentation/FBW%20A32NX%20SOP.pdf)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Flight/A320 Note.md","excerpt":"簡單記錄我所認知的 A320 的一些程序。 注意這些都不是標準程序，只是我自己亂理解的，也省去蠻多步驟，基本上就是能起讓飛機動起來，標準程序肯定是更複雜的。 啟動飛機前檢查 模擬器中跳過還是可以飛 Engine Master 1 and 2 Switch -> OFF 主引擎 1, 2 都關閉 Engine Mode Selector -> NORM 引擎模式在 Normal 位置 Weathe…","frontmatter":{"title":"A320neo 冷艙到飛行","date":"2021-07-21T14:08:20.000Z","draft":false,"tags":["a320neo","airbus","msfs"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/06a43a08-dc77-48eb-9f4a-f47a29566900/public","description":"簡單記錄我所認知的 A320 的一些程序。"}}},{"node":{"id":"e1f2136a-0c65-5dce-bf47-743229e64ad2","html":"<p>打不贏別人，至少長得比他帥。最近終於把我的 Terminal 弄成自己喜歡的樣子，所以做一下簡單的紀錄，希望大家都可以把東西變成自己喜歡的樣子。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210716235146.png\" alt=\"img\"></p>\n<!--more-->\n<p>我們今天主要會用到下面的幾樣技術：</p>\n<ol>\n<li><a href=\"https://zsh.sourceforge.io/\">zsh</a></li>\n<li><a href=\"https://github.com/romkatv/powerlevel10k\">powerlevel10K</a></li>\n<li><a href=\"https://zimfw.sh/#install\">zim</a></li>\n<li><a href=\"https://www.nerdfonts.com/\">Nerd Fonts</a></li>\n</ol>\n<p>看到這幾項技術其實可以自己先去研究一下，看看這些技術是不是自己需要的，以免亂裝一堆東西，搞的自己 Terminal 亂七八糟無法復原。另外，Windows 應該是無法安裝的，至少我自己是沒辦法，不過 WSL 倒是可以玩成這樣，畢竟就是 Linux 麻。</p>\n<p>很多人會推薦在 mac 上安裝 iTerm，我自己是沒裝，我覺得 mac 內建的 Terminal 足夠好用，沒必要安裝其他 Terminal。</p>\n<h2>Font</h2>\n<p>好看的第一步就是有好看的字體，<a href=\"https://www.nerdfonts.com/\">Nerd Fonts</a> 這個專案把一些開發者常用的字體，加上一些在 Terminal 中會用到的一些 icon 和 symbol，常見的 <code class=\"language-text\">Hack</code>、<code class=\"language-text\">Jetbrains Mono</code> 都有在這個專案裡。到 Nerd Fonts 的官網可以下載到這些字體，注意不要到字體們原本的管網下載，要到 Nerd Fonts 下載包含特殊符號的字體。</p>\n<p><img src=\"https://www.nerdfonts.com/assets/img/sankey-glyphs-combined-diagram.png\" alt=\"img\"></p>\n<p>下載安裝好字體後，記得到自己的 Terminal 中變更字體，選擇有包含 Nerd 的字體，以免等等字體都無法顯示，這部分教學我懶得寫，所以附一張圖：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717112205.png\" alt=\"img\"></p>\n<h2>zsh</h2>\n<p>zsh 可以說是 bash 的進階版，提供客製化自己在 Terminal 中想要的主題和功能。要安裝 zsh 通常各個系統都不一樣，自己上網根據系統安裝即可。安裝完成後也要將預設 shell 改成 zsh。</p>\n<p>ubuntu:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">zsh</span>\nchsh -s /bin/zsh <span class=\"token variable\">$USRR</span></code></pre></div>\n<h2>powerlevel10k</h2>\n<p>powerlevel10k 是一個 zsh 主題，提供可高客製化的主題和客製化嚮導，可以簡單地就把 Terminal 變成自己喜歡的模樣，也是本文最重要的部分。powerlevel10k 提供許多安裝方法，可以透過 oh-my-zsh，也可以用腳本安裝，我是認為用腳本安裝就好，可以不用用到 oh-my-zsh，因我們之後會提到 zim 就提供許多可以替代 oh-my-zsh 的功能。</p>\n<p>用腳本安裝 powerlevel10k：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone --depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'source ~/powerlevel10k/powerlevel10k.zsh-theme'</span> <span class=\"token operator\">>></span>~/.zshrc</code></pre></div>\n<p>安裝方式可能會因版本變動而不一樣，建議還是到官方 Github 上看一下安裝方式。</p>\n<p>安裝完成後第一次進到 Terminal 會遇到一個安裝嚮導，可以根據自己喜好設定主題樣式。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717214526.gif\" alt=\"img\"></p>\n<p>完成到這裡，Terminal 應該已經變得美美的，如果遇到亂碼，可能是字型沒有調整好。</p>\n<p>powerlevel10k 會提供一個 <code class=\"language-text\">p10k</code> 的命令，可以用於重新啟動嚮導：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717174430.png\" alt=\"img\"></p>\n<h2>Zim</h2>\n<p>全名 Zsh IMproved FrameWork，主要是提供一些方便的 zsh plugin，像是自動補全、語法高亮等，如果是希望好看，不用好用，Zim 就可以不用安裝。</p>\n<p>安裝 Zim 也很簡單，只要 Run 下面的腳本就可以：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh <span class=\"token operator\">|</span> <span class=\"token function\">zsh</span></code></pre></div>\n<p>到這就算是全部完成，如果有發現更多好用的 Terminal 工具，記得分享給我。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://zsh.sourceforge.io/\">zsh</a></li>\n<li><a href=\"https://github.com/romkatv/powerlevel10k\">powerlevel10K</a></li>\n<li><a href=\"https://zimfw.sh/#install\">zim</a></li>\n<li><a href=\"https://www.nerdfonts.com/\">Nerd Fonts</a></li>\n</ul>","rawMarkdownBody":"\n打不贏別人，至少長得比他帥。最近終於把我的 Terminal 弄成自己喜歡的樣子，所以做一下簡單的紀錄，希望大家都可以把東西變成自己喜歡的樣子。\n\n![img](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210716235146.png)\n\n<!--more-->\n\n我們今天主要會用到下面的幾樣技術：\n\n1. [zsh](https://zsh.sourceforge.io/)\n2. [powerlevel10K](https://github.com/romkatv/powerlevel10k)\n3. [zim](https://zimfw.sh/#install)\n4. [Nerd Fonts](https://www.nerdfonts.com/)\n\n看到這幾項技術其實可以自己先去研究一下，看看這些技術是不是自己需要的，以免亂裝一堆東西，搞的自己 Terminal 亂七八糟無法復原。另外，Windows 應該是無法安裝的，至少我自己是沒辦法，不過 WSL 倒是可以玩成這樣，畢竟就是 Linux 麻。\n\n很多人會推薦在 mac 上安裝 iTerm，我自己是沒裝，我覺得 mac 內建的 Terminal 足夠好用，沒必要安裝其他 Terminal。\n\n## Font\n\n好看的第一步就是有好看的字體，[Nerd Fonts](https://www.nerdfonts.com/) 這個專案把一些開發者常用的字體，加上一些在 Terminal 中會用到的一些 icon 和 symbol，常見的 `Hack`、`Jetbrains Mono` 都有在這個專案裡。到 Nerd Fonts 的官網可以下載到這些字體，注意不要到字體們原本的管網下載，要到 Nerd Fonts 下載包含特殊符號的字體。\n\n![img](https://www.nerdfonts.com/assets/img/sankey-glyphs-combined-diagram.png)\n\n下載安裝好字體後，記得到自己的 Terminal 中變更字體，選擇有包含 Nerd 的字體，以免等等字體都無法顯示，這部分教學我懶得寫，所以附一張圖：\n\n![img](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717112205.png)\n\n## zsh\n\nzsh 可以說是 bash 的進階版，提供客製化自己在 Terminal 中想要的主題和功能。要安裝 zsh 通常各個系統都不一樣，自己上網根據系統安裝即可。安裝完成後也要將預設 shell 改成 zsh。\n\nubuntu:\n\n```bash\nsudo apt install zsh\nchsh -s /bin/zsh $USRR\n```\n\n## powerlevel10k\n\npowerlevel10k 是一個 zsh 主題，提供可高客製化的主題和客製化嚮導，可以簡單地就把 Terminal 變成自己喜歡的模樣，也是本文最重要的部分。powerlevel10k 提供許多安裝方法，可以透過 oh-my-zsh，也可以用腳本安裝，我是認為用腳本安裝就好，可以不用用到 oh-my-zsh，因我們之後會提到 zim 就提供許多可以替代 oh-my-zsh 的功能。\n\n用腳本安裝 powerlevel10k：\n\n```bash\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\necho 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc\n```\n\n安裝方式可能會因版本變動而不一樣，建議還是到官方 Github 上看一下安裝方式。\n\n安裝完成後第一次進到 Terminal 會遇到一個安裝嚮導，可以根據自己喜好設定主題樣式。\n\n![img](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717214526.gif)\n\n完成到這裡，Terminal 應該已經變得美美的，如果遇到亂碼，可能是字型沒有調整好。\n\npowerlevel10k 會提供一個 `p10k` 的命令，可以用於重新啟動嚮導：\n\n![img](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717174430.png)\n\n## Zim\n\n全名 Zsh IMproved FrameWork，主要是提供一些方便的 zsh plugin，像是自動補全、語法高亮等，如果是希望好看，不用好用，Zim 就可以不用安裝。\n\n安裝 Zim 也很簡單，只要 Run 下面的腳本就可以：\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh\n```\n\n到這就算是全部完成，如果有發現更多好用的 Terminal 工具，記得分享給我。\n\n## Reference\n\n- [zsh](https://zsh.sourceforge.io/)\n- [powerlevel10K](https://github.com/romkatv/powerlevel10k)\n- [zim](https://zimfw.sh/#install)\n- [Nerd Fonts](https://www.nerdfonts.com/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Linux/Beautiful Terminal.md","excerpt":"打不贏別人，至少長得比他帥。最近終於把我的 Terminal 弄成自己喜歡的樣子，所以做一下簡單的紀錄，希望大家都可以把東西變成自己喜歡的樣子。 img 我們今天主要會用到下面的幾樣技術： zsh powerlevel10K zim Nerd Fonts 看到這幾項技術其實可以自己先去研究一下，看看這些技術是不是自己需要的，以免亂裝一堆東西，搞的自己 Terminal 亂七八糟無法復原。另外，W…","frontmatter":{"title":"Beautiful Terminal","date":"2021-07-16T15:43:07.000Z","draft":false,"tags":["terminl","zsh","zim","powerlevel","powerlevel10k","nerd-font","ubuntu","mac"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/939d8b79-aeab-465b-8bc7-fcf3cc4def00/public","description":"打不贏別人，至少長得比他帥。最近終於把我的 Terminal 弄成自己喜歡的樣子，所以做一下簡單的紀錄，希望大家都可以把東西變成自己喜歡的樣子。"}}},{"node":{"id":"01f03396-06dd-573b-95a5-793a7fd2bc95","html":"<p>Markdown 可以想像成 Html 的簡化版本，廣泛用於編寫文章或是技術文件，因為其特性基本上由 Html 簡化而來，所以方便的由寫好的 Markdown 產生 Html 網頁，像是這篇文章也是由 Markdown 編寫。</p>\n<!--more-->\n<p>我們來看看 <a href=\"https://github.com/apple/swift\">Swift</a> 的官網，可以發現 <code class=\"language-text\">[README.md](http://readme.md)</code> 這個檔案就是由 Markdown 編寫，Github 也會自動將這個檔案渲染在網頁下方。到這裡可以發現，在 Github 上的所有開源專案的文件，幾乎都是由 Markdown 編寫。</p>\n<h2>哲學</h2>\n<p>引述自 <a href=\"https://markdown.tw\">https://markdown.tw</a></p>\n<blockquote>\n<p>Markdown 的目標是實現「易讀易寫」。<br>\n不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，然而最大靈感來源其實是純文字的電子郵件格式。<br>\n因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像<em>強調</em>。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。</p>\n</blockquote>\n<h2>Tools</h2>\n<p>Q: 那要用什麼來寫呢？</p>\n<p>因為 Markdown 基本上也是純文字檔案，所以只要是文字編輯器都可以編輯，你要用 txt 來寫也是個不錯的方法 ❤️。</p>\n<h3>VSCode</h3>\n<p>目前最推薦的就是工程師的好夥伴 <code class=\"language-text\">VSCode</code> ，VSCode 在寫 Markdown 時，有提供即時渲染，可以快速的看到結果，而且 VSCode 應該在各位工程師的電腦裡都應該有安裝才對。</p>\n<h3>HackMD</h3>\n<p>HackMD 是一個在網頁中的 Markdown 編輯器，可以方便地在網頁中編輯和看到編寫的結果，HackMD 最厲害的功能是可以將 Markdown 轉換成簡報，用 Markdown 取代 PowerPoint？這夠帥吧！</p>\n<h3>MarkText</h3>\n<p>這是一個在 <a href=\"https://github.com/marktext/marktext\">Github</a> 上的開源專案，可以所寫所得，方便使用，但我還是比較推薦新手使用上面兩項工具，因為這東西真的太方便了，有點沒有在寫 Markdown 的感覺。</p>\n<h3>Microsoft Word</h3>\n<p>推薦指數：⭐⭐⭐⭐⭐</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=X34ZmkeZDos\">[YouTube] Why Microsoft Word is the best IDE for programming</a></li>\n</ul>\n<h2>Markdown 語法</h2>\n<!-- markdownlint-disable MD025 -->\n<h1>大標題</h1>\n<!-- markdownlint-enable MD025 -->\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 大標題</span></code></pre></div>\n<hr>\n<h2>次標題</h2>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 次標題</span></code></pre></div>\n<hr>\n<h3>次次標題</h3>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 次次標題</span></code></pre></div>\n<hr>\n<h2>內文</h2>\n<p>內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n\n內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文</code></pre></div>\n<hr>\n<h2>斜體 粗體</h2>\n<p>內文內文內文<em>斜體</em>內文內文內文內文內文內文<br>\n內文內文內文<strong>粗體</strong>內文內文內文內文內文內文</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">內文內文內文<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">斜體</span><span class=\"token punctuation\">*</span></span>內文內文內文內文內文內文  \n內文內文內文<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">粗體</span><span class=\"token punctuation\">**</span></span>內文內文內文內文內文內文</code></pre></div>\n<hr>\n<h2>有序清單</h2>\n<ol>\n<li>有序清單 1</li>\n<li>有序清單 2</li>\n<li>有序清單 3</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token list punctuation\">1.</span> 有序清單 1\n<span class=\"token list punctuation\">2.</span> 有序清單 2\n<span class=\"token list punctuation\">3.</span> 有序清單 3</code></pre></div>\n<hr>\n<h2>無序清單</h2>\n<ul>\n<li>無序清單 1</li>\n<li>無序清單 2</li>\n<li>無序清單 3</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token list punctuation\">-</span> 無序清單 1\n<span class=\"token list punctuation\">-</span> 無序清單 2\n<span class=\"token list punctuation\">-</span> 無序清單 3\n\n<span class=\"token list punctuation\">*</span> 無序清單 1\n<span class=\"token list punctuation\">*</span> 無序清單 2\n<span class=\"token list punctuation\">*</span> 無序清單 3\n\n<span class=\"token list punctuation\">-</span> 無序清單 1\n<span class=\"token list punctuation\">-</span> 無序清單 2\n<span class=\"token list punctuation\">-</span> 無序清單 3</code></pre></div>\n<hr>\n<h2>程式碼區塊</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi 程式碼區塊\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717220425.png\" alt=\"img\"></p>\n<hr>\n<h2>標記程式碼</h2>\n<p>inline <code class=\"language-text\">code</code></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">inline <span class=\"token code-snippet code keyword\">`code`</span></code></pre></div>\n<hr>\n<h2>超連結</h2>\n<p><a href=\"https://google.com\">Google 首頁</a></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token url\">[<span class=\"token content\">Google 首頁</span>](<span class=\"token url\">https://google.com</span>)</span></code></pre></div>\n<hr>\n<h2>圖片連結</h2>\n<p><img src=\"https://www.google.com.tw/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">![](https://www.google.com.tw/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png)</code></pre></div>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://markdown.tw/\">Markdown 文件</a></li>\n</ul>","rawMarkdownBody":"\nMarkdown 可以想像成 Html 的簡化版本，廣泛用於編寫文章或是技術文件，因為其特性基本上由 Html 簡化而來，所以方便的由寫好的 Markdown 產生 Html 網頁，像是這篇文章也是由 Markdown 編寫。\n\n<!--more-->\n\n我們來看看 [Swift](https://github.com/apple/swift) 的官網，可以發現 `[README.md](http://readme.md)` 這個檔案就是由 Markdown 編寫，Github 也會自動將這個檔案渲染在網頁下方。到這裡可以發現，在 Github 上的所有開源專案的文件，幾乎都是由 Markdown 編寫。\n\n## 哲學\n\n引述自 [https://markdown.tw](https://markdown.tw)\n\n> Markdown 的目標是實現「易讀易寫」。  \n> 不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，然而最大靈感來源其實是純文字的電子郵件格式。  \n> 因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。\n\n## Tools\n\nQ: 那要用什麼來寫呢？\n\n因為 Markdown 基本上也是純文字檔案，所以只要是文字編輯器都可以編輯，你要用 txt 來寫也是個不錯的方法 ❤️。\n\n### VSCode\n\n目前最推薦的就是工程師的好夥伴 `VSCode` ，VSCode 在寫 Markdown 時，有提供即時渲染，可以快速的看到結果，而且 VSCode 應該在各位工程師的電腦裡都應該有安裝才對。\n\n### HackMD\n\nHackMD 是一個在網頁中的 Markdown 編輯器，可以方便地在網頁中編輯和看到編寫的結果，HackMD 最厲害的功能是可以將 Markdown 轉換成簡報，用 Markdown 取代 PowerPoint？這夠帥吧！\n\n### MarkText\n\n這是一個在 [Github](https://github.com/marktext/marktext) 上的開源專案，可以所寫所得，方便使用，但我還是比較推薦新手使用上面兩項工具，因為這東西真的太方便了，有點沒有在寫 Markdown 的感覺。\n\n### Microsoft Word\n\n推薦指數：⭐⭐⭐⭐⭐\n\n- [[YouTube] Why Microsoft Word is the best IDE for programming](https://www.youtube.com/watch?v=X34ZmkeZDos)\n\n## Markdown 語法\n\n<!-- markdownlint-disable MD025 -->\n\n# 大標題\n\n<!-- markdownlint-enable MD025 -->\n\n```md\n<h1>\n\n# 大標題\n```\n\n---\n\n## 次標題\n\n```md\n<h2>\n\n## 次標題\n```\n\n---\n\n### 次次標題\n\n```md\n<h3>\n\n### 次次標題\n```\n\n---\n\n## 內文\n\n內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文\n\n```md\n<p>\n\n內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文內文\n```\n\n---\n\n## 斜體 粗體\n\n內文內文內文*斜體*內文內文內文內文內文內文  \n內文內文內文**粗體**內文內文內文內文內文內文\n\n```md\n內文內文內文*斜體*內文內文內文內文內文內文  \n內文內文內文**粗體**內文內文內文內文內文內文\n```\n\n---\n\n## 有序清單\n\n1. 有序清單 1\n2. 有序清單 2\n3. 有序清單 3\n\n```md\n<ol>\n\n1. 有序清單 1\n2. 有序清單 2\n3. 有序清單 3\n```\n\n---\n\n## 無序清單\n\n- 無序清單 1\n- 無序清單 2\n- 無序清單 3\n\n```md\n<ul>\n\n- 無序清單 1\n- 無序清單 2\n- 無序清單 3\n\n* 無序清單 1\n* 無序清單 2\n* 無序清單 3\n\n- 無序清單 1\n- 無序清單 2\n- 無序清單 3\n```\n\n---\n\n## 程式碼區塊\n\n```c\nprintf(\"Hi 程式碼區塊\");\n```\n\n![img](https://cdn.jsdelivr.net/gh/TonyPepeBear/ImageBed@main/20210717220425.png)\n\n---\n\n## 標記程式碼\n\ninline `code`\n\n```md\ninline `code`\n```\n\n---\n\n## 超連結\n\n[Google 首頁](https://google.com)\n\n```md\n[Google 首頁](https://google.com)\n```\n\n---\n\n## 圖片連結\n\n![img](https://www.google.com.tw/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png)\n\n```md\n![](https://www.google.com.tw/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png)\n```\n\n## Reference\n\n- [Markdown 文件](https://markdown.tw/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Web/markdown.md","excerpt":"Markdown 可以想像成 Html 的簡化版本，廣泛用於編寫文章或是技術文件，因為其特性基本上由 Html 簡化而來，所以方便的由寫好的 Markdown 產生 Html 網頁，像是這篇文章也是由 Markdown 編寫。 我們來看看 Swift 的官網，可以發現  這個檔案就是由 Markdown 編寫，Github 也會自動將這個檔案渲染在網頁下方。到這裡可以發現，在 Github 上的…","frontmatter":{"title":"Markdown","date":"2021-07-05T09:05:38.000Z","draft":false,"tags":["markdown"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/0ecfde1e-521f-4e7c-ab46-30357d4e5e00/public","description":"Markdown 可以想像成 Html 的簡化版本，廣泛用於編寫文章或是技術文件，因為其特性基本上由 Html 簡化而來，所以方便的由寫好的 Markdown 產生 Html 網頁，像是這篇文章也是由 Markdown 編寫。"}}},{"node":{"id":"12cf7dd4-2218-52e9-b731-11bbf415cd30","html":"<p>frp 全名是 fast reverse proxy，可以將在 NAT 後方的服務快速的發布到公網 ip 上，可以支援 TCP 和 UDP 協議，我覺得唯一的缺點就是所有流量都會經過 Server 端，所以如果 Server 端的流量有限制就需要注意一下。</p>\n<!--more-->\n<p>frp 會需要一台 Server，Server 需要公網 ip，如果沒有公網 ip，可以使用 aws 或 gcp 買一個簡單的 VPS。</p>\n<h2>安裝</h2>\n<p>網路上有許多一鍵安裝的到腳本，但我們不使用那些，有興趣的自己上網搜尋。</p>\n<p>到官方 <a href=\"https://github.com/fatedier/frp/releases\">Release</a> 下載最新版，根據系統選擇，解壓後會看到 <code class=\"language-text\">frps</code> 、<code class=\"language-text\">frpc</code> 各有三個檔案，跟 <code class=\"language-text\">frps</code> 有關的就是 Server 端用的，<code class=\"language-text\">frpc</code> 的就是 Client 端用的。如果是 Server 端，就可以將 <code class=\"language-text\">frpc</code> 的檔案都刪除。</p>\n<h2>Server 端設定</h2>\n<p>在 Server 上打開設定文件 <code class=\"language-text\">frps.ini</code> 可以看到預設就有如下的內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">common</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">bind_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">7000</span></code></pre></div>\n<p><code class=\"language-text\">common</code> 內綁定了 7000 port，這個 port 是讓 client 端連接用的，基本現在不用改設定就可以直接用。執行 <code class=\"language-text\">frps</code> 要用 <code class=\"language-text\">-c</code> 參數給定設定檔案：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./frps -c ./frps.ini</code></pre></div>\n<p>如果沒看到問題，基本上 Server 端就設定好了，其他功能晚點再介紹，我們先設定好 Client。</p>\n<h2>Client 端設定</h2>\n<p>Client 就是要發布服務伺服器，所以雖然叫做 Client 但本身應該也是一台提供服務的 Server。Client 就可以刪除有關 <code class=\"language-text\">frps</code> 相關的檔案。</p>\n<p>一樣先打開設定檔 <code class=\"language-text\">frpc.ini</code>，也會有如下預設內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">common</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">server_addr</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1</span>\n<span class=\"token key attr-name\">server_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">7000</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">ssh</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">tcp</span>\n<span class=\"token key attr-name\">local_ip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1</span>\n<span class=\"token key attr-name\">local_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">22</span>\n<span class=\"token key attr-name\">remote_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">6000</span></code></pre></div>\n<p>Client 端的設定檔就不能直接用，需要修改 Server ip 才行，更改 <code class=\"language-text\">server_addr</code> 為剛剛 Server 端的 ip 地址或是 Domain 都可以。</p>\n<p>下方方的 ssh 區塊設一個將 Client 端的 ssh 22 port 公開到 Server 端的 6000 port 的範本，如果有其他的 port 要開放，用相同的思維更改即可。像是如過要加 Minecraft 25565 port 也到 Server 端的 25565 port，就可以新增一個區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">common</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">server_addr</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">example.com</span>\n<span class=\"token key attr-name\">server_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">7000</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">ssh</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">tcp</span>\n<span class=\"token key attr-name\">local_ip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1</span>\n<span class=\"token key attr-name\">local_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">22</span>\n<span class=\"token key attr-name\">remote_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">6000</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">minecraft</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">tcp</span>\n<span class=\"token key attr-name\">local_ip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1</span>\n<span class=\"token key attr-name\">local_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">25565</span>\n<span class=\"token key attr-name\">remote_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">25565</span></code></pre></div>\n<p>到目前為止應該就可以用 Server 端的 ip 連接到 Client 端了，如果連不上，可能要檢查一下 Server 端防火牆的設定，這邊就不贅述。</p>\n<h2>Token 認證</h2>\n<p>不知道大家有沒有發現，基本上只要知道你 Server ip 或 domain 的人都可以新增自己的 port，要避免這樣的狀況，我們可以使用 token。使用方法也很簡單，只要在 Server 和 Client 端的 <code class=\"language-text\">[common]</code> 都加上相同的 token 參數，就可以進行簡單的認證。</p>\n<p>Server 端範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">common</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">bind_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">7000</span>\n<span class=\"token key attr-name\">token</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">7Jc2ZCvVzHu</span></code></pre></div>\n<p>Client 端範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">common</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">server_addr</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">example.com</span>\n<span class=\"token key attr-name\">server_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">7000</span>\n<span class=\"token key attr-name\">token</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">7Jc2ZCvVzHu</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">ssh</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">tcp</span>\n<span class=\"token key attr-name\">local_ip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1</span>\n<span class=\"token key attr-name\">local_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">22</span>\n<span class=\"token key attr-name\">remote_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">6000</span></code></pre></div>\n<h2>Refrence</h2>\n<p><a href=\"https://github.com/fatedier/frp\">GitHub</a></p>\n<p><a href=\"https://gofrp.org/docs/\">中文文檔</a></p>","rawMarkdownBody":"\nfrp 全名是 fast reverse proxy，可以將在 NAT 後方的服務快速的發布到公網 ip 上，可以支援 TCP 和 UDP 協議，我覺得唯一的缺點就是所有流量都會經過 Server 端，所以如果 Server 端的流量有限制就需要注意一下。\n\n<!--more-->\n\nfrp 會需要一台 Server，Server 需要公網 ip，如果沒有公網 ip，可以使用 aws 或 gcp 買一個簡單的 VPS。\n\n## 安裝\n\n網路上有許多一鍵安裝的到腳本，但我們不使用那些，有興趣的自己上網搜尋。\n\n到官方 [Release](https://github.com/fatedier/frp/releases) 下載最新版，根據系統選擇，解壓後會看到 `frps` 、`frpc` 各有三個檔案，跟 `frps` 有關的就是 Server 端用的，`frpc` 的就是 Client 端用的。如果是 Server 端，就可以將 `frpc` 的檔案都刪除。\n\n## Server 端設定\n\n在 Server 上打開設定文件 `frps.ini` 可以看到預設就有如下的內容：\n\n```ini\n[common]\nbind_port = 7000\n```\n\n`common` 內綁定了 7000 port，這個 port 是讓 client 端連接用的，基本現在不用改設定就可以直接用。執行 `frps` 要用 `-c` 參數給定設定檔案：\n\n```shell\n./frps -c ./frps.ini\n```\n\n如果沒看到問題，基本上 Server 端就設定好了，其他功能晚點再介紹，我們先設定好 Client。\n\n## Client 端設定\n\nClient 就是要發布服務伺服器，所以雖然叫做 Client 但本身應該也是一台提供服務的 Server。Client 就可以刪除有關 `frps` 相關的檔案。\n\n一樣先打開設定檔 `frpc.ini`，也會有如下預設內容：\n\n```ini\n[common]\nserver_addr = 127.0.0.1\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n\nClient 端的設定檔就不能直接用，需要修改 Server ip 才行，更改 `server_addr` 為剛剛 Server 端的 ip 地址或是 Domain 都可以。\n\n下方方的 ssh 區塊設一個將 Client 端的 ssh 22 port 公開到 Server 端的 6000 port 的範本，如果有其他的 port 要開放，用相同的思維更改即可。像是如過要加 Minecraft 25565 port 也到 Server 端的 25565 port，就可以新增一個區塊：\n\n```ini\n[common]\nserver_addr = example.com\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n\n[minecraft]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 25565\nremote_port = 25565\n```\n\n到目前為止應該就可以用 Server 端的 ip 連接到 Client 端了，如果連不上，可能要檢查一下 Server 端防火牆的設定，這邊就不贅述。\n\n## Token 認證\n\n不知道大家有沒有發現，基本上只要知道你 Server ip 或 domain 的人都可以新增自己的 port，要避免這樣的狀況，我們可以使用 token。使用方法也很簡單，只要在 Server 和 Client 端的 `[common]` 都加上相同的 token 參數，就可以進行簡單的認證。\n\nServer 端範例：\n\n```ini\n[common]\nbind_port = 7000\ntoken = 7Jc2ZCvVzHu\n```\n\nClient 端範例：\n\n```ini\n[common]\nserver_addr = example.com\nserver_port = 7000\ntoken = 7Jc2ZCvVzHu\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n\n## Refrence\n\n[GitHub](https://github.com/fatedier/frp)\n\n[中文文檔](https://gofrp.org/docs/)\n","fileAbsolutePath":"/home/runner/work/Blog/Blog/src/posts/Linux/frp.md","excerpt":"frp 全名是 fast reverse proxy，可以將在 NAT 後方的服務快速的發布到公網 ip 上，可以支援 TCP 和 UDP 協議，我覺得唯一的缺點就是所有流量都會經過 Server 端，所以如果 Server 端的流量有限制就需要注意一下。 frp 會需要一台 Server，Server 需要公網 ip，如果沒有公網 ip，可以使用 aws 或 gcp 買一個簡單的 VPS。 安…","frontmatter":{"title":"Frp","date":"2021-06-20T13:48:33.000Z","draft":false,"tags":["frp","linux"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/34046c81-cb6e-40a5-7b3a-8623c613f400/public","description":"frp 全名是 fast reverse proxy，可以將在 NAT 後方的服務快速的發布到公網 ip 上，可以支援 TCP 和 UDP 協議，我覺得唯一的缺點就是所有流量都會經過 Server 端，所以如果 Server 端的流量有限制就需要注意一下。"}}}]}},"pageContext":{"limit":8,"skip":16,"numPages":4,"currentPage":3}},"staticQueryHashes":[]}