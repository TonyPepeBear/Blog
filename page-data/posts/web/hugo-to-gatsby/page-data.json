{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/web/hugo-to-gatsby","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"a152e880-9eab-5776-8ebd-9e5a756f9e97","html":"<p>最近把網站從 Hugo 遷移到 Gatsby，遇到了一些問題，我就來簡單記錄一下解決問題的過程，而且因為我對 Node 也不是很熟，所以主要是在當作我練習 Node 和 React。</p>\n<!--more-->\n<h2>Why？</h2>\n<ol>\n<li>Hugo 實在很難使用 Node 套件</li>\n<li>單純想給自己一個接觸 Node 的機會</li>\n</ol>\n<p>許多網頁的套件庫都是使用 node 開發的，但因為 Hugo 是用 go 開發，雖然有提供對 npm 套件的支援，但是還是沒有原生的方便，在用套件的時候常常會遇到問題。所以我還是下定決心換到 Gatsby，也可以順便熟悉一下 React。另外，我是使用 TypeScript 來開發，這也是有點虐待自己，不過還好還是順利完成，也對 TS 有多點認識。</p>\n<p>目前遇到的一個最大的缺點，大概就是 Hugo 產生網頁的速度真的超級快，Gatsby 因為依賴一大堆 npm 套件，所以我在 Cloudflare Pages 上的平均需要大約 5 分鐘網頁才能建置好。</p>\n<h2>遇到的問題</h2>\n<p>目前遇到的主要問題大概就是下面三點：</p>\n<ol>\n<li>npm build 不成功</li>\n<li>觀看更多的功能</li>\n<li>meilisearch</li>\n</ol>\n<h2>npm to yarn</h2>\n<p>一開始我是使用 npm 作為套件管理，我在本機開發時都沒有遇到什麼問題，直到我幾乎都開發完成後，我就將網頁 push 到 GitHub 上，GitHub Actions 在 Build 時也沒有遇到問題，直到 Cloudflare Pages 在建置時，就是會一直失敗，我也一直確定 node 和 npm 版本跟我本地的一樣，但無論如何就是失敗，直到我上網查後，才發現 Gatsby 官方也是建議使用 yarn，npm 好像會遇到問題。我就試著 <code class=\"language-text\">yarn</code> 一下，讓專案自動遷移到 yarn，就沒又再出現問題了，實在莫名其妙。所以也是建議大家以後若有使用到 Gatsby，還是使用 yarn 比較好一點。</p>\n<h2>觀看更多</h2>\n<p>在 Hugo 時，Hugo 支援在 Markdown 中使用 <code class=\"language-text\">&lt;!--more--></code> 的標籤來提取標籤前的部分當作文章摘要，用來顯示在 ListTemplate，而 Gatsby 只有提供提取前 n 字的功能。而這對我網頁的美觀程度就有一點不方便，因為我 Hugo 已經累計了不少文章，若要現在再去一篇篇修改，也是會有點麻煩，所以只好自己稍微研究一下要怎麼處理。</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Hello\n\n摘要\n\n<span class=\"token comment\">&lt;!--more--></span>\n\n正文\n\n正文</code></pre></div>\n<p>我處理的方式簡單暴力，我發現 Gatsby 在 GraphQL 的時候，可以拿到 RawMarkdown，而且這個也會保留註解，所以我靈機一動，我就自己使用 Node 套件，自己解析 Markdown 不就好了？所以我就用 <code class=\"language-text\">marked</code> 套件，幫我把 md 轉成 html。範例大致如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> marked <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"marked\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> summary <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>rawMarkdownBody<span class=\"token punctuation\">.</span><span class=\"token function\">spllit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;!--more-->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div dangerouslaSetSetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> marked<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>summary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>MeiliSearch</h2>\n<p>我原本的 Hugo 網頁，就是使用 MeiliSearch 來當我的搜尋功能，可以參考<a href=\"%22posts/web/meilisearch-hugo%22\">這一篇</a> 。所以一樣是會需要產生一個 <code class=\"language-text\">SearchIndex.json</code>，我直接在 <code class=\"language-text\">gatsby-node.ts</code> 裡的 <code class=\"language-text\">noPostBuild</code> 手動產生 json，再用 <code class=\"language-text\">fs</code> 寫入檔案，直接給大家程式碼參考。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> onPostBuild<span class=\"token operator\">:</span> GatsbyNode<span class=\"token punctuation\">[</span><span class=\"token string\">\"onPostBuild\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  graphql<span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> errors<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token generic-function\"><span class=\"token function\">graphql</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ArticleListData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>articleGraphql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// SearchIndex.json</span>\n  <span class=\"token keyword\">const</span> searchArr<span class=\"token operator\">:</span> SearchIndex<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> summary <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>rawMarkdownBody<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;!--more-->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n      <span class=\"token string\">\"/posts/\"</span> <span class=\"token operator\">+</span>\n      node<span class=\"token punctuation\">.</span>fileAbsolutePath\n        <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/posts/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> miliseconds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    searchArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> index<span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> miliseconds<span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      summary<span class=\"token operator\">:</span> summary<span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./public/SearchIndex.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>searchArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>產生 Json 後，我一樣是使用 GitHub Actions 來自動把 Index 推到 MeiliSearch Server。</p>\n<h2>Tag Page</h2>\n<p>其實 Gatsby 應該也是有方法可以產生 Tag Page，但是因為我想到要用 Tag Page 時，我已經弄好 MeiliSearch 了，所以我就靈機一動，想想是不是也可以直接簡單的使用 MeiliSearch 來動態的產生 Tag Page 就好，結果還真的被我弄成功了，就來紀錄一下我大概的思路。雖然我知道這八成不是什麼好方法，但是簡單暴力。</p>\n<p>MeiliSearch 可以設定 <code class=\"language-text\">filterableAttributes</code> 的屬性，所以我把我的 Index 中的 Tag 屬性設定成可以 Filterable，然後再取得網址的 Params，最後向 MeiliSearch 搜尋後動態的把結果顯示在網頁上。也可以參考<a href=\"https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters\">官方文件</a>。</p>\n<p>這時遇到的問題就是 Gatsby 是 Server Side Rendering，所以取的 Params 要使用額外的 plugin，我是使用 <code class=\"language-text\">gatsby-plugin-use-query-params</code>，就可以像是 React 的 useState 的方式來取的網址的 Parm。</p>\n<p>也是提供部分的程式碼給大家參考：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">SearchTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> tag <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> tag<span class=\"token operator\">:</span> StringParam <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取的 Params</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">,</span> setResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 執行搜尋</span>\n    client\n      <span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gatsby-blog\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tags=\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>tag <span class=\"token operator\">?</span> tag <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        limit<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>MainLayout title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"tag: \"</span> <span class=\"token operator\">+</span> tag <span class=\"token operator\">+</span> <span class=\"token string\">\" - TonyPepe\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1 className<span class=\"token operator\">=</span><span class=\"token string\">\"my-4 bg-white rounded-md py-4 px-6 text-2xl\"</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"Tag: \"</span> <span class=\"token operator\">+</span> tag<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>LoadingChild <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>ResultClild hits<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MainLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MeiliSearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">\"https://search.tonypepe.com\"</span><span class=\"token punctuation\">,</span>\n  apiKey<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>後紀</h2>\n<p>Node 在建置上實在是太慢，真的會有一點受不了，每次光是要 Run 起 Dev Server，就至少需要 30 秒，相比 Hugo 就算是有裝一點點的 npm 套件，還是只要 10 秒左右就可以開始寫網頁了。</p>\n<p>當然，使用 Gatsby 開發的好處也是很多，可以最大化的自訂網頁的長相和功能，不會被 Hugo 的功能限制住，如果缺少了什麼功能，都可以自己用 js 開發出來，而且在使用一些 Web Library 和 React 真的太方便了。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://gatsbyjs.org/\">Gatsby</a></li>\n<li><a href=\"https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters\">MeiliSearch - Filtering and faceted search</a></li>\n</ul>","rawMarkdownBody":"\n最近把網站從 Hugo 遷移到 Gatsby，遇到了一些問題，我就來簡單記錄一下解決問題的過程，而且因為我對 Node 也不是很熟，所以主要是在當作我練習 Node 和 React。\n\n<!--more-->\n\n## Why？\n\n1. Hugo 實在很難使用 Node 套件\n2. 單純想給自己一個接觸 Node 的機會\n\n許多網頁的套件庫都是使用 node 開發的，但因為 Hugo 是用 go 開發，雖然有提供對 npm 套件的支援，但是還是沒有原生的方便，在用套件的時候常常會遇到問題。所以我還是下定決心換到 Gatsby，也可以順便熟悉一下 React。另外，我是使用 TypeScript 來開發，這也是有點虐待自己，不過還好還是順利完成，也對 TS 有多點認識。\n\n目前遇到的一個最大的缺點，大概就是 Hugo 產生網頁的速度真的超級快，Gatsby 因為依賴一大堆 npm 套件，所以我在 Cloudflare Pages 上的平均需要大約 5 分鐘網頁才能建置好。\n\n## 遇到的問題\n\n目前遇到的主要問題大概就是下面三點：\n\n1. npm build 不成功\n2. 觀看更多的功能\n3. meilisearch\n\n## npm to yarn\n\n一開始我是使用 npm 作為套件管理，我在本機開發時都沒有遇到什麼問題，直到我幾乎都開發完成後，我就將網頁 push 到 GitHub 上，GitHub Actions 在 Build 時也沒有遇到問題，直到 Cloudflare Pages 在建置時，就是會一直失敗，我也一直確定 node 和 npm 版本跟我本地的一樣，但無論如何就是失敗，直到我上網查後，才發現 Gatsby 官方也是建議使用 yarn，npm 好像會遇到問題。我就試著 `yarn` 一下，讓專案自動遷移到 yarn，就沒又再出現問題了，實在莫名其妙。所以也是建議大家以後若有使用到 Gatsby，還是使用 yarn 比較好一點。\n\n## 觀看更多\n\n在 Hugo 時，Hugo 支援在 Markdown 中使用 `<!--more-->` 的標籤來提取標籤前的部分當作文章摘要，用來顯示在 ListTemplate，而 Gatsby 只有提供提取前 n 字的功能。而這對我網頁的美觀程度就有一點不方便，因為我 Hugo 已經累計了不少文章，若要現在再去一篇篇修改，也是會有點麻煩，所以只好自己稍微研究一下要怎麼處理。\n\n```md\nHello\n\n摘要\n\n<!--more-->\n\n正文\n\n正文\n```\n\n我處理的方式簡單暴力，我發現 Gatsby 在 GraphQL 的時候，可以拿到 RawMarkdown，而且這個也會保留註解，所以我靈機一動，我就自己使用 Node 套件，自己解析 Markdown 不就好了？所以我就用 `marked` 套件，幫我把 md 轉成 html。範例大致如下：\n\n```typescript\nimport { marked } from \"marked\";\n\nexport default function ({ node }: Props) {\n  const summary = node.rawMarkdownBody.spllit(\"<!--more-->\")[0];\n  return <div dangerouslaSetSetInnerHTML={{ __html: marked.parse(summary) }} />;\n}\n```\n\n## MeiliSearch\n\n我原本的 Hugo 網頁，就是使用 MeiliSearch 來當我的搜尋功能，可以參考[這一篇](\"posts/web/meilisearch-hugo\") 。所以一樣是會需要產生一個 `SearchIndex.json`，我直接在 `gatsby-node.ts` 裡的 `noPostBuild` 手動產生 json，再用 `fs` 寫入檔案，直接給大家程式碼參考。\n\n```typescript\nexport const onPostBuild: GatsbyNode[\"onPostBuild\"] = async ({\n  graphql,\n  actions,\n}) => {\n  const { errors, data } = await graphql<ArticleListData>(articleGraphql);\n  // SearchIndex.json\n  const searchArr: SearchIndex[] = [];\n  data!!.allMarkdownRemark.edges.forEach(({ node }, index) => {\n    const summary = node.rawMarkdownBody.split(\"<!--more-->\")[0];\n    const url =\n      \"/posts/\" +\n      node.fileAbsolutePath\n        .split(\"/posts/\")[1]\n        .split(\".md\")[0]\n        .replace(\" \", \"-\")\n        .toLowerCase();\n    const miliseconds = new Date(node.frontmatter.date).getTime();\n    searchArr.push({\n      id: index,\n      date: miliseconds,\n      url: url,\n      title: node.frontmatter.title,\n      summary: summary,\n      content: node.internal.content.replace(\"\\n\", \" \"),\n      tags: node.frontmatter.tags,\n    });\n  });\n  fs.writeFileSync(\"./public/SearchIndex.json\", JSON.stringify(searchArr));\n};\n```\n\n產生 Json 後，我一樣是使用 GitHub Actions 來自動把 Index 推到 MeiliSearch Server。\n\n## Tag Page\n\n其實 Gatsby 應該也是有方法可以產生 Tag Page，但是因為我想到要用 Tag Page 時，我已經弄好 MeiliSearch 了，所以我就靈機一動，想想是不是也可以直接簡單的使用 MeiliSearch 來動態的產生 Tag Page 就好，結果還真的被我弄成功了，就來紀錄一下我大概的思路。雖然我知道這八成不是什麼好方法，但是簡單暴力。\n\nMeiliSearch 可以設定 `filterableAttributes` 的屬性，所以我把我的 Index 中的 Tag 屬性設定成可以 Filterable，然後再取得網址的 Params，最後向 MeiliSearch 搜尋後動態的把結果顯示在網頁上。也可以參考[官方文件](https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters)。\n\n這時遇到的問題就是 Gatsby 是 Server Side Rendering，所以取的 Params 要使用額外的 plugin，我是使用 `gatsby-plugin-use-query-params`，就可以像是 React 的 useState 的方式來取的網址的 Parm。\n\n也是提供部分的程式碼給大家參考：\n\n```typescript\nexport default function SearchTags() {\n  const [{ tag }, _] = useQueryParams({ tag: StringParam }); // 取的 Params\n  const [result, setResult] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  React.useEffect(() => {\n    // 執行搜尋\n    client\n      .index(\"gatsby-blog\")\n      .search(\"\", {\n        filter: [\"tags=\" + (tag ? tag : \"\")],\n        limit: Number.MAX_SAFE_INTEGER,\n      })\n      .then((res: any) => {\n        setResult(res.hits);\n        setIsLoading(false);\n      });\n  }, []);\n  return (\n    <MainLayout title={\"tag: \" + tag + \" - TonyPepe\"}>\n      <div>\n        <h1 className=\"my-4 bg-white rounded-md py-4 px-6 text-2xl\">\n          {\"Tag: \" + tag}\n        </h1>\n        {isLoading ? <LoadingChild /> : <ResultClild hits={result} />}\n      </div>\n    </MainLayout>\n  );\n}\n\nconst client = new MeiliSearch({\n  host: \"https://search.tonypepe.com\",\n  apiKey: \"\",\n});\n```\n\n## 後紀\n\nNode 在建置上實在是太慢，真的會有一點受不了，每次光是要 Run 起 Dev Server，就至少需要 30 秒，相比 Hugo 就算是有裝一點點的 npm 套件，還是只要 10 秒左右就可以開始寫網頁了。\n\n當然，使用 Gatsby 開發的好處也是很多，可以最大化的自訂網頁的長相和功能，不會被 Hugo 的功能限制住，如果缺少了什麼功能，都可以自己用 js 開發出來，而且在使用一些 Web Library 和 React 真的太方便了。\n\n## Reference\n\n- [Gatsby](https://gatsbyjs.org/)\n- [MeiliSearch - Filtering and faceted search](https://docs.meilisearch.com/learn/advanced/filtering_and_faceted_search.html#configuring-filters)\n","excerpt":"最近把網站從 Hugo 遷移到 Gatsby，遇到了一些問題，我就來簡單記錄一下解決問題的過程，而且因為我對 Node 也不是很熟，所以主要是在當作我練習 Node 和 React。 Why？ Hugo 實在很難使用 Node 套件 單純想給自己一個接觸 Node 的機會 許多網頁的套件庫都是使用 node 開發的，但因為 Hugo 是用 go 開發，雖然有提供對 npm 套件的支援，但是還是沒…","frontmatter":{"title":"從 Hugo 遷到 Gatsby 的紀錄","date":"2022-06-01T15:17:28.142Z","draft":false,"tags":["hugo","gatsby","blog","web","node","npm","meilisearch","search"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/2892b2bf-2c12-4d17-21f7-ba2e57c98100/public","description":null}}}]}},"pageContext":{"id":"a152e880-9eab-5776-8ebd-9e5a756f9e97"}},"staticQueryHashes":[]}