{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/hugo/hugo-github-actions","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"870e064c-4e10-52cf-8ee4-7e88a63fa689","html":"<p>Github Actions 是 Github 官方提供的 CI/CD 服務，編寫簡單的腳本，就可以在每次 Push、 PR 時，自動的檢查程式碼可不可以通過 Test，或是直接產生 Release 來交付專案成品。另外一個重點是，這個服務完全免費，而在私有 Repo，則是有限制容器的執行時間。本文使用 Github Actions 來自動將 Hugo 專案自動產生靜態網頁，並且將網頁發布到 <code class=\"language-text\">gh-pages</code> 的 git 分支。</p>\n<!--more-->\n<p>Github Actions 也是容器化技術的一環，也是類似 Docker 容器的一種，如果對 Docker 還不熟悉，應該會對本文有點吃力，但也可以對完全不了解 Docker 的人，多一點對容器化技術的認識。</p>\n<h2>編寫 Workflows 檔案</h2>\n<p>Workflows 工作流檔案，就是在 CI/CD 中最重要的檔案，這個檔案寫下這個專案的工作流程，像是如何 Test、交付成品，都是寫在這的檔案裡，Github 會自動讀取所有工作留檔案和自動執行，所以只要寫好一次，基本上就一勞永逸，每次只需要 Push，Gihtub 就會按照腳本完成指定的工作。</p>\n<p>Github Actions 的 Worksflows 檔案都是放在專案跟目錄的 <code class=\"language-text\">/.github/workflows</code> 這個資料夾中，Github 會讀取這個資料夾中的 <code class=\"language-text\">*.yml</code> 檔案，並且自動執行他們。我們現在在這個目錄下新增一個叫做 <code class=\"language-text\">hugo-public.yml</code> 的檔案，檔名可以自訂沒關係，Github 不會關心檔名長怎樣，如果有多個檔案也每個都會分別執行。</p>\n<p>我們在現在 <code class=\"language-text\">/.github/workflows/hugo-public.yml</code> 的檔案中新增如下的腳本：</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> github pages\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master <span class=\"token comment\"># Set a branch to deploy</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span><span class=\"token number\">20.04</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">submodules</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Fetch Hugo themes (true OR recursive)</span>\n          <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\"># Fetch all history for .GitInfo and .Lastmod</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Hugo\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>hugo@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">hugo-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"latest\"</span>\n          <span class=\"token key atrule\">extended</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> hugo <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>minify\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3\n        <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.ref == 'refs/heads/master'\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./public</code></pre></div>\n<p>下面我們分段來解釋上面腳本每行的意思。</p>\n<h2>Name</h2>\n<p>基本上就是這個腳本的名稱，可以隨意自訂不會影響結果。</p>\n<h2>On</h2>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master <span class=\"token comment\"># Set a branch to deploy</span>\n  pull_request<span class=\"token punctuation\">:</span></code></pre></div>\n<p><code class=\"language-text\">on</code> 區段定義了這個腳本什麼時候會被執行，我們現在這個範例中，定義了這個腳本會在 <code class=\"language-text\">master</code> 這個分支被 push 的時候自動執行。Github 現在預設的分支名稱是 <code class=\"language-text\">main</code>，如果是 <code class=\"language-text\">main</code> 的人千萬要記得改，以免這個腳本永遠不會執行。</p>\n<h2>Jobs</h2>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 以下省略</span></code></pre></div>\n<p>jobs 是整個檔案中最核心的部分，可以分成許多不同的 Job，目前我們只有一個叫做 <code class=\"language-text\">deploy</code> 的 Job，這個名稱也是可以自訂的，這裡只是取叫 <code class=\"language-text\">deploy</code> 看不順眼可以自己換。如果還需要有其他工作，可以自己視情況增加。</p>\n<h3>Job</h3>\n<p>終於來到最核心的部分，deploy 任務中的第一行，就定義了這個任務要 Run 在哪個容器內，或是稱作哪個系統內。這邊是用 <code class=\"language-text\">ubuntu</code> 的 20.04，建議不要亂改，因為其他的 Linux 不一定可以完任務。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span><span class=\"token number\">20.04</span>\n  <span class=\"token comment\">## 以下省略</span></code></pre></div>\n<h3>Steps</h3>\n<p>接下來就是分步驟執行命令，<code class=\"language-text\">uses</code> 是利用 Github 上別人已經寫好的 Actions 腳本來執行命令，像是第一個 <code class=\"language-text\">uses: actions/checkout@v2</code> 就是李用 Github 上別人已經寫好的 <code class=\"language-text\">git checkout</code> 命令來把專案 checkout 到容器中。</p>\n<p>第二個部分也是使用別人已經寫好的腳本，快速的安裝 Hugo 到容器內，用別人寫好的東西來完成工作，避免不必要的重複造輪子。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n    <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">submodules</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>  <span class=\"token comment\"># Fetch Hugo themes (true OR recursive)</span>\n        <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>    <span class=\"token comment\"># Fetch all history for .GitInfo and .Lastmod</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Hugo\n    <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>hugo@v2\n    <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">hugo-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'latest'</span>\n        <span class=\"token key atrule\">extended</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> hugo <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>minify\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.ref == 'refs/heads/master'\n    <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./public</code></pre></div>\n<p>看到這裡也可以發現任務也是分很多步驟，第三部分的 Build 就是像是我們在本機目錄的產生方法一樣，直接輸入 <code class=\"language-text\">hugo</code> 命令產生靜態網頁。</p>\n<p>第四部分的 Deploy 就會比較複雜，這邊也是利用別人寫好用來發布 Github Pages 的任務，他會需要一個 Github Token，這個 Token 是要用來對 Repository 有 Push 的權限，雖然可以直接寫在腳本裡，但是就所有人都看得到你的 Token，那就會產生資安問題。所以 Github 提供 Secrets 的模式，可以把不方便直接寫在專案裡的機敏資料，放在 Github 上。</p>\n<p>所以我們現在會有兩件事要做：</p>\n<ol>\n<li>產生 Token</li>\n<li>把 Token 放到專案的 Secrets 中</li>\n</ol>\n<p>我們先來產生 Token，先到個人的設定頁面找到 Developer settings：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9cec1b4f-5bf6-4e41-9177-3cbe9ccfd400/large\" alt=\"img\"></p>\n<p>再到 Token 的頁面產生新的 Token：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/dfa652f6-b8b1-4df2-5b7f-ccdda2e8df00/large\" alt=\"img\"></p>\n<p>名稱可以自己隨意訂，Repo 的權限就全部打開，除了 Repo 以外的權限則都不需要。都確定後直接拉到最下面產生 Token：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/94de0480-f57a-4bef-b1e1-9ce3f75d2c00/large\" alt=\"img\"></p>\n<p>會得到一組新的 Token，請注意不要像我一樣 Show 出來給別人看，請妥善保存，而且 Github 也只會顯示這一次，以後想要看都看不到，只能產生新的 Token。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/13bcbfe0-5bbc-4292-5679-cd5d1dba9f00/large\" alt=\"img\"></p>\n<p>複製下 Token 後，我們到專案層級的設定，注意是<strong>專案</strong>的設定，不是個人設定：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d5b06f39-8b64-4f76-3f68-84d30fbc9a00/large\" alt=\"img\"></p>\n<p>找到 Secrets 並新增 Secrets：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/409789e1-87f4-4469-fcf4-032a27e05700/large\" alt=\"img\"></p>\n<p>名字取好後，填入剛剛拿到的 Token，注意名稱要和剛剛在腳本中寫的一樣：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/8e7912d5-53fc-491a-a638-bee48f87be00/large\" alt=\"img\"></p>\n<p>都填完後就大功告成，基本上只要 Push 到 Github 上，應該就會自動觸發上面寫的工作，以後只要文章有新的變動，Push 上來就會自動更新網頁網頁到專案的 <code class=\"language-text\">gh-pages</code> 分之上。想要進一步看到 Pages 的設定，可以到專案下的 Pages 的設定下看看，也可以在這裡自訂 Domian。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/e1c327a2-2e73-45ff-7305-a8440010d600/large\" alt=\"img\"></p>","rawMarkdownBody":"\nGithub Actions 是 Github 官方提供的 CI/CD 服務，編寫簡單的腳本，就可以在每次 Push、 PR 時，自動的檢查程式碼可不可以通過 Test，或是直接產生 Release 來交付專案成品。另外一個重點是，這個服務完全免費，而在私有 Repo，則是有限制容器的執行時間。本文使用 Github Actions 來自動將 Hugo 專案自動產生靜態網頁，並且將網頁發布到 `gh-pages` 的 git 分支。\n\n<!--more-->\n\nGithub Actions 也是容器化技術的一環，也是類似 Docker 容器的一種，如果對 Docker 還不熟悉，應該會對本文有點吃力，但也可以對完全不了解 Docker 的人，多一點對容器化技術的認識。\n\n## 編寫 Workflows 檔案\n\nWorkflows 工作流檔案，就是在 CI/CD 中最重要的檔案，這個檔案寫下這個專案的工作流程，像是如何 Test、交付成品，都是寫在這的檔案裡，Github 會自動讀取所有工作留檔案和自動執行，所以只要寫好一次，基本上就一勞永逸，每次只需要 Push，Gihtub 就會按照腳本完成指定的工作。\n\nGithub Actions 的 Worksflows 檔案都是放在專案跟目錄的 `/.github/workflows` 這個資料夾中，Github 會讀取這個資料夾中的 `*.yml` 檔案，並且自動執行他們。我們現在在這個目錄下新增一個叫做 `hugo-public.yml` 的檔案，檔名可以自訂沒關係，Github 不會關心檔名長怎樣，如果有多個檔案也每個都會分別執行。\n\n我們在現在 `/.github/workflows/hugo-public.yml` 的檔案中新增如下的腳本：\n\n```yml\nname: github pages\n\non:\n  push:\n    branches:\n      - master # Set a branch to deploy\n  pull_request:\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: true # Fetch Hugo themes (true OR recursive)\n          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: \"latest\"\n          extended: true\n\n      - name: Build\n        run: hugo --minify\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        if: github.ref == 'refs/heads/master'\n        with:\n          github_token: ${{ secrets.ACCESS_TOKEN }}\n          publish_dir: ./public\n```\n\n下面我們分段來解釋上面腳本每行的意思。\n\n## Name\n\n基本上就是這個腳本的名稱，可以隨意自訂不會影響結果。\n\n## On\n\n```yml\non:\n  push:\n    branches:\n      - master # Set a branch to deploy\n  pull_request:\n```\n\n`on` 區段定義了這個腳本什麼時候會被執行，我們現在這個範例中，定義了這個腳本會在 `master` 這個分支被 push 的時候自動執行。Github 現在預設的分支名稱是 `main`，如果是 `main` 的人千萬要記得改，以免這個腳本永遠不會執行。\n\n## Jobs\n\n```yml\njobs:\n  deploy:\n    # 以下省略\n```\n\njobs 是整個檔案中最核心的部分，可以分成許多不同的 Job，目前我們只有一個叫做 `deploy` 的 Job，這個名稱也是可以自訂的，這裡只是取叫 `deploy` 看不順眼可以自己換。如果還需要有其他工作，可以自己視情況增加。\n\n### Job\n\n終於來到最核心的部分，deploy 任務中的第一行，就定義了這個任務要 Run 在哪個容器內，或是稱作哪個系統內。這邊是用 `ubuntu` 的 20.04，建議不要亂改，因為其他的 Linux 不一定可以完任務。\n\n```yml\ndeploy:\n  runs-on: ubuntu-20.04\n  ## 以下省略\n```\n\n### Steps\n\n接下來就是分步驟執行命令，`uses` 是利用 Github 上別人已經寫好的 Actions 腳本來執行命令，像是第一個 `uses: actions/checkout@v2` 就是李用 Github 上別人已經寫好的 `git checkout` 命令來把專案 checkout 到容器中。\n\n第二個部分也是使用別人已經寫好的腳本，快速的安裝 Hugo 到容器內，用別人寫好的東西來完成工作，避免不必要的重複造輪子。\n\n```yml\nsteps:\n    - uses: actions/checkout@v2\n    with:\n        submodules: true  # Fetch Hugo themes (true OR recursive)\n        fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod\n\n    - name: Setup Hugo\n    uses: peaceiris/actions-hugo@v2\n    with:\n        hugo-version: 'latest'\n        extended: true\n\n    - name: Build\n    run: hugo --minify\n\n    - name: Deploy\n    uses: peaceiris/actions-gh-pages@v3\n    if: github.ref == 'refs/heads/master'\n    with:\n        github_token: ${{ secrets.ACCESS_TOKEN }}\n        publish_dir: ./public\n```\n\n看到這裡也可以發現任務也是分很多步驟，第三部分的 Build 就是像是我們在本機目錄的產生方法一樣，直接輸入 `hugo` 命令產生靜態網頁。\n\n第四部分的 Deploy 就會比較複雜，這邊也是利用別人寫好用來發布 Github Pages 的任務，他會需要一個 Github Token，這個 Token 是要用來對 Repository 有 Push 的權限，雖然可以直接寫在腳本裡，但是就所有人都看得到你的 Token，那就會產生資安問題。所以 Github 提供 Secrets 的模式，可以把不方便直接寫在專案裡的機敏資料，放在 Github 上。\n\n所以我們現在會有兩件事要做：\n\n1. 產生 Token\n2. 把 Token 放到專案的 Secrets 中\n\n我們先來產生 Token，先到個人的設定頁面找到 Developer settings：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9cec1b4f-5bf6-4e41-9177-3cbe9ccfd400/large)\n\n再到 Token 的頁面產生新的 Token：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/dfa652f6-b8b1-4df2-5b7f-ccdda2e8df00/large)\n\n名稱可以自己隨意訂，Repo 的權限就全部打開，除了 Repo 以外的權限則都不需要。都確定後直接拉到最下面產生 Token：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/94de0480-f57a-4bef-b1e1-9ce3f75d2c00/large)\n\n會得到一組新的 Token，請注意不要像我一樣 Show 出來給別人看，請妥善保存，而且 Github 也只會顯示這一次，以後想要看都看不到，只能產生新的 Token。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/13bcbfe0-5bbc-4292-5679-cd5d1dba9f00/large)\n\n複製下 Token 後，我們到專案層級的設定，注意是**專案**的設定，不是個人設定：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/d5b06f39-8b64-4f76-3f68-84d30fbc9a00/large)\n\n找到 Secrets 並新增 Secrets：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/409789e1-87f4-4469-fcf4-032a27e05700/large)\n\n名字取好後，填入剛剛拿到的 Token，注意名稱要和剛剛在腳本中寫的一樣：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/8e7912d5-53fc-491a-a638-bee48f87be00/large)\n\n都填完後就大功告成，基本上只要 Push 到 Github 上，應該就會自動觸發上面寫的工作，以後只要文章有新的變動，Push 上來就會自動更新網頁網頁到專案的 `gh-pages` 分之上。想要進一步看到 Pages 的設定，可以到專案下的 Pages 的設定下看看，也可以在這裡自訂 Domian。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/e1c327a2-2e73-45ff-7305-a8440010d600/large)\n","excerpt":"Github Actions 是 Github 官方提供的 CI/CD 服務，編寫簡單的腳本，就可以在每次 Push、 PR 時，自動的檢查程式碼可不可以通過 Test，或是直接產生 Release 來交付專案成品。另外一個重點是，這個服務完全免費，而在私有 Repo，則是有限制容器的執行時間。本文使用 Github Actions 來自動將 Hugo 專案自動產生靜態網頁，並且將網頁發布到  …","frontmatter":{"title":"用 Github Actions 來發布 Hugo 靜態網頁","date":"2021-06-07T14:00:53.000Z","draft":false,"tags":["hugo","github","github-actions","web"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/3820056d-8496-4b29-efa0-716d71a45100/public","description":"Github Actions 是 Github 官方提供的 CI/CD 服務，編寫簡單的腳本，就可以在每次 Push、 PR 時，自動的檢查程式碼可不可以通過 Test，或是直接產生 Release 來交付專案成品。另外一個重點是，這個服務完全免費，而在私有 Repo，則是有限制容器的執行時間。本文使用 Github Actions 來自動將 Hugo 專案自動產生靜態網頁，並且將網頁發布到 gh-pages 的 git 分支。"}}}]}},"pageContext":{"id":"870e064c-4e10-52cf-8ee4-7e88a63fa689"}},"staticQueryHashes":[]}