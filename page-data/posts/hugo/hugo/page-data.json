{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/hugo/hugo","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"f3a9e4cd-72db-530a-a765-8befdead2d5b","html":"<p>Hugo 是靜態網頁的產生器，類似 Hexo 和 Jekyll，Hugo 由 go 語言編寫，效率極高，我原本是用 Hexo 在產生文章，後來發現 Hugo 這個好東西，也觀望了一陣子<del>其實是懶</del>，就決定換過來了，目前也用得非常順手。</p>\n<!--more-->\n<h2>安裝 Hugo</h2>\n<p>這是 Hugo 的<a href=\"https://gohugo.io/\">官網</a>，進去後可以看到一些簡單的介紹和安裝方法。</p>\n<p>我蠻推薦在 vscode 的 <code class=\"language-text\">code in container</code> 的方式用 Hugo，因為我自己也是這樣用，這樣就不用擔心會弄髒環境，但就讓有興趣的人自己研究吧，這裡我介紹一般電腦的安裝方式。</p>\n<h3>Windows</h3>\n<p>Windows 我建議是用 Chocolatey 來安裝是最方便的：</p>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">choco install hugo</code></pre></div>\n<p>但是如果不想要用 Chocolatey 安裝，可以去官方的 <a href=\"https://github.com/gohugoio/hugo/releases\">Github Release</a> 下載最新的 Windows 版本，下載完後記得加入 PATH。</p>\n<h3>Mac</h3>\n<p>macOS 安裝最簡單，用 Homebrew 就可以快速的安裝。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> hugo</code></pre></div>\n<h3>Linux</h3>\n<p>Linux 我一律建議從官方的 <a href=\"https://github.com/gohugoio/hugo/releases\">Github Release</a> 下載最新的版本，並自己加到 PATH。</p>\n<p>雖然 apt 等版本管理器好像有提供，但官方的文件上都說版本幾乎都不是最新版，所以也不建議。用下載的方式還是最方便的，或是用 Docker 也是好辦法。</p>\n<h2>開始使用 Hugo</h2>\n<p>先創建一個新的 Hugo 專案，下面的 <code class=\"language-text\">MyBlog</code> 可以換成自己想要的專案名稱：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hugo new site MyBlog</code></pre></div>\n<h3>新增主題</h3>\n<p>創建好專案後，就可以來新增主題，目前在 Hugo 上提供非常多的主題，我們可以到官方的這個<a href=\"https://themes.gohugo.io/\">網站</a>找找看，但目前些不要增加難度，用最官房提供的簡單的 ananke 主題就好，反正主題是隨時都可以換的。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> MyBlog\n<span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> submodule <span class=\"token function\">add</span> https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke\n<span class=\"token builtin class-name\">echo</span> theme <span class=\"token operator\">=</span> <span class=\"token punctuation\">\\</span>\"ananke<span class=\"token punctuation\">\\</span>\" <span class=\"token operator\">>></span> config.toml</code></pre></div>\n<p>可以看到，官方是建議使用 <code class=\"language-text\">git submodule</code> 的方式新增主題，這樣之後在更新主題的時候也比較方便。</p>\n<p>最後一行的 <code class=\"language-text\">echo</code> 指令會在專案底下產生一個 <code class=\"language-text\">config.toml</code> 的檔案，基本上之後所有有關 Hugo 網站的設定，都可以在這裡變更。這一行指令應該會幫你在檔案中產生如下的內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">theme</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ananke\"</span></code></pre></div>\n<h3>新增文章</h3>\n<p>在 Hugo 中新增文章的指令就是如下，可以自己修改檔名。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hugo new posts/my-first-post.md</code></pre></div>\n<p>產生完成後可以看到 Hugo 幫你產生了一些 Front Matter。</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token front-matter yaml language-yaml\">title: \"My First Post\"\ndate: 2019-03-26T08:47:11+01:00\ndraft: true</span>\n<span class=\"token punctuation\">---</span></span></code></pre></div>\n<p>上面的 <code class=\"language-text\">draft</code> 的指令是草稿的意思，如果沒有在上線前改成 <code class=\"language-text\">false</code>，是不會在正式網站中渲染的。</p>\n<p>現在可以自己產生的 Markdown 檔案中加一些內容，等等就可以看看效果怎麼樣。</p>\n<h2>執行 Hugo Server</h2>\n<p>要啟動 Hugo Server 也非常簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hugo server -D</code></pre></div>\n<p>上面的 <code class=\"language-text\">-D</code> 參數的意思是把 <code class=\"language-text\">draft</code> 的草稿文件也渲染，如果想要看看上線的網頁會長怎樣，可以不要加上這個參數。</p>\n<h2>產生靜態網頁</h2>\n<p>這個最簡單了，連猴子都會，<code class=\"language-text\">-D</code> 的參數一樣是渲染草稿文件，可視需求加上。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hugo</code></pre></div>\n<p>到這裡就介紹完成所有 Hugo 基本的使用方法了，之後我會介紹如何使用 Github Actio\bn，讓我們每次只需要 Push 專案，Github 就會幫我們重新建置並部署網站。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://gohugo.io/getting-started/quick-start/\">Hugo Quick Start</a></li>\n</ul>","rawMarkdownBody":"\nHugo 是靜態網頁的產生器，類似 Hexo 和 Jekyll，Hugo 由 go 語言編寫，效率極高，我原本是用 Hexo 在產生文章，後來發現 Hugo 這個好東西，也觀望了一陣子~~其實是懶~~，就決定換過來了，目前也用得非常順手。\n\n<!--more-->\n\n## 安裝 Hugo\n\n這是 Hugo 的[官網](https://gohugo.io/)，進去後可以看到一些簡單的介紹和安裝方法。\n\n我蠻推薦在 vscode 的 `code in container` 的方式用 Hugo，因為我自己也是這樣用，這樣就不用擔心會弄髒環境，但就讓有興趣的人自己研究吧，這裡我介紹一般電腦的安裝方式。\n\n### Windows\n\nWindows 我建議是用 Chocolatey 來安裝是最方便的：\n\n```ps1\nchoco install hugo\n```\n\n但是如果不想要用 Chocolatey 安裝，可以去官方的 [Github Release](https://github.com/gohugoio/hugo/releases) 下載最新的 Windows 版本，下載完後記得加入 PATH。\n\n### Mac\n\nmacOS 安裝最簡單，用 Homebrew 就可以快速的安裝。\n\n```bash\nbrew install hugo\n```\n\n### Linux\n\nLinux 我一律建議從官方的 [Github Release](https://github.com/gohugoio/hugo/releases) 下載最新的版本，並自己加到 PATH。\n\n雖然 apt 等版本管理器好像有提供，但官方的文件上都說版本幾乎都不是最新版，所以也不建議。用下載的方式還是最方便的，或是用 Docker 也是好辦法。\n\n## 開始使用 Hugo\n\n先創建一個新的 Hugo 專案，下面的 `MyBlog` 可以換成自己想要的專案名稱：\n\n```bash\nhugo new site MyBlog\n```\n\n### 新增主題\n\n創建好專案後，就可以來新增主題，目前在 Hugo 上提供非常多的主題，我們可以到官方的這個[網站](https://themes.gohugo.io/)找找看，但目前些不要增加難度，用最官房提供的簡單的 ananke 主題就好，反正主題是隨時都可以換的。\n\n```bash\ncd MyBlog\ngit init\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke\necho theme = \\\"ananke\\\" >> config.toml\n```\n\n可以看到，官方是建議使用 `git submodule` 的方式新增主題，這樣之後在更新主題的時候也比較方便。\n\n最後一行的 `echo` 指令會在專案底下產生一個 `config.toml` 的檔案，基本上之後所有有關 Hugo 網站的設定，都可以在這裡變更。這一行指令應該會幫你在檔案中產生如下的內容：\n\n```toml\ntheme = \"ananke\"\n```\n\n### 新增文章\n\n在 Hugo 中新增文章的指令就是如下，可以自己修改檔名。\n\n```bash\nhugo new posts/my-first-post.md\n```\n\n產生完成後可以看到 Hugo 幫你產生了一些 Front Matter。\n\n```md\n---\ntitle: \"My First Post\"\ndate: 2019-03-26T08:47:11+01:00\ndraft: true\n---\n```\n\n上面的 `draft` 的指令是草稿的意思，如果沒有在上線前改成 `false`，是不會在正式網站中渲染的。\n\n現在可以自己產生的 Markdown 檔案中加一些內容，等等就可以看看效果怎麼樣。\n\n## 執行 Hugo Server\n\n要啟動 Hugo Server 也非常簡單：\n\n```bash\nhugo server -D\n```\n\n上面的 `-D` 參數的意思是把 `draft` 的草稿文件也渲染，如果想要看看上線的網頁會長怎樣，可以不要加上這個參數。\n\n## 產生靜態網頁\n\n這個最簡單了，連猴子都會，`-D` 的參數一樣是渲染草稿文件，可視需求加上。\n\n```bash\nhugo\n```\n\n到這裡就介紹完成所有 Hugo 基本的使用方法了，之後我會介紹如何使用 Github Actio\bn，讓我們每次只需要 Push 專案，Github 就會幫我們重新建置並部署網站。\n\n## Reference\n\n- [Hugo Quick Start](https://gohugo.io/getting-started/quick-start/)\n","excerpt":"Hugo 是靜態網頁的產生器，類似 Hexo 和 Jekyll，Hugo 由 go 語言編寫，效率極高，我原本是用 Hexo 在產生文章，後來發現 Hugo 這個好東西，也觀望了一陣子其實是懶，就決定換過來了，目前也用得非常順手。 安裝 Hugo 這是 Hugo 的官網，進去後可以看到一些簡單的介紹和安裝方法。 我蠻推薦在 vscode 的  的方式用 Hugo，因為我自己也是這樣用，這樣就不用…","frontmatter":{"title":"用 Hugo 來寫文章吧","date":"2021-06-06T18:10:46.000Z","draft":false,"tags":["hugo","blog","mac","linux","windows"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/f50473d3-1acc-431a-402d-3c79f4170b00/public","description":"Hugo 是靜態網頁的產生器，類似 Hexo 和 Jekyll，Hugo 由 go 語言編寫，效率極高。"}}}]}},"pageContext":{"id":"f3a9e4cd-72db-530a-a765-8befdead2d5b"}},"staticQueryHashes":[]}