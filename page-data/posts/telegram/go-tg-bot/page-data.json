{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/telegram/go-tg-bot","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"1d4cfb1d-cfcb-523d-aa37-6e138ccb28db","html":"<p>Telegram Bot 沒有任何使用限制，可以寫出許多屬於自己的幫手。本篇簡單的用 Go 寫一個鸚鵡機器人，用戶說什麼，機器人就回什麼。</p>\n<!--more-->\n<h2>新增自己的 Bot</h2>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/fbf36cb0-84f4-4f7a-2553-04ecccf44800/public\" alt=\"image\"></p>\n<p>Telegram 非常有趣，要新增自己的 Bot，只要跟 Telegram 上的 <a href=\"https://telegram.me/BotFather\">BotFather</a> <code class=\"language-text\">說一下</code>，他就會給你一個 Bot。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9200bc38-828c-4ad4-a022-d34c3a692d00/public\" alt=\"image\"></p>\n<p>按 BotFather 給你的步驟做，最後可以看到他會提供一個 API Token 給你，只要有這個 Token 就可以跟 Bot 溝通，要保存好，等等會用到，也不要給別人看到，以免自己的 Bot 變成別人的玩具。</p>\n<h2>go-telegram-bot-api</h2>\n<p>Go 已經有社區開發的函式庫可以用 <a href=\"https://github.com/go-telegram-bot-api/telegram-bot-api\">telegram-bot-api</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">go get -u github.com/go-telegram-bot-api/telegram-bot-api/v5\n</code></pre></div>\n<p>之後只要 import 就可以使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    tgbotapi <span class=\"token string\">\"github.com/go-telegram-bot-api/telegram-bot-api/v5\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>連線到 Telegram Bot</h2>\n<p>利用剛剛 import 的函式庫，只需要剛剛創建好的 Bot 的 API Token 就可以連線到 Telegram。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">bot<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewBotAPI</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TELEGRAM_API_TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面用環境變數的方式來取得 TOKEN，避免需要直接寫在程式碼裡，如果覺得在測試時設定環境變數很麻煩，可以用 JetBrains 的 <a href=\"https://www.jetbrains.com/go/\">GoLand</a>，設定 Runtime 的環境變數：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9af5d8a5-3504-479d-ab04-f8b0adf93500/public\" alt=\"image\"></p>\n<h2>處理 Update</h2>\n<p>要接收使用者傳過來的訊息，Telegram API 稱為 Update，我們使用的函示庫基本上都自動處理好了，只需要接收一個 Channel 就好。使用 <code class=\"language-text\">bot.GetUpdatesChan(config)</code> 會需要給一個 Config，這可以用 <code class=\"language-text\">tgbotapi.NewUpdate(0)</code> 來生，然後這邊設定 Timeout 為 60，如果對這個設定值有興趣，可以去看 Telegram 的文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">updateConfig <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewUpdate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nupdateConfig<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\nupdates <span class=\"token operator\">:=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">GetUpdatesChan</span><span class=\"token punctuation\">(</span>updateConfig<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>回復</h2>\n<p>我們先簡單寫一隻鸚鵡，把用戶傳過來的 Text，直接傳回去。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/19bbc73e-3090-4a0d-0eec-d65671c01900/public\" alt=\"image\"></p>\n<p>用 for 把 Channel 中的 Update 一個一個拿出來，然後用 <code class=\"language-text\">tgbotapi</code> 產生一個 Message 物件，裡面放在聊天室的 ID 和要回傳的 Text，最後用 bot 把 Message 傳回去。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> update <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> updates <span class=\"token punctuation\">{</span>\n    text <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Text\n    chatID <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Chat<span class=\"token punctuation\">.</span>ID\n    replyMsg <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewMessage</span><span class=\"token punctuation\">(</span>chatID<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>replyMsg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>簡單鸚鵡的完整程式碼</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    tgbotapi <span class=\"token string\">\"github.com/go-telegram-bot-api/telegram-bot-api/v5\"</span>\n    <span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bot<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewBotAPI</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TELEGRAM_API_TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    bot<span class=\"token punctuation\">.</span>Debug <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    updateConfig <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewUpdate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    updateConfig<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\n    updates <span class=\"token operator\">:=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">GetUpdatesChan</span><span class=\"token punctuation\">(</span>updateConfig<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> update <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> updates <span class=\"token punctuation\">{</span>\n        text <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Text\n        chatID <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Chat<span class=\"token punctuation\">.</span>ID\n        replyMsg <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewMessage</span><span class=\"token punctuation\">(</span>chatID<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>replyMsg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>改寫成非阻塞的 Goroutine</h2>\n<p>因為每次處理和回復都會需要一點時間，甚至是要去 DB 找資料，如果用上面的寫法，在處理多人或高速傳訊息的時候會被卡住，一次只能處理的一個訊息。還好 Go 的併發寫法非常簡單，只要放一個 go 在前面，就可以非阻塞的執行 function 中的內容。</p>\n<p>我們先把 <code class=\"language-text\">handleUpdate</code> 提取成一個 function，然後再用 go 去執行他：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bot<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewBotAPI</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TELEGRAM_API_TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    bot<span class=\"token punctuation\">.</span>Debug <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    updateConfig <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewUpdate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    updateConfig<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\n    updates <span class=\"token operator\">:=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">GetUpdatesChan</span><span class=\"token punctuation\">(</span>updateConfig<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> update <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> updates <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span>bot <span class=\"token operator\">*</span>tgbotapi<span class=\"token punctuation\">.</span>BotAPI<span class=\"token punctuation\">,</span> update tgbotapi<span class=\"token punctuation\">.</span>Update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    text <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Text\n    chatID <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Chat<span class=\"token punctuation\">.</span>ID\n    replyMsg <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewMessage</span><span class=\"token punctuation\">(</span>chatID<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>replyMsg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>回復特定訊息</h2>\n<p>要回復 <code class=\"language-text\">回復訊息</code> ，像是下面的效果也很簡單：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/22010000-e325-45e6-52f9-64eec6b28500/public\" alt=\"image\"></p>\n<p>只需要設定 <code class=\"language-text\">replyMsg.ReplyToMessageID</code> 就可以回復特定的訊息，下面就是直接回覆接收到的訊息：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span>bot <span class=\"token operator\">*</span>tgbotapi<span class=\"token punctuation\">.</span>BotAPI<span class=\"token punctuation\">,</span> update tgbotapi<span class=\"token punctuation\">.</span>Update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    text <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Text\n    chatID <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Chat<span class=\"token punctuation\">.</span>ID\n    replyMsg <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewMessage</span><span class=\"token punctuation\">(</span>chatID<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n    replyMsg<span class=\"token punctuation\">.</span>ReplyToMessageID <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>MessageID\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>replyMsg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>處理 Command</h2>\n<p>Telegram 中，用 <code class=\"language-text\">/</code> 開頭的文字就是 Command，這個函示庫也有寫好處理 Command 的方法，只需要用 <code class=\"language-text\">isCommand()</code>，確認一下是不是 Command 就可以：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span>bot <span class=\"token operator\">*</span>tgbotapi<span class=\"token punctuation\">.</span>BotAPI<span class=\"token punctuation\">,</span> update tgbotapi<span class=\"token punctuation\">.</span>Update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    text <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Text\n    chatID <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>Chat<span class=\"token punctuation\">.</span>ID\n    replyMsg <span class=\"token operator\">:=</span> tgbotapi<span class=\"token punctuation\">.</span><span class=\"token function\">NewMessage</span><span class=\"token punctuation\">(</span>chatID<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span><span class=\"token function\">IsCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span>\n            replyMsg<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> update<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">.</span>From<span class=\"token punctuation\">.</span>FirstName\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"help\"</span><span class=\"token punctuation\">:</span>\n            replyMsg<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"What can I help you?\"</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            replyMsg<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"No such command!!!\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> bot<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>replyMsg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的程式碼其實也可以看到如何拿到傳送者的一些基本資料。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/0fd54240-5c18-4b75-c7be-981cdb144e00/public\" alt=\"image\"></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://core.telegram.org/\">Telegram APIs</a></li>\n<li><a href=\"https://github.com/go-telegram-bot-api/telegram-bot-api\">Golang bindings for the Telegram Bot API - GitHub</a></li>\n</ul>","rawMarkdownBody":"\nTelegram Bot 沒有任何使用限制，可以寫出許多屬於自己的幫手。本篇簡單的用 Go 寫一個鸚鵡機器人，用戶說什麼，機器人就回什麼。\n\n<!--more-->\n\n## 新增自己的 Bot\n\n![image](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/fbf36cb0-84f4-4f7a-2553-04ecccf44800/public)\n\nTelegram 非常有趣，要新增自己的 Bot，只要跟 Telegram 上的 [BotFather](https://telegram.me/BotFather) `說一下`，他就會給你一個 Bot。\n\n![image](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9200bc38-828c-4ad4-a022-d34c3a692d00/public)\n\n按 BotFather 給你的步驟做，最後可以看到他會提供一個 API Token 給你，只要有這個 Token 就可以跟 Bot 溝通，要保存好，等等會用到，也不要給別人看到，以免自己的 Bot 變成別人的玩具。\n\n## go-telegram-bot-api\n\nGo 已經有社區開發的函式庫可以用 [telegram-bot-api](https://github.com/go-telegram-bot-api/telegram-bot-api)。\n\n```shell\ngo get -u github.com/go-telegram-bot-api/telegram-bot-api/v5\n\n```\n\n之後只要 import 就可以使用：\n\n```go\nimport (\n    tgbotapi \"github.com/go-telegram-bot-api/telegram-bot-api/v5\"\n)\n```\n\n## 連線到 Telegram Bot\n\n利用剛剛 import 的函式庫，只需要剛剛創建好的 Bot 的 API Token 就可以連線到 Telegram。\n\n```go\nbot, err := tgbotapi.NewBotAPI(os.Getenv(\"TELEGRAM_API_TOKEN\"))\nif err != nil {\n    panic(err)\n}\n```\n\n上面用環境變數的方式來取得 TOKEN，避免需要直接寫在程式碼裡，如果覺得在測試時設定環境變數很麻煩，可以用 JetBrains 的 [GoLand](https://www.jetbrains.com/go/)，設定 Runtime 的環境變數：\n\n![image](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/9af5d8a5-3504-479d-ab04-f8b0adf93500/public)\n\n## 處理 Update\n\n要接收使用者傳過來的訊息，Telegram API 稱為 Update，我們使用的函示庫基本上都自動處理好了，只需要接收一個 Channel 就好。使用 `bot.GetUpdatesChan(config)` 會需要給一個 Config，這可以用 `tgbotapi.NewUpdate(0)` 來生，然後這邊設定 Timeout 為 60，如果對這個設定值有興趣，可以去看 Telegram 的文件。\n\n```go\nupdateConfig := tgbotapi.NewUpdate(0)\nupdateConfig.Timeout = 60\nupdates := bot.GetUpdatesChan(updateConfig)\n```\n\n## 回復\n\n我們先簡單寫一隻鸚鵡，把用戶傳過來的 Text，直接傳回去。\n\n![image](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/19bbc73e-3090-4a0d-0eec-d65671c01900/public)\n\n用 for 把 Channel 中的 Update 一個一個拿出來，然後用 `tgbotapi` 產生一個 Message 物件，裡面放在聊天室的 ID 和要回傳的 Text，最後用 bot 把 Message 傳回去。\n\n```go\nfor update := range updates {\n    text := update.Message.Text\n    chatID := update.Message.Chat.ID\n    replyMsg := tgbotapi.NewMessage(chatID, text)\n    _, _ = bot.Send(replyMsg)\n}\n```\n\n## 簡單鸚鵡的完整程式碼\n\n```go\npackage main\n\nimport (\n    tgbotapi \"github.com/go-telegram-bot-api/telegram-bot-api/v5\"\n    \"os\"\n)\n\nfunc main() {\n    bot, err := tgbotapi.NewBotAPI(os.Getenv(\"TELEGRAM_API_TOKEN\"))\n    if err != nil {\n        panic(err)\n    }\n    bot.Debug = true\n    updateConfig := tgbotapi.NewUpdate(0)\n    updateConfig.Timeout = 60\n    updates := bot.GetUpdatesChan(updateConfig)\n    for update := range updates {\n        text := update.Message.Text\n        chatID := update.Message.Chat.ID\n        replyMsg := tgbotapi.NewMessage(chatID, text)\n        _, _ = bot.Send(replyMsg)\n    }\n}\n```\n\n## 改寫成非阻塞的 Goroutine\n\n因為每次處理和回復都會需要一點時間，甚至是要去 DB 找資料，如果用上面的寫法，在處理多人或高速傳訊息的時候會被卡住，一次只能處理的一個訊息。還好 Go 的併發寫法非常簡單，只要放一個 go 在前面，就可以非阻塞的執行 function 中的內容。\n\n我們先把 `handleUpdate` 提取成一個 function，然後再用 go 去執行他：\n\n```go\nfunc main() {\n    bot, err := tgbotapi.NewBotAPI(os.Getenv(\"TELEGRAM_API_TOKEN\"))\n    if err != nil {\n        panic(err)\n    }\n    bot.Debug = true\n    updateConfig := tgbotapi.NewUpdate(0)\n    updateConfig.Timeout = 60\n    updates := bot.GetUpdatesChan(updateConfig)\n    for update := range updates {\n        go handleUpdate(bot, update)\n    }\n}\n\nfunc handleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {\n    text := update.Message.Text\n    chatID := update.Message.Chat.ID\n    replyMsg := tgbotapi.NewMessage(chatID, text)\n    _, _ = bot.Send(replyMsg)\n}\n```\n\n## 回復特定訊息\n\n要回復 `回復訊息` ，像是下面的效果也很簡單：\n\n![image](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/22010000-e325-45e6-52f9-64eec6b28500/public)\n\n只需要設定 `replyMsg.ReplyToMessageID` 就可以回復特定的訊息，下面就是直接回覆接收到的訊息：\n\n```go\nfunc handleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {\n    text := update.Message.Text\n    chatID := update.Message.Chat.ID\n    replyMsg := tgbotapi.NewMessage(chatID, text)\n    replyMsg.ReplyToMessageID = update.Message.MessageID\n    _, _ = bot.Send(replyMsg)\n}\n```\n\n## 處理 Command\n\nTelegram 中，用 `/` 開頭的文字就是 Command，這個函示庫也有寫好處理 Command 的方法，只需要用 `isCommand()`，確認一下是不是 Command 就可以：\n\n```go\nfunc handleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {\n    text := update.Message.Text\n    chatID := update.Message.Chat.ID\n    replyMsg := tgbotapi.NewMessage(chatID, text)\n    if update.Message.IsCommand() {\n        switch update.Message.Command() {\n        case \"start\":\n            replyMsg.Text = \"Hello \" + update.Message.From.FirstName\n        case \"help\":\n            replyMsg.Text = \"What can I help you?\"\n        default:\n            replyMsg.Text = \"No such command!!!\"\n        }\n    }\n    _, _ = bot.Send(replyMsg)\n}\n```\n\n上面的程式碼其實也可以看到如何拿到傳送者的一些基本資料。\n\n![image](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/0fd54240-5c18-4b75-c7be-981cdb144e00/public)\n\n## Reference\n\n- [Telegram APIs](https://core.telegram.org/)\n- [Golang bindings for the Telegram Bot API - GitHub](https://github.com/go-telegram-bot-api/telegram-bot-api)\n","excerpt":"Telegram Bot 沒有任何使用限制，可以寫出許多屬於自己的幫手。本篇簡單的用 Go 寫一個鸚鵡機器人，用戶說什麼，機器人就回什麼。 新增自己的 Bot image Telegram 非常有趣，要新增自己的 Bot，只要跟 Telegram 上的 BotFather ，他就會給你一個 Bot。 image 按 BotFather 給你的步驟做，最後可以看到他會提供一個 API Token …","frontmatter":{"title":"用 Go 寫 Telegram Bot","date":"2021-12-11T14:30:15.000Z","draft":false,"tags":["go","golang","telegram","bot","telegram-bot"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/f8c04956-a2ef-4cba-b9fe-2a5ceff40b00/public","description":"Telegram Bot 沒有任何使用限制，可以寫出許多屬於自己的幫手。本篇簡單的用 Go 寫一個鸚鵡機器人，用戶說什麼，機器人就回什麼。"}}}]}},"pageContext":{"id":"1d4cfb1d-cfcb-523d-aa37-6e138ccb28db"}},"staticQueryHashes":[]}