{"componentChunkName":"component---src-templates-article-template-tsx","path":"/posts/vscode/ssh-dev container","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"ac9f4102-ef52-5589-bb60-42d6690cde08","html":"<p>為什麼要在 Container 中 Coding？因爲開發中最大的難題總是在環境建置，好不容易建置好環境，要寫下個專案時，因為電腦已經髒兮兮，安裝環境時就會容易衝到版本，而造成惡性循環，環境建置一次比一次困難，最後發現重灌電腦最快。在 Container 中 Coding 就可以簡單用完即丟，每次都可以在乾淨的電腦安裝環境，裝任何東西也不怕把本機弄髒，在 Windows 上更可以簡單的在 Linux 中開發。</p>\n<!--more-->\n<p>在 Container 裡 Coding 已經不是什麼新鮮事，VSCode 的官方就有提供 <a href=\"https://code.visualstudio.com/docs/remote/containers\">Developing inside a Container</a> 的官方文件，可以用本機的 Docker 快速的產生 Container 並且在裡面開發。壞處就是只能在本機連線，如果有多台電腦想要共同開發的需求，就只好用今天要介紹的方式，用 SSH 連入 Container，只要連得上 SSH 就可以開發，開發時也不用被侷限在一台電腦的 Docker 上。當然，最大的缺點就是要有一台一直運作著 Docker 的 Server 可以讓你隨時連線。GitHub 有一個 <a href=\"https://github.com/features/codespaces\">Codespace</a> 的功能，就是很類似的想法，Code in Cloud，但畢竟是企業的收費服務，我之前有抽到預覽版，到現在都可以免費使用，是真的很方便的功能，也就是他的方便，讓我想研究如何自己架類似的服務。</p>\n<h2>Dockerfile</h2>\n<p>簡單來說就是創建一個已經被預裝 SSH Server 的 Linux，我們今天就用 Ubuntu，然後順便預裝一些開發中常會用到套件，像是 <code class=\"language-text\">git</code>, <code class=\"language-text\">vim</code> 等等。</p>\n<blockquote>\n<p>如果想跳過這步驟，用我創建好的 Image 可以拉到下一個章節去看</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> UBUNTU_VERSION=latest</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:<span class=\"token variable\">${UBUNTU_VERSION}</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DEBIAN_FRONTEND noninteractive</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt update <span class=\"token operator\">\\</span>\n    &amp;&amp; apt install -y openssh-server ssh sudo git vim <span class=\"token operator\">\\</span>\n    &amp;&amp; useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1000 ubuntu <span class=\"token operator\">\\</span>\n    &amp;&amp; echo <span class=\"token string\">\"ubuntu:ubuntu\"</span> | chpasswd <span class=\"token operator\">\\</span>\n    &amp;&amp; echo <span class=\"token string\">'%sudo ALL=(ALL) NOPASSWD:ALL'</span> >> /etc/sudoers <span class=\"token operator\">\\</span>\n    &amp;&amp; service ssh start</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 22</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"/usr/sbin/sshd\"</span>, <span class=\"token string\">\"-D\"</span>]</span></code></pre></div>\n<p>可以看到我把帳號密碼都設置為 <code class=\"language-text\">ubuntu</code>，然後讓 <code class=\"language-text\">sudo</code> 時可以不用密碼。然後安裝啟動 ssh service，最後開啟 22 port。用下面的 Docker 指令就可以創建自己的 Image：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> build -t ssh-ubuntu <span class=\"token builtin class-name\">.</span></code></pre></div>\n<h3>我構建好的 Image</h3>\n<p>我有創一個 GitHub Repo 放我的 Dockerfile，並用 GitHub Actions + Packages 來發布 Image，Image 名稱為 <code class=\"language-text\">ghcr.io/tonypepebear/ssh-dev-ubuntu</code>。</p>\n<p><a href=\"https://github.com/TonyPepeBear/ssh-dev-container/pkgs/container/ssh-dev-ubuntu\">Package 網址</a></p>\n<h2>啟動 Container 並 SSH 連入</h2>\n<p>啟動 Container 並把 22 Port 弄出來，我是映射到 8222：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run -dp <span class=\"token number\">8222</span>:22 ssh-ubuntu\n\n如果要用我的 Image：\n<span class=\"token function\">docker</span> run -dp <span class=\"token number\">8222</span>:22 ghcr.io/tonypepebear/ssh-dev-ubuntu</code></pre></div>\n<p>SSH 連入，詢問密碼就是 <code class=\"language-text\">ubuntu</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">ssh</span> -p <span class=\"token number\">8222</span> ubuntu@localhost</code></pre></div>\n<p>如果沒發生問題，到現在應該就可以順利的連到 Container 中。</p>\n<h2>VSCode SSH 連線</h2>\n<p>需要先在 VSCode 中安裝 Remote - SSH 套件，如圖：</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/be8ec8dc-8900-4cbe-1587-45fa6f3f6500/public\" alt=\"img\"></p>\n<p>安裝完成後，點擊最左下角的 Remote 功能，再選擇 Connect to SSH Host，輸入 SSH 指令 <code class=\"language-text\">ssh -p 8222 ubuntu@localhost</code>，就可以順利連到 Container 中。</p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/960ea18c-82c7-4ce1-73d3-8ff092f2b000/public\" alt=\"img\"></p>\n<p><img src=\"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/814b9dac-f39d-4d07-1095-2d280cd5e300/public\" alt=\"img\"></p>\n<h2>後記</h2>\n<p>其實我也不會每個專案都新增一個新的 Container，而是用到我受不了或衝突到後，才創建一個新的，畢竟每次創新的 Container 也是有點麻煩，但是能讓我在安裝一些亂七八糟的環境 (就是在說你們 npm, pip) 時，可以大膽地按下去，不用擔心把電腦搞到受不了才是重點。希望大家在開發的路上可以更加順利。</p>\n<p>另外，VSCode 的 SSH 連線功能真的做的不錯，甚至可以 Port Forwarding，在開發網頁的時候不用在 Docker 中多 Forwarding 一個 Port，可以隨時用 VSCode Forwarding 到本機上。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://code.visualstudio.com/docs/remote/ssh\">Remote Development using SSH</a></li>\n</ul>","rawMarkdownBody":"\n為什麼要在 Container 中 Coding？因爲開發中最大的難題總是在環境建置，好不容易建置好環境，要寫下個專案時，因為電腦已經髒兮兮，安裝環境時就會容易衝到版本，而造成惡性循環，環境建置一次比一次困難，最後發現重灌電腦最快。在 Container 中 Coding 就可以簡單用完即丟，每次都可以在乾淨的電腦安裝環境，裝任何東西也不怕把本機弄髒，在 Windows 上更可以簡單的在 Linux 中開發。\n\n<!--more-->\n\n在 Container 裡 Coding 已經不是什麼新鮮事，VSCode 的官方就有提供 [Developing inside a Container](https://code.visualstudio.com/docs/remote/containers) 的官方文件，可以用本機的 Docker 快速的產生 Container 並且在裡面開發。壞處就是只能在本機連線，如果有多台電腦想要共同開發的需求，就只好用今天要介紹的方式，用 SSH 連入 Container，只要連得上 SSH 就可以開發，開發時也不用被侷限在一台電腦的 Docker 上。當然，最大的缺點就是要有一台一直運作著 Docker 的 Server 可以讓你隨時連線。GitHub 有一個 [Codespace](https://github.com/features/codespaces) 的功能，就是很類似的想法，Code in Cloud，但畢竟是企業的收費服務，我之前有抽到預覽版，到現在都可以免費使用，是真的很方便的功能，也就是他的方便，讓我想研究如何自己架類似的服務。\n\n## Dockerfile\n\n簡單來說就是創建一個已經被預裝 SSH Server 的 Linux，我們今天就用 Ubuntu，然後順便預裝一些開發中常會用到套件，像是 `git`, `vim` 等等。\n\n> 如果想跳過這步驟，用我創建好的 Image 可以拉到下一個章節去看\n\n```Dockerfile\nARG UBUNTU_VERSION=latest\n\nFROM ubuntu:${UBUNTU_VERSION}\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt update \\\n    && apt install -y openssh-server ssh sudo git vim \\\n    && useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1000 ubuntu \\\n    && echo \"ubuntu:ubuntu\" | chpasswd \\\n    && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \\\n    && service ssh start\n\nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n可以看到我把帳號密碼都設置為 `ubuntu`，然後讓 `sudo` 時可以不用密碼。然後安裝啟動 ssh service，最後開啟 22 port。用下面的 Docker 指令就可以創建自己的 Image：\n\n```shell\ndocker build -t ssh-ubuntu .\n```\n\n### 我構建好的 Image\n\n我有創一個 GitHub Repo 放我的 Dockerfile，並用 GitHub Actions + Packages 來發布 Image，Image 名稱為 `ghcr.io/tonypepebear/ssh-dev-ubuntu`。\n\n[Package 網址](https://github.com/TonyPepeBear/ssh-dev-container/pkgs/container/ssh-dev-ubuntu)\n\n## 啟動 Container 並 SSH 連入\n\n啟動 Container 並把 22 Port 弄出來，我是映射到 8222：\n\n```shell\ndocker run -dp 8222:22 ssh-ubuntu\n\n如果要用我的 Image：\ndocker run -dp 8222:22 ghcr.io/tonypepebear/ssh-dev-ubuntu\n```\n\nSSH 連入，詢問密碼就是 `ubuntu`：\n\n```shell\nssh -p 8222 ubuntu@localhost\n```\n\n如果沒發生問題，到現在應該就可以順利的連到 Container 中。\n\n## VSCode SSH 連線\n\n需要先在 VSCode 中安裝 Remote - SSH 套件，如圖：\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/be8ec8dc-8900-4cbe-1587-45fa6f3f6500/public)\n\n安裝完成後，點擊最左下角的 Remote 功能，再選擇 Connect to SSH Host，輸入 SSH 指令 `ssh -p 8222 ubuntu@localhost`，就可以順利連到 Container 中。\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/960ea18c-82c7-4ce1-73d3-8ff092f2b000/public)\n\n![img](https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/814b9dac-f39d-4d07-1095-2d280cd5e300/public)\n\n## 後記\n\n其實我也不會每個專案都新增一個新的 Container，而是用到我受不了或衝突到後，才創建一個新的，畢竟每次創新的 Container 也是有點麻煩，但是能讓我在安裝一些亂七八糟的環境 (就是在說你們 npm, pip) 時，可以大膽地按下去，不用擔心把電腦搞到受不了才是重點。希望大家在開發的路上可以更加順利。\n\n另外，VSCode 的 SSH 連線功能真的做的不錯，甚至可以 Port Forwarding，在開發網頁的時候不用在 Docker 中多 Forwarding 一個 Port，可以隨時用 VSCode Forwarding 到本機上。\n\n## Reference\n\n- [Remote Development using SSH](https://code.visualstudio.com/docs/remote/ssh)\n","excerpt":"為什麼要在 Container 中 Coding？因爲開發中最大的難題總是在環境建置，好不容易建置好環境，要寫下個專案時，因為電腦已經髒兮兮，安裝環境時就會容易衝到版本，而造成惡性循環，環境建置一次比一次困難，最後發現重灌電腦最快。在 Container 中 Coding 就可以簡單用完即丟，每次都可以在乾淨的電腦安裝環境，裝任何東西也不怕把本機弄髒，在 Windows 上更可以簡單的在 Lin…","frontmatter":{"title":"VSCode SSH 連入 Docker Container","date":"2022-05-21T14:07:16.000Z","draft":false,"tags":["vscode","ssh","docker"],"image":"https://imagedelivery.net/cdkaXPuFls5qlrh3GM4hfA/0f3867f8-dd79-482c-1f27-a7a166f7dc00/public","description":null}}}]}},"pageContext":{"id":"ac9f4102-ef52-5589-bb60-42d6690cde08"}},"staticQueryHashes":[]}